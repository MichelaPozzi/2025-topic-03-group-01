if (n==1) {
q <- fit
C1 <- q[1]
mean1 <- q[2]
sigma1 <- q[3]
dffit$df.y <- C1 * exp(-(z-mean1)**2/(2 * sigma1**2))
} else {
if (n==2) {
q <- fit
C1 <- q[1]
mean1 <- q[2]
sigma1 <- q[3]
C2 <- q[4]
mean2 <- q[5]
sigma2 <- q[6]
dffit$df.y <- ( C1 * exp(-(z-mean1)**2/(2 * sigma1**2)) + C2 * exp(-(z-mean2)**2/(2 * sigma2**2)) )
} else {
if (n==3) {
q <- fit
C1 <- q[1]
mean1 <- q[2]
sigma1 <- q[3]
C2 <- q[4]
mean2 <- q[5]
sigma2 <- q[6]
C3 <- q[7]
mean3 <- q[8]
sigma3 <- q[9]
dffit$df.y <- ( C1 * exp(-(z-mean1)**2/(2 * sigma1**2)) + C2 * exp(-(z-mean2)**2/(2 * sigma2**2)) + C3 * exp(-(z-mean3)**2/(2 * sigma3**2)) )
} else {
if (n==4) {
q <- fit
C1 <- q[1]
mean1 <- q[2]
sigma1 <- q[3]
C2 <- q[4]
mean2 <- q[5]
sigma2 <- q[6]
C3 <- q[7]
mean3 <- q[8]
sigma3 <- q[9]
C4 <- q[10]
mean4 <- q[11]
sigma4 <- q[12]
dffit$df.y <- ( C1 * exp(-(z-mean1)**2/(2 * sigma1**2)) + C2 * exp(-(z-mean2)**2/(2 * sigma2**2)) + C3 * exp(-(z-mean3)**2/(2 * sigma3**2)) + C4 * exp(-(z-mean4)**2/(2 * sigma4**2)) )
} else {
if (n==5) {
q <- fit
C1 <- q[1]
mean1 <- q[2]
sigma1 <- q[3]
C2 <- q[4]
mean2 <- q[5]
sigma2 <- q[6]
C3 <- q[7]
mean3 <- q[8]
sigma3 <- q[9]
C4 <- q[10]
mean4 <- q[11]
sigma4 <- q[12]
C5 <- q[13]
mean5 <- q[14]
sigma5 <- q[15]
dffit$df.y <- ( C1 * exp(-(z-mean1)**2/(2 * sigma1**2)) + C2 * exp(-(z-mean2)**2/(2 * sigma2**2)) + C3 * exp(-(z-mean3)**2/(2 * sigma3**2)) + C4 * exp(-(z-mean4)**2/(2 * sigma4**2)) + C5 * exp(-(z-mean5)**2/(2 * sigma5**2)) )
} else {
q <- fit
C1 <- q[1]
mean1 <- q[2]
sigma1 <- q[3]
C2 <- q[4]
mean2 <- q[5]
sigma2 <- q[6]
C3 <- q[7]
mean3 <- q[8]
sigma3 <- q[9]
C4 <- q[10]
mean4 <- q[11]
sigma4 <- q[12]
C5 <- q[13]
mean5 <- q[14]
sigma5 <- q[15]
C6 <- q[16]
mean6 <- q[17]
sigma6 <- q[18]
dffit$df.y <- ( C1 * exp(-(z-mean1)**2/(2 * sigma1**2)) + C2 * exp(-(z-mean2)**2/(2 * sigma2**2)) + C3 * exp(-(z-mean3)**2/(2 * sigma3**2)) + C4 * exp(-(z-mean4)**2/(2 * sigma4**2)) + C5 * exp(-(z-mean5)**2/(2 * sigma5**2)) + C6 * exp(-(z-mean6)**2/(2 * sigma6**2)) )
}
}
}
}
}
}
#Result is scaled so that the area under the curve equals 100%. The *0.1 accounts for the integration step size since z increases in 0.1 increments
return(dffit$df.y * 100 / (sum(dffit$df.y) * 0.1))
}
# *0.1 is used to scale the resulting curve at the level of the normalized raw data. However, sum is 1000 and not 100.
#For each index t, fit_param are extracted and flattend. fine_fit() is applied to parameters returning vector of 251 normalized values (z= 0, 0.1,...)
table.ctrl1.fit.fine <- t(apply(vect, 2, function(t) {
fit_param <- as.numeric(unlist(table.ctrl1.fit[t,"fit_param"]))
fine_fit(fit_param)
}))
#Assign row and column names
rownames(table.ctrl1.fit.fine) <- rownames(table.ctrl1.fit)
colnames(table.ctrl1.fit.fine) <- lapply(seq(0,25,0.1), as.character)
table.ctrl2.fit.fine <- t(apply(vect, 2, function(t) {
fit_param <- as.numeric(unlist(table.ctrl2.fit[t,"fit_param"]))
fine_fit(fit_param)
}))
rownames(table.ctrl2.fit.fine) <- rownames(table.ctrl2.fit)
colnames(table.ctrl2.fit.fine) <- lapply(seq(0,25,0.1), as.character)
table.ctrl3.fit.fine <- t(apply(vect, 2, function(t) {
fit_param <- as.numeric(unlist(table.ctrl3.fit[t,"fit_param"]))
fine_fit(fit_param)
}))
rownames(table.ctrl3.fit.fine) <- rownames(table.ctrl3.fit)
colnames(table.ctrl3.fit.fine) <- lapply(seq(0,25,0.1), as.character)
table.rnase1.fit.fine <- t(apply(vect, 2, function(t) {
fit_param <- as.numeric(unlist(table.rnase1.fit[t,"fit_param"]))
fine_fit(fit_param)
}))
rownames(table.rnase1.fit.fine) <- rownames(table.rnase1.fit)
colnames(table.rnase1.fit.fine) <- lapply(seq(0,25,0.1), as.character)
table.rnase2.fit.fine <- t(apply(vect, 2, function(t) {
fit_param <- as.numeric(unlist(table.rnase2.fit[t,"fit_param"]))
fine_fit(fit_param)
}))
rownames(table.rnase2.fit.fine) <- rownames(table.rnase2.fit)
colnames(table.rnase2.fit.fine) <- lapply(seq(0,25,0.1), as.character)
table.rnase3.fit.fine <- t(apply(vect, 2, function(t) {
fit_param <- as.numeric(unlist(table.rnase3.fit[t,"fit_param"]))
fine_fit(fit_param)
}))
rownames(table.rnase3.fit.fine) <- rownames(table.rnase3.fit)
colnames(table.rnase3.fit.fine) <- lapply(seq(0,25,0.1), as.character)
table.ctrl.fit.fine <- (table.ctrl1.fit.fine + table.ctrl2.fit.fine + table.ctrl3.fit.fine) / 3
table.rnase.fit.fine <- (table.rnase1.fit.fine + table.rnase2.fit.fine + table.rnase3.fit.fine) / 3
row_data3 <- as.numeric(table.ctrl1.fit.fine["PRKDC_HUMAN", ])
row_data4 <- as.numeric(table.rnase1.fit.fine["PRKDC_HUMAN", ])
# Plot
plot(row_data4,
type = "l",                # Linienplot
main = "Plot for AHNK_HUMAN",
xlab = "Fractions",
ylab = "Values",
col = "blue",
lwd = 2)
lines(row_data3,
type = "l",
col = "red",
lwd = 2)
table.ctrl.fit <- (table.ctrl1.fit[1:25] + table.ctrl2.fit[1:25] + table.ctrl3.fit[1:25]) / 3
table.rnase.fit <- (table.rnase1.fit[1:25] + table.rnase2.fit[1:25] + table.rnase3.fit[1:25]) / 3
df1 <- table.ctrl.fit[1:25] # Gruppe A
df2 <- table.rnase.fit[1:25] # Gruppe B
df_numeric1 <- as.data.frame(lapply(df1, function(x) as.numeric(as.character(x))))
df_numeric2 <- as.data.frame(lapply(df2, function(x) as.numeric(as.character(x))))
colnames(df_numeric1) <- colnames(table.ctrl.fit[1:25])
colnames(df_numeric2) <- colnames(table.rnase.fit[1:25])
rownames(df_numeric1) <- rownames(table.ctrl.fit[1:25])
rownames(df_numeric2) <- rownames(table.rnase.fit[1:25])
# T-Test pro Zeilenpaar
t_test_ergebnisse <- lapply(seq_len(nrow(df_numeric1)), function(i) {
x <- as.numeric(df_numeric1[i, ])
y <- as.numeric(df_numeric2[i, ])
# Nur t-Test, wenn beide Gruppen mindestens 2 gültige Werte haben
if (sum(!is.na(x)) >= 2 && sum(!is.na(y)) >= 2) {
t_res <- t.test(x, y, paired = TRUE)
data.frame(
zeile = rownames(df_numeric1)[i],
p_wert = t_res$p.value,
mittelwert_df1 = mean(x, na.rm = TRUE),
mittelwert_df2 = mean(y, na.rm = TRUE),
t_wert = t_res$statistic,
df = t_res$parameter
)
} else {
NULL
}
})
# Entferne NULLs (wo T-Test nicht möglich war)
t_test_ergebnisse <- Filter(Negate(is.null), t_test_ergebnisse)
# Ergebnisse zusammenführen
t_test_ergebnisse_df <- do.call(rbind, t_test_ergebnisse)
# Optional: Nach p-Wert sortieren
t_test_ergebnisse_df <- t_test_ergebnisse_df[order(t_test_ergebnisse_df$p_wert), ]
# Ausgabe
print(t_test_ergebnisse_df)
#At a peak, the fit value is calculated with 0.1 (not 1 for precision). The created function will be used at each maximum to evaluate the p-value. Amplitude of the fit curve at a given position is returned.
fine_fit_corr <- function(pos,vector,table_rep)	 {
#Get 25 values from the pos-th row in table_rep, representing data points to be fitted
df.y <- c(as.numeric(table_rep[pos,1:25]))
y <- c(1:25)
q <- vector
n <- length(vector)/3
gauss <- numeric(0)
value <- numeric(0)
#Defines the squared error between a 1-component gaussian with parameters q and the observed data df.y.
fun_f1 <- function(q) {
C1 <- q[1]
mean1 <- q[2]
sigma1 <- q[3]
res <- (C1 * exp(-(y-mean1)**2/(2 * sigma1**2))) - df.y
sum(res * res)
}
#Handels edge cases, if input vector is empty, a flat line of zeros is returned.
if (n==0) {df.z <- rep(0,251)}
else {
#Attempts to fit the Gaussiann to the data using optim and fun_f1.     If it fails, sets gauss to empty.
gauss <- tryCatch(round( (fit <- optim(vector, fun_f1, method="BFGS", control=list(reltol=1e-9)))$par,digits = 1 ),error=function(e) numeric(0))
#z is a fine resolution grid from 0 to 25 in 0.1 steps (251            values). The fitted gaussian is evaluated at each point of this        grid.
z <- round(seq(0, 25, 0.1),digits=1)
if (length(gauss) == 0) {df.z <- rep(0,251)} else { df.z <- (gauss[1] * exp(-(z-gauss[2])**2/(2 * gauss[3]**2))) }
}
#Normalizes the fitted curve, converts it to a total are of 100
df.z <- df.z*100/sum(df.z)
#Takes normalized value of fitted curve at original input mean         (q[2]). Index is calculated by converting mean to corresponding index   in z.
value <- df.z[q[2]/0.1+1]
value
}
# Create summary tables
ctrl_mean <- cbind(table.ctrl.fit.fine, ctrl_3[, 26:37])
rnase_mean <- cbind(table.rnase.fit.fine, rnase_3[, 26:37])
# Area under the curve: here, area under the respective maxima
fun_gauss_area <- function(x) {
C <- x[1]
Mean <- x[2]
Sigma <- x[3]
y <- round(seq(1,25,0.2), digits=1)
if (Sigma == 0) {res <- 0} else {
res <- C * exp(-(y-Mean)**2/(2 * Sigma**2))
}
res <- round(sum(res)*0.2, digits=1)
res
}
# add a column with areas under each maximum and sum of the areas
# column "fit_area"
# column "sum_area" - the sum of the areas is expected to be close to 100 (due to the previous normalization step)
ctrl_mean$fit_area <- apply(vect, 2, function(z) {
list_c <- as.numeric(unlist(ctrl_mean[z,"fit_c"]))
list_mean <- as.numeric(unlist(ctrl_mean[z,"fit_mean"]))
list_sigma <- as.numeric(unlist(ctrl_mean[z,"fit_sigma"]))
n <- as.numeric(unlist(ctrl_mean[z,"nb_max"]))
area <- numeric(0)
vector <- numeric(0)
area_list <- numeric(0)
if (n == 0) {area_list <- 0} else {
for (i in 1:n) {
vector <- c(list_c[i],list_mean[i],list_sigma[i])
area <- fun_gauss_area(vector)
area_list <- c(area_list, area)
}
}
area_list
}
)
ctrl_mean$sum_area <- apply(vect, 2, function(z) {
list_area <- as.numeric(unlist(ctrl_mean[z,"fit_area"]))
sum_area <- sum(list_area)
sum_area
})
rnase_mean$fit_area <- apply(vect, 2, function(z) {
list_c <- as.numeric(unlist(rnase_mean[z,"fit_c"]))
list_mean <- as.numeric(unlist(rnase_mean[z,"fit_mean"]))
list_sigma <- as.numeric(unlist(rnase_mean[z,"fit_sigma"]))
n <- as.numeric(unlist(rnase_mean[z,"nb_max"]))
area <- numeric(0)
vector <- numeric(0)
area_list <- numeric(0)
if (n == 0) {area_list <- 0} else {
for (i in 1:n) {
vector <- c(list_c[i],list_mean[i],list_sigma[i])
area <- fun_gauss_area(vector)
area_list <- c(area_list, area)
}
}
area_list
}
)
rnase_mean$sum_area <- apply(vect, 2, function(z) {
list_area <- as.numeric(unlist(rnase_mean[z,"fit_area"]))
sum_area <- sum(list_area)
sum_area
})
# Label peaks which have either a residual value > 260 (no good fitting) or negative area (area under the curve < 0 after fitting)
# add column "pb_fit"
ctrl_mean$pb_fit <- apply(vect, 2, function(x) {
res <- as.numeric(unlist(ctrl_mean[x,"fit_res"]))
sigma <- as.numeric(unlist(ctrl_mean[x,"fit_sigma"]))
list_area <- unlist(ctrl_mean[x, "fit_area"])
neg <- any(list_area < 0)
nl <- any(sigma == 0) && (res != 0)
if (res > 260 || neg == "TRUE" || nl == "TRUE") {TRUE} else FALSE
})
rnase_mean$pb_fit <- apply(vect, 2, function(x) {
res <- as.numeric(unlist(rnase_mean[x,"fit_res"]))
sigma <- as.numeric(unlist(rnase_mean[x,"fit_sigma"]))
list_area <- unlist(rnase_mean[x, "fit_area"])
neg <- any(list_area < 0)
nl <- any(sigma == 0) && (res != 0)
if (res > 260 || neg == "TRUE" || nl == "TRUE") {TRUE} else FALSE
})
# Create a subtable with the problematic peaks from the control table
ctrl_mean_corr <- ctrl_mean[ctrl_mean$pb_fit == "TRUE",]
ctrl_mean_corr <- ctrl_mean_corr[, c(1:251,254)]
rnase_mean_corr <- rnase_mean[rnase_mean$pb_fit == "TRUE",]
rnase_mean_corr <- rnase_mean_corr[, c(1:251,254)]
# Reihennamen beider Tabellen
rows_rnase1 <- rownames(rnase_mean)
rows_rnase2 <- rownames(rnase_mean_corr)
rows_ctrl1 <- rownames(ctrl_mean)
rows_ctrl2 <- rownames(ctrl_mean_corr)
# Reihen, die NICHT in table2 vorkommen (nur die willst du behalten)
rows_to_keep_rnase_rnase <- setdiff(rows_rnase1, rows_rnase2)
rows_to_keep_rnase_ctrl <- setdiff(rows_rnase1, rows_ctrl2)
rows_to_keep_ctrl_rnase <- setdiff(rows_ctrl1, rows_rnase2)
rows_to_keep_ctrl_ctrl <- setdiff(rows_ctrl1, rows_ctrl2)
# table1 ohne die gemeinsamen Reihen
rnase_mean_filtert <- rnase_mean[rows_to_keep_rnase_rnase,]
rnase_mean_filtert_final <- rnase_mean_filtert[rows_to_keep_rnase_ctrl,]
ctrl_mean_filtert <- ctrl_mean[rows_to_keep_ctrl_rnase,]
ctrl_mean_filtert_final <- ctrl_mean_filtert[rows_to_keep_ctrl_ctrl,]
# eigentlich mit ctrl_mean_filtert_final
df_ctrl <- ctrl_mean_filtert_final[1:251] # Gruppe A
df_rnase <- rnase_mean_filtert_final[1:251] # Gruppe B
df_numeric_ctrl <- as.data.frame(lapply(df_ctrl, function(x) as.numeric(as.character(x))))
df_numeric_rnase <- as.data.frame(lapply(df_rnase, function(x) as.numeric(as.character(x))))
colnames(df_numeric_ctrl) <- colnames(ctrl_mean_filtert_final[1:251])
colnames(df_numeric_rnase) <- colnames(rnase_mean_filtert_final[1:251])
rownames(df_numeric_ctrl) <- rownames(ctrl_mean_filtert_final[1:251])
rownames(df_numeric_rnase) <- rownames(rnase_mean_filtert_final[1:251])
# Student paird t-test
t_test_final <- lapply(seq_len(nrow(df_numeric_ctrl)), function(i) {
x <- as.numeric(df_numeric_ctrl[i, ])
y <- as.numeric(df_numeric_rnase[i, ])
# Nur t-Test, wenn beide Gruppen mindestens 2 gültige Werte haben
if (sum(!is.na(x)) >= 2 && sum(!is.na(y)) >= 2) {
t_res <- t.test(x, y, paired = TRUE)
data.frame(
zeile = rownames(df_numeric_ctrl)[i],
p_wert = t_res$p.value,
mittelwert = mean(x, na.rm = TRUE),
mittelwert = mean(y, na.rm = TRUE),
t_wert = t_res$statistic,
df = t_res$parameter
)
} else {
NULL
}
})
# Entferne NULLs (wo T-Test nicht möglich war)
t_test_final <- Filter(Negate(is.null), t_test_final)
# Ergebnisse zusammenführen
t_test_final_df <- do.call(rbind, t_test_final)
# Optional: Nach p-Wert sortieren
t_test_final_df <- t_test_final_df[order(t_test_final_df$p_wert), ]
# Ausgabe
print(t_test_final_df)
list_significant_shift <- t_test_final_df[t_test_final_df$p_wert < 0.3, ]
# Beispiel: p-Wert zwischen 0.05 und 0.5
list_possible_shift <- t_test_final_df[t_test_final_df$p_wert > 0.3 & t_test_final_df$p_wert < 0.7, ]
list_no_shift <- t_test_final_df[ t_test_final_df$p_wert > 0.7 , ]
# Nur Namen der Proteine
significant_shift_proteins <- list_significant_shift$zeile
possible_shift_proteins <- list_possible_shift$zeile
no_shift_proteins <- list_no_shift$zeile
# Nur numerische Spalten behalten
pca_ctrl_numeric <- ctrl_mean_filtert_final[1:251, sapply(ctrl_mean_filtert_final, is.numeric)]
pca_rnase_numeric <- rnase_mean_filtert_final[1:251, sapply(rnase_mean_filtert_final, is.numeric)]
# Zeilen mit NAs entfernen
pca_ctrl_clean <- pca_ctrl_numeric[complete.cases(pca_ctrl_numeric), ]
pca_rnase_clean <- pca_rnase_numeric[complete.cases(pca_rnase_numeric), ]
pca_result_ctrl <- prcomp(pca_ctrl_clean, center = TRUE, scale. = TRUE, )
pca_result_rnase <- prcomp(pca_rnase_clean, center = TRUE, scale. = TRUE)
# Einfaches 2D PCA-Plot
plot(pca_result_ctrl$x[,1:2], col = "blue", pch = 16,
xlab = "PC1", ylab = "PC2", main = "PCA: PC1 vs PC2 CTRL")
plot(pca_result_rnase$x[,1:2], col = "blue", pch = 16,
xlab = "PC1", ylab = "PC2", main = "PCA: PC1 vs PC2 RNASE")
#chech which PCs have the most variance
#summary(pca_result_ctrl)
#summary(pca_result_rnase)
#plot PC1 with PC3
plot(pca_result_ctrl$x[,c(1, 3)], col = "blue", pch = 16,
xlab = "PC1", ylab = "PC3", main = "PCA: PC1 vs PC3 CTRL")
plot(pca_result_rnase$x[,c(1, 3)], col = "blue", pch = 16,
xlab = "PC1", ylab = "PC3", main = "PCA: PC1 vs PC3 RNASE")
#plot PC2 with PC3
plot(pca_result_ctrl$x[,2:3], col = "blue", pch = 16,
xlab = "PC2", ylab = "PC3", main = "PCA: PC2 vs PC3 CTRL")
plot(pca_result_rnase$x[,2:3], col = "blue", pch = 16,
xlab = "PC2", ylab = "PC3", main = "PCA: PC2 vs PC3 RNASE")
# Namen der Zeilen in PCA müssen mit Protein-Namen übereinstimmen
# Setze z. B. signifikante auf "red"
highlight_proteine_significant <- list_significant_shift
highlight_proteine_possible <- possible_shift_proteins
highlight_proteine_no <- no_shift_proteins
farben <- rep("grey", nrow(pca_result_ctrl$x))
farben[rownames(pca_result_ctrl$x[, 1:2]) %in% highlight_proteine_significant] <- "red"
farben[rownames(pca_result_ctrl$x[, 1:2]) %in% highlight_proteine_possible] <- "blue"
farben[rownames(pca_result_ctrl$x[, 1:2]) %in% highlight_proteine_no] <- "green"
plot(pca_result_ctrl$x[, 1:2], col = farben, pch = 16,
xlab = "PC1", ylab = "PC2", main = "PCA: PC1 vs PC3 CTRL")
legend("topright", legend = c("Significant Shift","Possible Shift","No Shift"), col = c("red", "blue", "green"), pch = 16)
plot(pca_result_ctrl$x[,c(1, 3)], col = farben, pch = 16,
xlab = "PC1", ylab = "PC3", main = "PCA: PC1 vs PC3 CTRL")
legend("topright", legend = c("Significant Shift","Possible Shift","No Shift"), col = c("red", "blue", "green"), pch = 16)
plot(pca_result_ctrl$x[,2:3], col = farben, pch = 16,
xlab = "PC2", ylab = "PC3", main = "PCA: PC2 vs PC3 CTRL")
legend("topright", legend = c("Significant Shift","Possible Shift","No Shift"), col = c("red", "blue", "green"), pch = 16)
plot(pca_result_rnase$x[,1:2], col = farben, pch = 16,
xlab = "PC2", ylab = "PC3", main = "PCA: PC2 vs PC3 RNASE")
legend("topright", legend = c("Significant Shift","Possible Shift","No Shift"), col = c("red", "blue", "green"), pch = 16)
plot(pca_result_rnase$x[,c(1, 3)], col = farben, pch = 16,
xlab = "PC1", ylab = "PC3", main = "PCA: PC1 vs PC3 RNASE")
legend("topright", legend = c("Significant Shift","Possible Shift","No Shift"), col = c("red", "blue", "green"), pch = 16)
plot(pca_result_rnase$x[,2:3], col = farben, pch = 16,
xlab = "PC2", ylab = "PC3", main = "PCA: PC2 vs PC3 CTRL")
legend("topright", legend = c("Significant Shift","Possible Shift","No Shift"), col = c("red", "blue", "green"), pch = 16)
# Reihennamen beider Tabellen
rows_ctrl_pca <- rownames(ctrl_mean_filtert_final)
rows_rnase_pca <- rownames(rnase_mean_filtert_final)
no_shift_proteins <- list_no_shift$zeile
# Reihen, die NICHT in table2 vorkommen (nur die willst du behalten)
rows_to_keep_ctrl_no_shift <- setdiff(rows_ctrl_pca, no_shift_proteins)
rows_to_keep_rnase_no_shift <- setdiff(rows_rnase_pca, no_shift_proteins)
# table1 ohne die gemeinsamen Reihen
ctrl_mean_filtert_final_pca <- ctrl_mean_filtert_final[rows_to_keep_ctrl_no_shift,]
rnase_mean_filtert_final_pca <- rnase_mean_filtert_final[rows_to_keep_rnase_no_shift,]
# Nur numerische Spalten behalten
pca_ctrl_numeric_sig <- ctrl_mean_filtert_final_pca[1:251, sapply(ctrl_mean_filtert_final_pca, is.numeric)]
pca_rnase_numeric_sig <- rnase_mean_filtert_final_pca[1:251, sapply(rnase_mean_filtert_final_pca, is.numeric)]
# Zeilen mit NAs entfernen
pca_ctrl_clean_sig <- pca_ctrl_numeric_sig[complete.cases(pca_ctrl_numeric_sig), ]
pca_rnase_clean_sig <- pca_rnase_numeric_sig[complete.cases(pca_rnase_numeric_sig), ]
pca_result_ctrl_sig <- prcomp(pca_ctrl_clean_sig, center = TRUE, scale. = TRUE, )
pca_result_rnase_sig <- prcomp(pca_rnase_clean_sig, center = TRUE, scale. = TRUE)
farben <- rep("grey", nrow(pca_result_ctrl_sig$x))
farben[rownames(pca_result_ctrl_sig$x[, 1:2]) %in% highlight_proteine_significant] <- "red"
farben[rownames(pca_result_ctrl_sig$x[, 1:2]) %in% highlight_proteine_possible] <- "blue"
farben[rownames(pca_result_ctrl_sig$x[, 1:2]) %in% highlight_proteine_no] <- "green"
plot(pca_result_ctrl_sig$x[, 1:2], col = farben, pch = 16,
xlab = "PC1", ylab = "PC2", main = "PCA: PC1 vs PC3 CTRL")
legend("topright", legend = c("Significant Shift","Possible Shift","No Shift"), col = c("red", "blue", "green"), pch = 16)
plot(pca_result_ctrl_sig$x[,c(1, 3)], col = farben, pch = 16,
xlab = "PC1", ylab = "PC3", main = "PCA: PC1 vs PC3 CTRL")
legend("topright", legend = c("Significant Shift","Possible Shift","No Shift"), col = c("red", "blue", "green"), pch = 16)
plot(pca_result_ctrl_sig$x[,2:3], col = farben, pch = 16,
xlab = "PC2", ylab = "PC3", main = "PCA: PC2 vs PC3 CTRL")
legend("topright", legend = c("Significant Shift","Possible Shift","No Shift"), col = c("red", "blue", "green"), pch = 16)
plot(pca_result_rnase_sig$x[,1:2], col = farben, pch = 16,
xlab = "PC2", ylab = "PC3", main = "PCA: PC2 vs PC3 RNASE")
legend("topright", legend = c("Significant Shift","Possible Shift","No Shift"), col = c("red", "blue", "green"), pch = 16)
plot(pca_result_rnase_sig$x[,c(1, 3)], col = farben, pch = 16,
xlab = "PC1", ylab = "PC3", main = "PCA: PC1 vs PC3 RNASE")
legend("topright", legend = c("Significant Shift","Possible Shift","No Shift"), col = c("red", "blue", "green"), pch = 16)
plot(pca_result_rnase_sig$x[,2:3], col = farben, pch = 16,
xlab = "PC2", ylab = "PC3", main = "PCA: PC2 vs PC3 CTRL")
legend("topright", legend = c("Significant Shift","Possible Shift","No Shift"), col = c("red", "blue", "green"), pch = 16)
plot(pca_result_ctrl, type = "l", main = "Elbow-Plot CTRL")
plot(pca_result_rnase, type = "l", main = "Elbow-Plot RNASE")
pca_ctrl_pc1_pc2 <- as.data.frame(pca_result_ctrl$x[, 1:2])
pca_ctrl_pc1_pc3 <- as.data.frame(pca_result_ctrl$x[, c(1,3)])
pca_ctrl_pc2_pc3 <- as.data.frame(pca_result_ctrl$x[, 2:3])
pca_rnase_pc1_pc2 <- as.data.frame(pca_result_rnase$x[, 1:2])
pca_rnase_pc1_pc3 <- as.data.frame(pca_result_rnase$x[, c(1,3)])
pca_rnase_pc2_pc3 <- as.data.frame(pca_result_rnase$x[, 2:3])
library(factoextra)
fviz_nbclust(pca_ctrl_pc1_pc2, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_ctrl_pc1_pc3, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_ctrl_pc2_pc3, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC2/PC3") +
theme_minimal()
fviz_nbclust(pca_rnase_pc1_pc2, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_rnase_pc1_pc3, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC1/PC3") +
theme_minimal()
fviz_nbclust(pca_rnase_pc2_pc3, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC2/PC3") +
theme_minimal()
km_result_ctrl<- kmeans(pca_ctrl_pc1_pc2, centers = 3)
km_result_rnase<- kmeans(pca_rnase_pc1_pc2, centers = 5)
library(factoextra)
# pca_df enthält deine Daten, z. B. PC1 und PC2
fviz_cluster(km_result_ctrl, data = pca_ctrl_pc1_pc2,
geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),
main = "k-Means Cluster der CTRL")
fviz_cluster(km_result_ctrl, data = pca_ctrl_pc1_pc3,
geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),
main = "k-Means Cluster der CTRL")
fviz_cluster(km_result_ctrl, data = pca_ctrl_pc2_pc3,
geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),
main = "k-Means Cluster der CTRL")
fviz_cluster(km_result_rnase, data = pca_rnase_pc1_pc2,
geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),
main = "k-Means Cluster der RNASE")
fviz_cluster(km_result_rnase, data = pca_rnase_pc1_pc3,
geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),
main = "k-Means Cluster der RNASE")
fviz_cluster(km_result_rnase, data = pca_rnase_pc2_pc3,
geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),
main = "k-Means Cluster der RNASE")
