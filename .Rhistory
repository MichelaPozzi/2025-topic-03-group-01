#Reads table, by indicating path to directory where the dataset is stored, and stores it to variable NS_Table (NS for Non-synchronizied)
NS_Table <- read.table("Daten/Daten.csv", header=TRUE, row.names=1, sep = ";")
#Row names are protein names
head(rownames(NS_Table),12)
#Columns indicate the respective fractions from 1 to 25, and their replicated
head(colnames(NS_Table),12)
#Checks, if dataset is stored on local directory
file.exists("C:/Users/julia/Documents/2025-topic-03-group-01/Daten/Daten.csv")
#Reads table, by indicating path to directory where the dataset is stored, and stores it to variable NS_Table (NS for Non-synchronizied)
NS_Table <- read.table("Daten/Daten.csv", header=TRUE, row.names=1, sep = ";")
#Row names are protein names
head(rownames(NS_Table),12)
#Columns indicate the respective fractions from 1 to 25, and their replicated
head(colnames(NS_Table),12)
#Give teammates ability to view data set
read.csv("Daten/Daten.csv")
NS_Table <- read.csv("Daten/Daten.csv", header=TRUE, row.names=1, sep = ";")
View(NS_Table)
# Use factors to define the treatment in the samples as control (CTRL) or rnase (RNASE) - there are as many treatments as columns in the table. Here, we have 150 treatments
#factor() encodes a vector as a factor. Can be used to order different levels, here we have the two levels CTRL and RNASE
#rep() replicates the values in x
treatment <- factor(rep(c("CTRL", "RNASE"),75))
treatment
# Use factors to define the condition in the samples. Here we have all six replicates for 1 fraction after each other and then the next fractions.
condition <- factor(rep(c("Fraction1_Ctrl_Rep1","Fraction1_RNase_Rep1","Fraction1_Ctrl_Rep2","Fraction1_RNase_Rep2","Fraction1_Ctrl_Rep3","Fraction1_RNase_Rep3"),25))
condition
# Use factors to define the fractions from fraction1 to fraction25 through the 150 columns. Here, we have first all six fraction1, then all six fraction2 etc ... until all six fraction25
fraction <- as.vector(matrix(rep(paste("fraction",1:25,sep=""),6), nrow = 6, ncol=25, byrow = TRUE))
fraction
# Store the number of rows in a variable
n_row <- nrow(NS_Table)
n_row
# Store the row names (here the name sof the proteins) in a variable
row_names <- rownames(NS_Table)
row_names
# Make dataframe with the information (treatment, condition, fraction) for each column - here 150 columns
data <- data.frame(row.names = colnames(table), treatment = treatment, condition = condition, fraction = fraction)
# Define subtables for each fraction (with three CTRL and three RNASE replicates)
table.frxn1 <- NS_Table[,data$fraction =="fraction1"]
table.frxn2 <- NS_Table[,data$fraction =="fraction2"]
table.frxn3 <- NS_Table[,data$fraction =="fraction3"]
table.frxn4 <- NS_Table[,data$fraction =="fraction4"]
table.frxn5 <- NS_Table[,data$fraction =="fraction5"]
table.frxn6 <- NS_Table[,data$fraction =="fraction6"]
table.frxn7 <- NS_Table[,data$fraction =="fraction7"]
table.frxn8 <- NS_Table[,data$fraction =="fraction8"]
table.frxn9 <- NS_Table[,data$fraction =="fraction9"]
table.frxn10 <- NS_Table[,data$fraction =="fraction10"]
table.frxn11 <- NS_Table[,data$fraction =="fraction11"]
table.frxn12 <- NS_Table[,data$fraction =="fraction12"]
table.frxn13 <- NS_Table[,data$fraction =="fraction13"]
table.frxn14 <- NS_Table[,data$fraction =="fraction14"]
table.frxn15 <- NS_Table[,data$fraction =="fraction15"]
table.frxn16 <- NS_Table[,data$fraction =="fraction16"]
table.frxn17 <- NS_Table[,data$fraction =="fraction17"]
table.frxn18 <- NS_Table[,data$fraction =="fraction18"]
table.frxn19 <- NS_Table[,data$fraction =="fraction19"]
table.frxn20 <- NS_Table[,data$fraction =="fraction20"]
table.frxn21 <- NS_Table[,data$fraction =="fraction21"]
table.frxn22 <- NS_Table[,data$fraction =="fraction22"]
table.frxn23 <- NS_Table[,data$fraction =="fraction23"]
table.frxn24 <- NS_Table[,data$fraction =="fraction24"]
table.frxn25 <- NS_Table[,data$fraction =="fraction25"]
# Re-define the information for the fraction subtables (dataframe named "data3") and create one table per treatment and per fraction. Here there are 50 subtables in total
data3 <- data.frame(row.names=colnames(table.frxn1), treatment = rep(c("CTRL", "RNASE"),3), condition = c("ctrl1","rnase1","ctrl2","rnase2","ctrl3","rnase3"))
table.frxn1.CTRL <- table.frxn1[,data3$treatment == "CTRL"]
table.frxn1.RNASE <- table.frxn1[,data3$treatment == "RNASE"]
table.frxn2.CTRL <- table.frxn2[,data3$treatment == "CTRL"]
table.frxn2.RNASE <- table.frxn2[,data3$treatment == "RNASE"]
table.frxn3.CTRL <- table.frxn3[,data3$treatment == "CTRL"]
table.frxn3.RNASE <- table.frxn3[,data3$treatment == "RNASE"]
table.frxn4.CTRL <- table.frxn4[,data3$treatment == "CTRL"]
table.frxn4.RNASE <- table.frxn4[,data3$treatment == "RNASE"]
table.frxn5.CTRL <- table.frxn5[,data3$treatment == "CTRL"]
table.frxn5.RNASE <- table.frxn5[,data3$treatment == "RNASE"]
table.frxn6.CTRL <- table.frxn6[,data3$treatment == "CTRL"]
table.frxn6.RNASE <- table.frxn6[,data3$treatment == "RNASE"]
table.frxn7.CTRL <- table.frxn7[,data3$treatment == "CTRL"]
table.frxn7.RNASE <- table.frxn7[,data3$treatment == "RNASE"]
table.frxn8.CTRL <- table.frxn8[,data3$treatment == "CTRL"]
table.frxn8.RNASE <- table.frxn8[,data3$treatment == "RNASE"]
table.frxn9.CTRL <- table.frxn9[,data3$treatment == "CTRL"]
table.frxn9.RNASE <- table.frxn9[,data3$treatment == "RNASE"]
table.frxn10.CTRL <- table.frxn10[,data3$treatment == "CTRL"]
table.frxn10.RNASE <- table.frxn10[,data3$treatment == "RNASE"]
table.frxn11.CTRL <- table.frxn11[,data3$treatment == "CTRL"]
table.frxn11.RNASE <- table.frxn11[,data3$treatment == "RNASE"]
table.frxn12.CTRL <- table.frxn12[,data3$treatment == "CTRL"]
table.frxn12.RNASE <- table.frxn12[,data3$treatment == "RNASE"]
table.frxn13.CTRL <- table.frxn13[,data3$treatment == "CTRL"]
table.frxn13.RNASE <- table.frxn13[,data3$treatment == "RNASE"]
table.frxn14.CTRL <- table.frxn14[,data3$treatment == "CTRL"]
table.frxn14.RNASE <- table.frxn14[,data3$treatment == "RNASE"]
table.frxn15.CTRL <- table.frxn15[,data3$treatment == "CTRL"]
table.frxn15.RNASE <- table.frxn15[,data3$treatment == "RNASE"]
table.frxn16.CTRL <- table.frxn16[,data3$treatment == "CTRL"]
table.frxn16.RNASE <- table.frxn16[,data3$treatment == "RNASE"]
table.frxn17.CTRL <- table.frxn17[,data3$treatment == "CTRL"]
table.frxn17.RNASE <- table.frxn17[,data3$treatment == "RNASE"]
table.frxn18.CTRL <- table.frxn18[,data3$treatment == "CTRL"]
table.frxn18.RNASE <- table.frxn18[,data3$treatment == "RNASE"]
table.frxn19.CTRL <- table.frxn19[,data3$treatment == "CTRL"]
table.frxn19.RNASE <- table.frxn19[,data3$treatment == "RNASE"]
table.frxn20.CTRL <- table.frxn20[,data3$treatment == "CTRL"]
table.frxn20.RNASE <- table.frxn20[,data3$treatment == "RNASE"]
table.frxn21.CTRL <- table.frxn21[,data3$treatment == "CTRL"]
table.frxn21.RNASE <- table.frxn21[,data3$treatment == "RNASE"]
table.frxn22.CTRL <- table.frxn22[,data3$treatment == "CTRL"]
table.frxn22.RNASE <- table.frxn22[,data3$treatment == "RNASE"]
table.frxn23.CTRL <- table.frxn23[,data3$treatment == "CTRL"]
table.frxn23.RNASE <- table.frxn23[,data3$treatment == "RNASE"]
table.frxn24.CTRL <- table.frxn24[,data3$treatment == "CTRL"]
table.frxn24.RNASE <- table.frxn24[,data3$treatment == "RNASE"]
table.frxn25.CTRL <- table.frxn25[,data3$treatment == "CTRL"]
table.frxn25.RNASE <- table.frxn25[,data3$treatment == "RNASE"]
# Determine average values for each treatment, each fraction and each replicate. Here, the values for the three replicates are stored in the same table
avg.table.frxn1.CTRL <- sapply(table.frxn1.CTRL, function(x) mean(x))
avg.table.frxn2.CTRL <- sapply(table.frxn2.CTRL, function(x) mean(x))
avg.table.frxn3.CTRL <- sapply(table.frxn3.CTRL, function(x) mean(x))
avg.table.frxn4.CTRL <- sapply(table.frxn4.CTRL, function(x) mean(x))
avg.table.frxn5.CTRL <- sapply(table.frxn5.CTRL, function(x) mean(x))
avg.table.frxn6.CTRL <- sapply(table.frxn6.CTRL, function(x) mean(x))
avg.table.frxn7.CTRL <- sapply(table.frxn7.CTRL, function(x) mean(x))
avg.table.frxn8.CTRL <- sapply(table.frxn8.CTRL, function(x) mean(x))
avg.table.frxn9.CTRL <- sapply(table.frxn9.CTRL, function(x) mean(x))
avg.table.frxn10.CTRL <- sapply(table.frxn10.CTRL, function(x) mean(x))
avg.table.frxn11.CTRL <- sapply(table.frxn11.CTRL, function(x) mean(x))
avg.table.frxn12.CTRL <- sapply(table.frxn12.CTRL, function(x) mean(x))
avg.table.frxn13.CTRL <- sapply(table.frxn13.CTRL, function(x) mean(x))
avg.table.frxn14.CTRL <- sapply(table.frxn14.CTRL, function(x) mean(x))
avg.table.frxn15.CTRL <- sapply(table.frxn15.CTRL, function(x) mean(x))
avg.table.frxn16.CTRL <- sapply(table.frxn16.CTRL, function(x) mean(x))
avg.table.frxn17.CTRL <- sapply(table.frxn17.CTRL, function(x) mean(x))
avg.table.frxn18.CTRL <- sapply(table.frxn18.CTRL, function(x) mean(x))
avg.table.frxn19.CTRL <- sapply(table.frxn19.CTRL, function(x) mean(x))
avg.table.frxn20.CTRL <- sapply(table.frxn20.CTRL, function(x) mean(x))
avg.table.frxn21.CTRL <- sapply(table.frxn21.CTRL, function(x) mean(x))
avg.table.frxn22.CTRL <- sapply(table.frxn22.CTRL, function(x) mean(x))
avg.table.frxn23.CTRL <- sapply(table.frxn23.CTRL, function(x) mean(x))
avg.table.frxn24.CTRL <- sapply(table.frxn24.CTRL, function(x) mean(x))
avg.table.frxn25.CTRL <- sapply(table.frxn25.CTRL, function(x) mean(x))
avg.table.frxn1.RNASE <- sapply(table.frxn1.RNASE, function(x) mean(x))
avg.table.frxn2.RNASE <- sapply(table.frxn2.RNASE, function(x) mean(x))
avg.table.frxn3.RNASE <- sapply(table.frxn3.RNASE, function(x) mean(x))
avg.table.frxn4.RNASE <- sapply(table.frxn4.RNASE, function(x) mean(x))
avg.table.frxn5.RNASE <- sapply(table.frxn5.RNASE, function(x) mean(x))
avg.table.frxn6.RNASE <- sapply(table.frxn6.RNASE, function(x) mean(x))
avg.table.frxn7.RNASE <- sapply(table.frxn7.RNASE, function(x) mean(x))
avg.table.frxn8.RNASE <- sapply(table.frxn8.RNASE, function(x) mean(x))
avg.table.frxn9.RNASE <- sapply(table.frxn9.RNASE, function(x) mean(x))
avg.table.frxn10.RNASE <- sapply(table.frxn10.RNASE, function(x) mean(x))
avg.table.frxn11.RNASE <- sapply(table.frxn11.RNASE, function(x) mean(x))
avg.table.frxn12.RNASE <- sapply(table.frxn12.RNASE, function(x) mean(x))
avg.table.frxn13.RNASE <- sapply(table.frxn13.RNASE, function(x) mean(x))
avg.table.frxn14.RNASE <- sapply(table.frxn14.RNASE, function(x) mean(x))
avg.table.frxn15.RNASE <- sapply(table.frxn15.RNASE, function(x) mean(x))
avg.table.frxn16.RNASE <- sapply(table.frxn16.RNASE, function(x) mean(x))
avg.table.frxn17.RNASE <- sapply(table.frxn17.RNASE, function(x) mean(x))
avg.table.frxn18.RNASE <- sapply(table.frxn18.RNASE, function(x) mean(x))
avg.table.frxn19.RNASE <- sapply(table.frxn19.RNASE, function(x) mean(x))
avg.table.frxn20.RNASE <- sapply(table.frxn20.RNASE, function(x) mean(x))
avg.table.frxn21.RNASE <- sapply(table.frxn21.RNASE, function(x) mean(x))
avg.table.frxn22.RNASE <- sapply(table.frxn22.RNASE, function(x) mean(x))
avg.table.frxn23.RNASE <- sapply(table.frxn23.RNASE, function(x) mean(x))
avg.table.frxn24.RNASE <- sapply(table.frxn24.RNASE, function(x) mean(x))
avg.table.frxn25.RNASE <- sapply(table.frxn25.RNASE, function(x) mean(x))
# Determine normalization factor for each condition, as the mean of the 2 most similar replicates
# Create a function norm_fact for this step:
norm_fact <- function(x) {
if( (abs(x[1]-x[2])<abs(x[1]-x[3])) && (abs(x[1]-x[2])<abs(x[2]-x[3])) )
{mean(c(x[1],x[2]))} else if( (abs(x[1]-x[3])<abs(x[1]-x[2])) && (abs(x[1]-x[3])<abs(x[2]-x[3])) )
{mean(c(x[1],x[3]))} else {mean(c(x[2],x[3]))}
}
# Determine the normalization factor for the CTRL fractions and for the RNASE fractions
norm_mean_frxn1_CTRL <-  norm_fact(avg.table.frxn1.CTRL)/avg.table.frxn1.CTRL
#Checks, if dataset is stored on local directory
file.exists("C:/Users/julia/Documents/2025-topic-03-group-01/Daten/Daten.csv")
#Checks, if dataset is stored on local directory
file.exists("C:/Users/julia/Documents/2025-topic-03-group-01/Daten/Daten.csv")
load("~/GitHub/2025-topic-03-group-01/NS_Table_neu.RData")
View(NS_Table_neu)
#Reads table, by indicating path to directory where the dataset is stored, and stores it to variable NS_Table (NS for Non-synchronizied)
NS_Table <- read.table("Daten/RDeeP_HeLa_NS - Luisa Test.csv", header=TRUE, row.names=1, sep = ";")
View(NS_Table)
#Reads table, by indicating path to directory where the dataset is stored, and stores it to variable NS_Table (NS for Non-synchronizied)
NS_Table <- read.table("Daten/Daten_Kommata_behoben.csv", header=TRUE, row.names=1, sep = ";")
