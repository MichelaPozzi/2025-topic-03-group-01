# Get the matching protein names
matched_pos_names = rownames(df_pos)
matched_neg_names = rownames(df_neg)
# Get the values for the isoelectric points
df_pos_pI = rbp_pos$pI[match(matched_pos_names, rbp_pos$Entry_Name)]
df_neg_pI = rbp_neg$pI[match(matched_neg_names, rbp_pos$Entry_Name)]
# Combine to new dataframes, with Protein Names and their isoelectric point
df_pos_combined_selected = data.frame(protein = matched_pos_names, isoelectric_point = df_pos_pI)
df_neg_combined_selected = data.frame(protein = matched_neg_names, isoelectric_point = df_neg_pI)
# Merge those two dataframes together
final_df_combined_selected = rbind(df_pos_combined_selected, df_neg_combined_selected)
# How many proteins were not listed in either rbp_pos or rbp_neg, but are still in ctrl_selected - 39
# dim(ctrl_selected)[1] - dim(final_df_combined_selected)[1]
# Perform the first t-test
t.test(final_df_combined_selected$isoelectric_point, mu = 7.0, alternative = "greater")
# Create a new dataframe, that only contains all initial proteins, that were also listed in the external data rbp_pos & rbp_neg, as well as their respective isoelectric points for these proteins.
# Protein names of all initial proteins
protein_names = rownames(ctrl_norm_mean)
# Extract the protein names from rbp_pos and rbp_neg
rbp_pos_proteins = rbp_pos$Entry_Name
rbp_neg_proteins = rbp_neg$Entry_Name
# Get indices of the matching proteins
indices_pos = which(protein_names %in% rbp_pos_proteins)
indices_neg = which(protein_names %in% rbp_neg_proteins)
# Get the subsets for the included proteins
df_pos = ctrl_norm_mean[indices_pos, ]
df_neg = ctrl_norm_mean[indices_neg, ]
# Get the matching protein names
matched_pos_names = rownames(df_pos)
matched_neg_names = rownames(df_neg)
# Get the values for the isoelectric points
df_pos_pI = rbp_pos$pI[match(matched_pos_names, rbp_pos$Entry_Name)]
df_neg_pI = rbp_neg$pI[match(matched_neg_names, rbp_pos$Entry_Name)]
# Combine to new dataframes, with Protein Names and their isoelectric point
df_pos_combined_all_proteins = data.frame(protein = matched_pos_names, isoelectric_point = df_pos_pI)
df_neg_combined_all_proteins = data.frame(protein = matched_neg_names, isoelectric_point = df_neg_pI)
# Merge those two dataframes together
final_df_combined_all_proteins = rbind(df_pos_combined_all_proteins, df_neg_combined_all_proteins)
# How many proteins were not listed in either rbp_pos or rbp_neg, but still used in our data set - 274
# dim(ctrl_norm_mean)[1] - dim(final_df_combined_all_proteins)[1]
# Perform the second t-test
t.test(final_df_combined_all_proteins$isoelectric_point, mu = 7.0, alternative = "two.sided")
par(mfrow = c(1, 2))
hist(
final_df_combined_selected$isoelectric_point,
main = "Isoelectric points of the selected proteins",
xlab = "Isoelectric point",
ylab = "Frequency",
breaks = 30,
col = "salmon",
border = "white",
xlim = c(0, 14)
)
# ablines
abline(v = 7, col = "firebrick", lwd = 4, lty = 2)
abline(v = mean(final_df_combined_selected$isoelectric_point, na.rm = TRUE),
col = "black", lwd = 4)
hist(
final_df_combined_all_proteins$isoelectric_point,
main = "Isoelectric points for all proteins",
xlab = "Isoelectric point",
ylab = "Frequency",
breaks = 30,
col = "grey70",
border = "white",
xlim = c(0, 14)
)
# ablines
abline(v = 7, col = "firebrick", lwd = 4, lty = 2)
abline(v = mean(final_df_combined_all_proteins$isoelectric_point, na.rm = TRUE),
col = "black", lwd = 4)
par(mfrow = c(1, 1))
par(mfrow = c(1, 2))
plot(
ctrl_COM_shift$COM, rnase_COM_shift$COM,
xlab = "COM from ctrl_selected",
ylab = "COM from rnase_selected",
main = "COM: selected proteins",
pch = 19,
col = "salmon"
)
points(
ctrl_under_threshold$COM, rnase_under_threshold$COM,
pch = 19,
col = "firebrick"
)
abline(a = 0, b = 1, col = "black", lwd = 3, lty = 3)
plot(
ctrl_no_main_shift$COM, rnase_no_main_shift$COM,
xlab = "COM from ctrl_not_selected",
ylab = "COM from rnase_not_selected",
main = "COM: not selected proteins",
pch = 19,
col = "mediumpurple1"
)
points(
ctrl_above_threshold$COM, rnase_above_threshold$COM,
pch = 19,
col = "midnightblue"
)
abline(a = 0, b = 1, col = "black", lwd = 3, lty = 3)
par(mfrow = c(1, 1))
# RBP2GO database contains proteome-wide datasets for RBPs from 53 studies including 105 datasets -> 22 552 identified RBP candidates across 13 species.)
# Load the RBP2GO tables: One for known RBPs (RNA-binding proteins) and one for known non-RBPs in humans.
# Skip the first 6 lines of the file (-> Not part of the datatable)
# "\t" means the values are separated by tabs.
# stringsAsFactors => FALSE means text columns are treated as text and not turned into factors. Characters remain usable.
rbp_pos <- read.delim("Data/RBP2GO Table RBPs.txt", skip = 6, sep = "\t", stringsAsFactors = FALSE)
rbp_neg <- read.delim("Data/RBP2GO Table Non-RBPs.txt", skip = 6, sep = "\t", stringsAsFactors = FALSE)
# Add a new column to the ctrl_norm_mean dataframe to store RBP2GO status
# The status "RBP" or "Non-RBP" confirms that the protein has been identified as an RBP in previous studies / datasets.
# Set status "unknown", will be replaced if possible.
ctrl_norm_mean$RBP2GO_status <- "unkown"
# If the protein name (row name) is found in the list of known RBPs (toupper makes it case-insensitive), mark it as "RBP"
ctrl_norm_mean$RBP2GO_status[
toupper(rownames(ctrl_norm_mean)) %in% toupper(rbp_pos$Entry_Name)
] <- "RBP"
# If the protein is in the list of known non-RBPs, mark it as "Non-RBP"
ctrl_norm_mean$RBP2GO_status[
toupper(rownames(ctrl_norm_mean)) %in% toupper(rbp_neg$Entry_Name)
] <- "Non-RBP"
library(ggplot2)
# Count how many proteins fall into each category ("RBP", "Non-RBP", "unknown")
# table counts how often a status occured -> see "df_plot" (dataframe)
df_plot <- as.data.frame(table(ctrl_norm_mean$RBP2GO_status))
colnames(df_plot) <- c("Status", "Amount")
# Create a pie chart from these counts
ggplot(df_plot, aes(x = "", y = Amount, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
labs(title = "RBP2GO Classification of all ctrl_norm_mean proteins") +
scale_fill_manual(values = c("firebrick", "midnightblue", "darkseagreen3"))
# Convert all protein names to uppercase to make matching case-insensitive (-> "toupper")
# Vectors for all proteins in ctrl_norm_mean (all-prots), rbp_pos (rbp_known), ctrl_selected (selected_prots), ctrl_not_selected (not_selected_prots)
all_prots <- toupper(rownames(ctrl_norm_mean))
rbp_known <- toupper(rbp_pos$Entry_Name)
selected_prots <- toupper(rownames(ctrl_selected))
not_selected_prots <- toupper(rownames(ctrl_not_selected))
# Find RBPs (from the database) that are in our dataset (ctrl_norm_mean)
rbps_in_ctrl <- all_prots[all_prots %in% rbp_known]
#sum(rbps_in_ctrl)
# From the RBPs that are in ctrl_norm_mean and RBP2GO-known RBPs, identify the ones we selected (in ctrl_selected)
# True Positives: Selected RBP2GO-known RBPs
selected_rbps <- rbps_in_ctrl[rbps_in_ctrl %in% selected_prots]
# Identify the ones that were not selected (in ctrl_not_selected)
# False negatives: Not selected but RBP2GO-known RBPs
not_selected_rbps <- rbps_in_ctrl[rbps_in_ctrl %in% not_selected_prots]
# Create a "status label" for each RBP: "Selected" or "Not Selected"
status <- c(
rep("Selected RBP", length(selected_rbps)),
rep("Not Selected RBP", length(not_selected_rbps))
)
# Create a dataframe counting ("table") how many fall into each category
df_rbp_pie <- as.data.frame(table(status))
colnames(df_rbp_pie) <- c("Status", "Amount")
# Pie Chart 1: RBP2GO-known RBPs and how many we selected, not selected
# Load plotting library
library(ggplot2)
# Create a pie chart showing how many known RBPs were selected or not selected
ggplot(df_rbp_pie, aes(x = "", y = Amount, fill = Status)) +
geom_bar(stat = "identity", width = 1) +  # Make bar chart (for pie)
coord_polar("y") +                        # Convert bar chart to pie chart
theme_void() +                            # Remove background, axes, etc.
labs(title = "Known RBPs: Selected vs Not Selected") +
scale_fill_manual(values = c("Selected RBP" = "firebrick",
"Not Selected RBP" = "salmon"))
# Convert all protein names to uppercase to make matching case-insensitive (-> "toupper")
# Vectors for all proteins in ctrl_norm_mean (all-prots), rbp_neg (non_rbp_known), ctrl_selected (selected_prots), ctrl_not_selected (not_selected_prots)
all_prots <- toupper(rownames(ctrl_norm_mean))
non_rbp_known <- toupper(rbp_neg$Entry_Name)
# Find known Non-RBPs that are in our HeLa-dataset (ctrl_norm_mean)
non_rbps_in_HeLa <- all_prots[all_prots %in% non_rbp_known]
# From the proteins that are in ctrl_norm_mean and are RBP2GO-known non-RBPs, find how many were wrongly selected (in ctrl_selected)
# False positives: selected known non_RBPs
selected_non_rbps <- non_rbps_in_HeLa[non_rbps_in_HeLa %in% selected_prots]
# remember: selected_prots <- toupper(rownames(ctrl_selected))
# Finds how many were correctly not selected
# True negatives: not selected non_RBPs
not_selected_non_rbps <- non_rbps_in_HeLa[non_rbps_in_HeLa %in% not_selected_prots]
# remember: not_selected_prots <- toupper(rownames(ctrl_not_selected))
# Create "status labels"
status_non_rbps <- c(
rep("Selected Non-RBP", length(selected_non_rbps)),         # "Wrongly selected"
rep("Not Selected Non-RBP", length(not_selected_non_rbps))  # "Correctly ignored"
)
# Create dataframe and calculate percentages
df_non_rbp_pie <- as.data.frame(table(status_non_rbps))
colnames(df_non_rbp_pie) <- c("Status", "Amount")
# df_non_rbp_pie$Percentage <- round((df_non_rbp_pie$Amount / sum(df_non_rbp_pie$Amount)) * 100, 1)
# print(df_non_rbp_pie)
# Pie Chart 2: RBP2GO-known RBPs and how many we selected, not selected
library(ggplot2)
# Create a pie chart showing how many known Non-RBPs were selected or not selected
ggplot(df_non_rbp_pie, aes(x = "", y = Amount, fill = Status)) +
geom_bar(stat = "identity", width = 1) +  # Make bar chart (for pie)
coord_polar("y") +                        # Convert bar chart to pie chart
theme_void() +                            # Remove background, axes, etc.
labs(title = "Known Non-RBPs: Selected vs Not Selected") +
scale_fill_manual(values = c("Selected Non-RBP" = "mediumpurple1",
"Not Selected Non-RBP" = "midnightblue"))
# Keep only numerical columns
pca_ctrl_numeric <- ctrl_selected[, sapply(ctrl_selected, is.numeric)][, 1:25]
pca_rnase_numeric <- rnase_selected[, sapply(rnase_selected, is.numeric)][, 1:25]
# Remove rows with NAs
pca_ctrl_clean <- pca_ctrl_numeric[complete.cases(pca_ctrl_numeric), ]
pca_rnase_clean <- pca_rnase_numeric[complete.cases(pca_rnase_numeric), ]
pca_result_ctrl <- prcomp(pca_ctrl_clean, center = TRUE, scale. = TRUE, )
pca_result_rnase <- prcomp(pca_rnase_clean, center = TRUE, scale. = TRUE)
# Keep only numerical columns
pca_ctrl_numeric_not_selected <- ctrl_not_selected[,sapply(ctrl_not_selected, is.numeric)][, 1:25]
pca_rnase_numeric_not_selected <- rnase_not_selected[,sapply(rnase_not_selected, is.numeric)][, 1:25]
# Remove rows with NAs
pca_ctrl_clean_not_selected <- pca_ctrl_numeric_not_selected[complete.cases(pca_ctrl_numeric_not_selected), ]
pca_rnase_clean_not_selected <- pca_rnase_numeric_not_selected[complete.cases(pca_rnase_numeric_not_selected), ]
pca_result_ctrl_not_selected <- prcomp(pca_ctrl_clean_not_selected, center = TRUE, scale. = TRUE, )
pca_result_rnase_not_selected <- prcomp(pca_rnase_clean_not_selected, center = TRUE, scale. = TRUE)
# Check which PCs have the most variance
summary(pca_result_ctrl)
summary(pca_result_rnase)
summary(pca_result_ctrl_not_selected)
summary(pca_result_rnase_not_selected)
#plot PC1 with PC2
plot(pca_result_ctrl$x[,1:2], col = "midnightblue", pch = 16,
xlab = "PC1", ylab = "PC2", main = "PCA: PC1 vs PC2 CTRL (SHIFT)")
plot(pca_result_rnase$x[,1:2], col = "midnightblue", pch = 16,
xlab = "PC1", ylab = "PC2", main = "PCA: PC1 vs PC2 RNASE (SHIFT)")
#plot PC1 with PC3
plot(pca_result_ctrl$x[,c(1, 3)], col = "midnightblue", pch = 16,
xlab = "PC1", ylab = "PC3", main = "PCA: PC1 vs PC3 CTRL (SHIFT)")
plot(pca_result_rnase$x[,c(1, 3)], col = "midnightblue", pch = 16,
xlab = "PC1", ylab = "PC3", main = "PCA: PC1 vs PC3 RNASE (SHIFT)")
#plot PC2 with PC3
plot(pca_result_ctrl$x[,2:3], col = "midnightblue", pch = 16,
xlab = "PC2", ylab = "PC3", main = "PCA: PC2 vs PC3 CTRL (SHIFT)")
plot(pca_result_rnase$x[,2:3], col = "midnightblue", pch = 16,
xlab = "PC2", ylab = "PC3", main = "PCA: PC2 vs PC3 RNASE (SHIFT)")
# Simple 2D PCA-Plot
plot(pca_result_ctrl_not_selected$x[,1:2], col = "midnightblue", pch = 16,
xlab = "PC1", ylab = "PC2", main = "PCA: PC1 vs PC2 CTRL (NO SHIFT)")
plot(pca_result_rnase_not_selected$x[,1:2], col = "midnightblue", pch = 16,
xlab = "PC1", ylab = "PC2", main = "PCA: PC1 vs PC2 RNASE (NO SHIFT)")
#plot PC1 with PC3
plot(pca_result_ctrl_not_selected$x[,c(1, 3)], col = "midnightblue", pch = 16,
xlab = "PC1", ylab = "PC3", main = "PCA: PC1 vs PC3 CTRL (NO SHIFT)")
plot(pca_result_rnase_not_selected$x[,c(1, 3)], col = "midnightblue", pch = 16,
xlab = "PC1", ylab = "PC3", main = "PCA: PC1 vs PC3 RNASE (NO SHIFT)")
#plot PC2 with PC3
plot(pca_result_ctrl_not_selected$x[,2:3], col = "midnightblue", pch = 16,
xlab = "PC2", ylab = "PC3", main = "PCA: PC2 vs PC3 CTRL (NO SHIFT)")
plot(pca_result_rnase_not_selected$x[,2:3], col = "midnightblue", pch = 16,
xlab = "PC2", ylab = "PC3", main = "PCA: PC2 vs PC3 RNASE (NO SHIFT)")
#Recognize centers for k-means clustering -> 3 centers
plot(pca_result_ctrl, type = "l", main = "Elbow-Plot CTRL (SHIFT)")
plot(pca_result_rnase, type = "l", main = "Elbow-Plot RNASE (SHIFT)")
#Recognize centers for k-means clustering -> 2 centers
plot(pca_result_ctrl_not_selected, type = "l", main = "Elbow-Plot CTRL (NO SHIFT)")
plot(pca_result_rnase_not_selected, type = "l", main = "Elbow-Plot RNASE (NO SHIFT)")
pca_ctrl_pc1_pc2 <- as.data.frame(pca_result_ctrl$x[, 1:2])
pca_ctrl_pc1_pc3 <- as.data.frame(pca_result_ctrl$x[, c(1,3)])
pca_ctrl_pc2_pc3 <- as.data.frame(pca_result_ctrl$x[, 2:3])
pca_rnase_pc1_pc2 <- as.data.frame(pca_result_rnase$x[, 1:2])
pca_rnase_pc1_pc3 <- as.data.frame(pca_result_rnase$x[, c(1,3)])
pca_rnase_pc2_pc3 <- as.data.frame(pca_result_rnase$x[, 2:3])
pca_ctrl_pc1_pc2_not_selected <- as.data.frame(pca_result_ctrl_not_selected$x[, 1:2])
pca_ctrl_pc1_pc3_not_selected <- as.data.frame(pca_result_ctrl_not_selected$x[, c(1,3)])
pca_ctrl_pc2_pc3_not_selected <- as.data.frame(pca_result_ctrl_not_selected$x[, 2:3])
pca_rnase_pc1_pc2_not_selected <- as.data.frame(pca_result_rnase_not_selected$x[, 1:2])
pca_rnase_pc1_pc3_not_selected <- as.data.frame(pca_result_rnase_not_selected$x[, c(1,3)])
pca_rnase_pc2_pc3_not_selected <- as.data.frame(pca_result_rnase_not_selected$x[, 2:3])
library(factoextra)
fviz_nbclust(pca_ctrl_pc1_pc2, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_ctrl_pc1_pc3, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_ctrl_pc2_pc3, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC2/PC3") +
theme_minimal()
fviz_nbclust(pca_rnase_pc1_pc2, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_rnase_pc1_pc3, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC1/PC3") +
theme_minimal()
fviz_nbclust(pca_rnase_pc2_pc3, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC2/PC3") +
theme_minimal()
fviz_nbclust(pca_ctrl_pc1_pc2_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_ctrl_pc1_pc3_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_ctrl_pc2_pc3_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC2/PC3") +
theme_minimal()
fviz_nbclust(pca_rnase_pc1_pc2_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_rnase_pc1_pc3_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC1/PC3") +
theme_minimal()
fviz_nbclust(pca_rnase_pc2_pc3_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC2/PC3") +
theme_minimal()
#kmeans is executed with 3 centers --> see elbow-Plot and silhouette plot
km_result_ctrl_pc1_pc2<- kmeans(pca_ctrl_pc1_pc2, centers = 3)
km_result_ctrl_pc1_pc3<- kmeans(pca_ctrl_pc1_pc3, centers = 3)
km_result_ctrl_pc2_pc3<- kmeans(pca_ctrl_pc2_pc3, centers = 3)
km_result_rnase_pc1_pc2<- kmeans(pca_rnase_pc1_pc2, centers = 3)
km_result_rnase_pc1_pc3<- kmeans(pca_rnase_pc1_pc3, centers = 3)
km_result_rnase_pc2_pc3<- kmeans(pca_rnase_pc2_pc3, centers = 3)
#kmeans is executed with 2 centers
km_result_ctrl_pc1_pc2_not_selected<- kmeans(pca_ctrl_pc1_pc2_not_selected, centers = 3)
km_result_ctrl_pc1_pc3_not_selected<- kmeans(pca_ctrl_pc1_pc3_not_selected, centers = 3)
km_result_ctrl_pc2_pc3_not_selected<- kmeans(pca_ctrl_pc2_pc3_not_selected, centers = 3)
km_result_rnase_pc1_pc2_not_selected<- kmeans(pca_rnase_pc1_pc2_not_selected, centers = 3)
km_result_rnase_pc1_pc3_not_selected<- kmeans(pca_rnase_pc1_pc3_not_selected, centers = 3)
km_result_rnase_pc2_pc3_not_selected<- kmeans(pca_rnase_pc2_pc3_not_selected, centers = 3)
library(factoextra)
# pca_df contains the data, e.g. PC1 and PC2
fviz_cluster(km_result_ctrl_pc1_pc2, data = pca_ctrl_pc1_pc2,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 CTRL (SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc2, data = pca_rnase_pc1_pc2,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("violetred4", "firebrick3", "midnightblue"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 RNASE (SHIFT)")
fviz_cluster(km_result_ctrl_pc1_pc3, data = pca_ctrl_pc1_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 CTRL (SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc3, data = pca_rnase_pc1_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 RNASE (SHIFT)")
fviz_cluster(km_result_ctrl_pc2_pc3, data = pca_ctrl_pc2_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC2 vs PC3 CTRL (SHIFT)")
fviz_cluster(km_result_rnase_pc2_pc3, data = pca_rnase_pc2_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC2 vs PC3 RNASE (SHIFT)")
# pca_df contains the data, e.g. PC1 and PC2
fviz_cluster(km_result_ctrl_pc1_pc2_not_selected, data = pca_ctrl_pc1_pc2_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 CTRL (NO SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc2_not_selected, data = pca_rnase_pc1_pc2_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("violetred4", "firebrick3", "midnightblue"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 RNASE (NO SHIFT)")
fviz_cluster(km_result_ctrl_pc1_pc3_not_selected, data = pca_ctrl_pc1_pc3_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 CTRL (NO SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc3_not_selected, data = pca_rnase_pc1_pc3_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 RNASE (NO SHIFT)")
fviz_cluster(km_result_ctrl_pc2_pc3_not_selected, data = pca_ctrl_pc2_pc3_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC2 vs PC3 CTRL (NO SHIFT)")
fviz_cluster(km_result_rnase_pc2_pc3_not_selected, data = pca_rnase_pc2_pc3_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC2 vs PC3 RNASE (SHIFT)")
#For ctrl selected vs rnase selected
#Rename relevant variables to avoid PC name redundance later on
ctrl_1 <- pca_ctrl_pc1_pc2$PC1
ctrl_2 <- pca_ctrl_pc1_pc2$PC2
ctrl_3 <- pca_ctrl_pc1_pc3$PC3
rnase_1 <- pca_rnase_pc1_pc2$PC1
rnase_2 <- pca_rnase_pc1_pc2$PC2
rnase_3 <- pca_rnase_pc1_pc3$PC3
#Generates plot with PCA datapoints and draws a trendline through it
plot(ctrl_1,rnase_1,pch=20,col='blue', xlab='Ctrl selected PC1',ylab='Rnase selected PC1', main = "Ctrl selected PC1 vs Rnase selected PC1");abline(0,1,col='red')
plot(ctrl_1,rnase_2,pch=20,col='blue', xlab='Ctrl selected PC1',ylab='Rnase selected PC2', main = "Ctrl selected PC1 vs Rnase selected PC2");abline(0,1,col='red')
plot(ctrl_1,rnase_3,pch=20,col='blue', xlab='Ctrl selected PC1',ylab='Rnase selected PC3', main = "Ctrl selected PC1 vs Rnase selected PC3");abline(0,1,col='red')
plot(ctrl_2,rnase_1,pch=20,col='blue', xlab='Ctrl selected PC2',ylab='Rnase selected PC1', main = "Ctrl selected PC2 vs Rnase selected PC1");abline(0,1,col='red')
plot(ctrl_2,rnase_2,pch=20,col='blue', xlab='Ctrl selected PC2',ylab='Rnase selected PC2', main = "Ctrl selected PC2 vs Rnase selected PC2");abline(0,1,col='red')
plot(ctrl_2,rnase_3,pch=20,col='blue', xlab='Ctrl selected PC2',ylab='Rnase selected PC3', main = "Ctrl selected PC2 vs Rnase selected PC3");abline(0,1,col='red')
plot(ctrl_3,rnase_1,pch=20,col='blue', xlab='Ctrl selected PC3',ylab='Rnase selected PC1', main = "Ctrl selected PC3 vs Rnase selected PC1");abline(0,1,col='red')
plot(ctrl_3,rnase_2,pch=20,col='blue', xlab='Ctrl selected PC3',ylab='Rnase selected PC2', main = "Ctrl selected PC3 vs Rnase selected PC2");abline(0,1,col='red')
plot(ctrl_3,rnase_3,pch=20,col='blue', xlab='Ctrl selected PC3',ylab='Rnase selected PC3', main = "Ctrl selected PC3 vs Rnase selected PC3");abline(0,1,col='red')
#Defines a target variable, so what should be predicted by the regression analysis
target_selected <- ctrl_selected$global_maximum
#Builds matrix for regression analysis from target variable with two PCA components
df_regression_selected_11 <- cbind(target = target_selected ,
ctrl_1, rnase_1)
df_regression_selected_12 <- cbind(target = target_selected ,
ctrl_1, rnase_2)
df_regression_selected_13 <- cbind(target = target_selected ,
ctrl_1, rnase_3)
df_regression_selected_21 <- cbind(target = target_selected ,
ctrl_2, rnase_1)
df_regression_selected_22 <- cbind(target =target_selected,
ctrl_2, rnase_2)
df_regression_selected_23 <- cbind(target = target_selected ,
ctrl_2, rnase_3)
df_regression_selected_31 <- cbind(target = target_selected ,
ctrl_3, rnase_1)
df_regression_selected_32 <- cbind(target =target_selected ,
ctrl_3, rnase_2)
df_regression_selected_33 <- cbind(target = target_selected ,
ctrl_3, rnase_3)
#Make matrix a data frame
df_regression_selected_11 <- as.data.frame(df_regression_selected_11)
df_regression_selected_12 <- as.data.frame(df_regression_selected_12)
df_regression_selected_13 <- as.data.frame(df_regression_selected_13)
df_regression_selected_21 <- as.data.frame(df_regression_selected_21)
df_regression_selected_22 <- as.data.frame(df_regression_selected_22)
df_regression_selected_23 <- as.data.frame(df_regression_selected_23)
df_regression_selected_31 <- as.data.frame(df_regression_selected_31)
df_regression_selected_32 <- as.data.frame(df_regression_selected_32)
df_regression_selected_33 <- as.data.frame(df_regression_selected_33)
#Multiple linear regression analysis
model_selected_pc1_1<- lm(target ~ ctrl_1 + rnase_1, data = df_regression_selected_11)
model_selected_pc1_2<- lm(target ~ctrl_1 + rnase_2, data = df_regression_selected_12)
model_selected_pc1_3<- lm(target ~ ctrl_1 + rnase_3, data = df_regression_selected_13)
model_selected_pc2_1<- lm(target ~ ctrl_2 + rnase_1, data = df_regression_selected_21)
model_selected_pc2_2<- lm(target ~ ctrl_2 + rnase_2, data = df_regression_selected_22)
model_selected_pc2_3<- lm(target ~ ctrl_2 + rnase_3, data = df_regression_selected_23)
model_selected_pc3_1<- lm(target ~ ctrl_3 + rnase_1, data = df_regression_selected_31)
model_selected_pc3_2<- lm(target ~ ctrl_3 + rnase_2, data = df_regression_selected_32)
model_selected_pc3_3<- lm(target ~ ctrl_3 + rnase_3, data = df_regression_selected_33)
#Show results/summary
summary(model_selected_pc1_1)
summary(model_selected_pc1_2)
summary(model_selected_pc1_3)
summary(model_selected_pc2_1)
summary(model_selected_pc2_2)
summary(model_selected_pc2_3)
summary(model_selected_pc3_1)
summary(model_selected_pc3_2)
summary(model_selected_pc3_3)
#For ctrl not-selected vs rnase not-selected
#Rename relevant variables to avoid PC name redundance later on
ctrl_ns_1 <- pca_ctrl_pc1_pc2_not_selected$PC1
ctrl_ns_2 <- pca_ctrl_pc1_pc2_not_selected$PC2
ctrl_ns_3 <- pca_ctrl_pc1_pc3_not_selected$PC3
rnase_ns_1 <- pca_rnase_pc1_pc2_not_selected$PC1
rnase_ns_2 <- pca_rnase_pc1_pc2_not_selected$PC2
rnase_ns_3 <- pca_rnase_pc1_pc3_not_selected$PC3
#Generates plot with PCA datapoints and draws a trendline through it
plot(ctrl_ns_1,rnase_ns_1,pch=20,col='blue', xlab='Ctrl not-selected PC1',ylab='Rnase not-selected PC1', main = "Ctrl not-selected PC1 vs Rnase not-selected PC1");abline(0,1,col='red')
plot(ctrl_ns_1,rnase_ns_2,pch=20,col='blue', xlab='Ctrl not-selected PC1',ylab='Rnase not-selected PC2', main = "Ctrl not-selected PC1 vs Rnase not-selected PC2");abline(0,1,col='red')
plot(ctrl_ns_1,rnase_ns_3,pch=20,col='blue', xlab='Ctrl not-selected PC1',ylab='Rnase not-selected PC3', main = "Ctrl not-selected PC1 vs Rnase not-selected PC3");abline(0,1,col='red')
plot(ctrl_ns_2,rnase_ns_1,pch=20,col='blue', xlab='Ctrl not-selected PC2',ylab='Rnase not-selected PC1', main = "Ctrl not-selected PC2 vs Rnase not-selected PC1");abline(0,1,col='red')
plot(ctrl_ns_2,rnase_ns_2,pch=20,col='blue', xlab='Ctrl not-selected PC2',ylab='Rnase not-selected PC2', main = "Ctrl not-selected PC2 vs Rnase not-selected PC2");abline(0,1,col='red')
plot(ctrl_ns_2,rnase_ns_3,pch=20,col='blue', xlab='Ctrl not-selected PC2',ylab='Rnase not-selected PC3', main = "Ctrl not-selected PC2 vs Rnase not-selected PC3");abline(0,1,col='red')
plot(ctrl_ns_3,rnase_ns_1,pch=20,col='blue', xlab='Ctrl not-selected PC3',ylab='Rnase not-selected PC1', main = "Ctrl not-selected PC3 vs Rnase not-selected PC1");abline(0,1,col='red')
plot(ctrl_ns_3,rnase_ns_2,pch=20,col='blue', xlab='Ctrl not-selected PC3',ylab='Rnase not-selected PC2', main = "Ctrl not-selected PC3 vs Rnase not-selected PC2");abline(0,1,col='red')
plot(ctrl_ns_3,rnase_ns_3,pch=20,col='blue', xlab='Ctrl not-selected PC3',ylab='Rnase not-selected PC3', main = "Ctrl not-selected PC3 vs Rnase not-selected PC3");abline(0,1,col='red')
#Defines a target variable, so what should be predicted by the regression analysis
target_not_selected <- ctrl_selected$global_maximum
#Builds matrix for regression analysis from target variable with two PCA components
df_regression_not_selected_11 <- cbind(target = target_not_selected ,
ctrl_ns_1, rnase_ns_1)
df_regression_not_selected_12 <- cbind(target = target_not_selected ,
ctrl_ns_1, rnase_ns_2)
df_regression_not_selected_13 <- cbind(target = target_not_selected ,
ctrl_ns_1, rnase_ns_3)
df_regression_not_selected_21 <- cbind(target = target_not_selected ,
ctrl_ns_2, rnase_ns_1)
df_regression_not_selected_22 <- cbind(target =target_not_selected,
ctrl_ns_2, rnase_ns_2)
df_regression_not_selected_23 <- cbind(target = target_not_selected ,
ctrl_ns_2, rnase_ns_3)
df_regression_not_selected_31 <- cbind(target = target_not_selected ,
ctrl_ns_3, rnase_ns_1)
df_regression_not_selected_32 <- cbind(target =target_not_selected ,
ctrl_ns_3, rnase_ns_2)
df_regression_not_selected_33 <- cbind(target = target_not_selected ,
ctrl_ns_3, rnase_ns_3)
#Make matrix a data frame
df_regression_not_selected_11 <- as.data.frame(df_regression_not_selected_11)
df_regression_not_selected_12 <- as.data.frame(df_regression_not_selected_12)
df_regression_not_selected_13 <- as.data.frame(df_regression_not_selected_13)
df_regression_not_selected_21 <- as.data.frame(df_regression_not_selected_21)
df_regression_not_selected_22 <- as.data.frame(df_regression_not_selected_22)
df_regression_not_selected_23 <- as.data.frame(df_regression_not_selected_23)
df_regression_not_selected_31 <- as.data.frame(df_regression_not_selected_31)
df_regression_not_selected_32 <- as.data.frame(df_regression_not_selected_32)
df_regression_not_selected_33 <- as.data.frame(df_regression_not_selected_33)
#Multiple linear regression analysis
model_not_selected_pc1_1<- lm(target ~ ctrl_ns_1 + rnase_ns_1, data = df_regression_not_selected_11)
model_not_selected_pc1_2<- lm(target ~ctrl_ns_1 + rnase_ns_2, data = df_regression_not_selected_12)
model_not_selected_pc1_3<- lm(target ~ ctrl_ns_1 + rnase_ns_3, data = df_regression_not_selected_13)
model_not_selected_pc2_1<- lm(target ~ ctrl_ns_2 + rnase_ns_1, data = df_regression_not_selected_21)
model_not_selected_pc2_2<- lm(target ~ ctrl_ns_2 + rnase_ns_2, data = df_regression_not_selected_22)
model_not_selected_pc2_3<- lm(target ~ ctrl_ns_2 + rnase_ns_3, data = df_regression_not_selected_23)
model_not_selected_pc3_1<- lm(target ~ ctrl_ns_3 + rnase_ns_1, data = df_regression_not_selected_31)
model_not_selected_pc3_2<- lm(target ~ ctrl_ns_3 + rnase_ns_2, data = df_regression_not_selected_32)
model_not_selected_pc3_3<- lm(target ~ ctrl_ns_3 + rnase_ns_3, data = df_regression_not_selected_33)
#Show results/summary
summary(model_not_selected_pc1_1)
summary(model_not_selected_pc1_2)
summary(model_not_selected_pc1_3)
summary(model_not_selected_pc2_1)
summary(model_not_selected_pc2_2)
summary(model_not_selected_pc2_3)
summary(model_not_selected_pc3_1)
summary(model_not_selected_pc3_2)
summary(model_not_selected_pc3_3)
load("C:/Users/ben_n/Documents/GitHub/2025-topic-03-group-01/.RData")
load("C:/Users/Manu/Documents/GitHub/2025-topic-03-group-01/.RData")
