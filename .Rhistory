filtered <- peak_indeces[x[peak_indeces] > 2]
local_maxima <- unlist(filtered)
local_maxima
})
rnase_norm_mean$local_maxima <- apply(rnase_norm_mean, 1, function(x) {
peak_indeces <- find_local_maxima(x)
filtered <- peak_indeces[x[peak_indeces] > 2]
local_maxima <- unlist(filtered)
local_maxima
})
# Out of the local maxima, extract the global (greatest) maximum, and save it in a new column "global_maximum" (column 27)
ctrl_norm_mean$global_maximum <- sapply(1:nrow(ctrl_norm_mean), function(i) {
x <- as.numeric(ctrl_norm_mean[i, 1:25])
peaks <- ctrl_norm_mean$local_maxima[[i]]
if (length(peaks) == 0) {
return(NA)
} else {
peak_values <- x[peaks]
return(peaks[which.max(peak_values)])
}
})
rnase_norm_mean$global_maximum <- sapply(1:nrow(ctrl_norm_mean), function(i) {
x <- as.numeric(rnase_norm_mean[i, 1:25])
peaks <- rnase_norm_mean$local_maxima[[i]]
if (length(peaks) == 0) {
return(NA)
} else {
peak_values <- x[peaks]
return(peaks[which.max(peak_values)])
}
})
# Identify the RNAse fractions with signal intensity > 2%.
# Create a new data frame containing 0 (= this fraction value was ≤2% ) and 1 (= this fraction value was >2%.), as well as the intensity maxima.
# The two new data frames are created, rnase_3 and ctrl_3, as copies of the previously calculated, normalized mean tables (*_norm_mean).
rnase_3 <- rnase_norm_mean
# Compare each value in columns 1 to 25 (the fractions) of the rnase_norm_mean dataframe with the threshold of 2%.
# Convert TRUE to 1 and FALSE to 0.
rnase_3[1:25] <- (rnase_norm_mean[1:25] > 2)*1
# Identify the CTRL fractions with signal intensity > 2%.
# Create a new data frames containing 0 / 1, as well as the intensity maxima.
ctrl_3 <- ctrl_norm_mean
ctrl_3[1:25] <- (ctrl_norm_mean[1:25] > 2)*1
# Remove and exclude 3 fractions left and right of each peak (7 in total) from the shoulder search.
th_max_reg_simple <- function(x) {
peaks <- as.numeric(unlist(x$local_maxima)) # Convert the local_maxima column from ctrl/rnase_norm_mean to a numeric vector.
mask <- rep(1, 25)
for (peak in peaks) { # peak = current peak value, peaks = detected maxima (column 26)
if (peak > 0) {
left <- max(1, peak - 3)
right <- min(25, peak + 3) # For each peak, the range from peak–3 to peak+3 is calculated.
mask[left:right] <- 0 # These 7 fractions (the peak itself and 3 before & after it) are masked out by setting their positions in the mask to 0.
}
}
x_values <- as.numeric(x[1:25]) # because $maxima contained characters.
x_values <- x_values * mask # Fractions with mask = 1 are retained. Fractions with mask = 0 are set to 0.
return(x_values)
}
# Apply the function row by row to the entire rnase_3 or ctrl_3 DataFrame.
rnase_3[1:25] <- t(apply(rnase_3, 1, th_max_reg_simple))
ctrl_3[1:25]  <- t(apply(ctrl_3, 1, th_max_reg_simple))
# Detect "shoulder regions"
# Define a function that identifies signal regions where there are at least 4 consecutive fractions with an intensity above 2% using the data frames rnase_3 and ctrl_3.
# select the middle of it
# Apply on the whole dataframe
peaks_regions = function(x) {
rle_result = rle(as.numeric(x[1:25])) # rle() finds all consecutive equal values -> $lengths and $values
#Find positions of all blocks of ones with length ≥4. These blocks are considered “shoulder regions”.
peak_blocks = which(rle_result$values == 1 & rle_result$lengths >= 4)
#If there are no such blocks of length >4, return an empty vector
if (length(peak_blocks) == 0) {
return(numeric(0))
}
#Calculate estimate middle for the peak blocks
peak_positions = numeric(length(peak_blocks))
for(i in seq_along(peak_blocks)) {
#Position of the end of the respective block
end_of_block = sum(rle_result$lengths[1:peak_blocks[i]])
#Calculate half length (middle) of the block
half_length = floor(rle_result$lengths[peak_blocks[i]] /2)
#Middle position of the shoulder
peak_positions[i] = end_of_block - half_length
}
return(peak_positions)
}
# Calculate the positions of the "shoulders" for each protein row, i.e. regions with ≥4 consecutive fractions with signal >2%
# Save the shoulder positions as a new column called peaks in the respective data frames rnase_3 and ctrl_3.
# New column: "shoulders" (column 28)
rnase_3$shoulders <- apply(rnase_3, 1, function(x) { peaks_regions(x) } )
ctrl_3$shoulders <- apply(ctrl_3, 1, function(x) { peaks_regions(x) } )
rnase_norm_mean$shoulders <- apply(rnase_3, 1, function(x) { peaks_regions(x) } )
ctrl_norm_mean$shoulders <- apply(ctrl_3, 1, function(x) { peaks_regions(x) } )
# Calculate the total of all relevant signal maxima (real peaks and shoulders) for each protein row in the dataframe
# New column: "combined_max_ctrl" and "combined_max_rnase" (column 29) respectively
rnase_3$combined_max_rnase <- apply(rnase_3, 1, function(x) {
ls_max <- as.numeric(unlist(x$local_maxima)) # ls_max = numerical vector with the peak positions of this protein
ls_shoulder <- as.numeric(unlist(x$shoulders))
combined_max_rnase <- c(ls_max, ls_shoulder) # Combine to common vector.
combined_max_rnase <- unlist(combined_max_rnase)
combined_max_rnase <- combined_max_rnase[combined_max_rnase!=0] # Remove all 0 entries from the result vector, as these do not represent real signals.
combined_max_rnase <- sort(combined_max_rnase, decreasing = FALSE) # Sort all peak and shoulder positions in ascending order (1 → 25)
if (length(combined_max_rnase) == 0) {0} else {combined_max_rnase} # If there are no peaks or shoulders, 0 (as a placeholder) is stored.
})
ctrl_3$combined_max_ctrl <- apply(ctrl_3, 1, function(x) {
ls_max <- as.numeric(unlist(x$local_maxima))
ls_shoulder <- as.numeric(unlist(x$shoulders))
combined_max_ctrl <- c(ls_max, ls_shoulder)
combined_max_ctrl <- unlist(combined_max_ctrl)
combined_max_ctrl <- combined_max_ctrl[combined_max_ctrl!=0]
combined_max_ctrl <- sort(combined_max_ctrl, decreasing = FALSE)
if (length(combined_max_ctrl) == 0) {0} else {combined_max_ctrl}
})
# Füge die neue Spalte der kombinierten Maxima auch noch zu ctrl/rnase_norm_mean, um damit weiter arbeiten zu können
ctrl_norm_mean$combined_max_ctrl = ctrl_3[, "combined_max_ctrl"]
rnase_norm_mean$combined_max_rnase = rnase_3[, "combined_max_rnase"]
# Determine the number of combined maxima (peaks + shoulders) per protein
# New column: "n_max_comb" (column 30)
rnase_3$n_max_comb <- apply(rnase_3, 1, function(x) {
ls_max <- as.numeric(unlist(x$combined_max_rnase))
n = length(ls_max) # => Answers: How many peaks (maxima and shoulders) does this protein have?
if (sum(ls_max) == 0) {0} else {n} # If TRUE, then the result should be 0, instead of length(ls_max), which would then be 1.
})
ctrl_3$n_max_comb <- apply(ctrl_3, 1, function(x) {
ls_max <- as.numeric(unlist(x$combined_max_ctrl))
n = length(ls_max)
if (sum(ls_max) == 0) {0} else {n}
})
# Selbes für ctrl/rnase_norm_mean
ctrl_norm_mean$n_max_comb = ctrl_3[, "n_max_comb"]
rnase_norm_mean$n_max_comb = rnase_3[, "n_max_comb"]
# Determine the number of only peak maxima ("local_maxima") per protein
# New column: "n_local_maxima" (column 31)
rnase_3$n_local_maxima <- apply(rnase_3, 1, function(x) {
ls_max <- as.numeric(unlist(x$local_maxima))
n = length(ls_max)
if (sum(ls_max) == 0) {0} else {n}
})
ctrl_3$n_local_maxima <- apply(ctrl_3, 1, function(x) {
ls_max <- as.numeric(unlist(x$local_maxima))
n = length(ls_max)
if (sum(ls_max) == 0) {0} else {n}
})
# Selbes für ctrl/rnase_norm_mean
ctrl_norm_mean$n_local_maxima = ctrl_3[, "n_local_maxima"]
rnase_norm_mean$n_local_maxima = rnase_3[, "n_local_maxima"]
#Wählt die ersten Proteinintensitäten in 25 Fraktionen aus.
#Geht jede Zeile von ctrl_norm_mean durch.
#x = Vektor mit den Intensitäten eines Proteins über alle 25 Fraktionen, für den gerade der COM berechnet wird
#* bedeutet elementweise Multiplikation
ctrl_norm_mean$COM <- apply(ctrl_norm_mean[, 1:25], 1, function(x) {
sum((1:25) * x, na.rm = TRUE) / sum(x, na.rm = TRUE)
})
rnase_norm_mean$COM <- apply(rnase_norm_mean[, 1:25], 1, function(x) {
sum((1:25) * x, na.rm = TRUE) / sum(x, na.rm = TRUE)
})
# Erstelle einen neuen Data.Frame, in welchem das Hauptmaximum der Proteine verschoben ist, Name: ctrl_main_shift, rnase_main_shift
# Differenz berechnen (Vektor mit absoluten Abweichungen)
diff_main_maxima <- abs(ctrl_norm_mean$global_maximum - rnase_norm_mean$global_maximum)
# Positionen der Proteine mit Abweichung ≥ 3 Fraktionen
deviating_main_maxima <- which(diff_main_maxima >= 2)
# length(deviating_main_maxima)
# 1351 Proteine zeigen einen shift des Hauptmaximums ≥ 2 Fraktionen
ctrl_main_shift = ctrl_norm_mean[deviating_main_maxima, ]
rnase_main_shift = rnase_norm_mean[deviating_main_maxima, ]
# Erstelle den komplementären Data.Frame, der alle die jenigen Proteine beinhaltet, deren Hauptmaximum nicht um mindestens 2 Fraktionen shiftet, ctrl_main_shift "+" ctrl_no_main_shift = ctrl_norm_mean
ctrl_no_main_shift = ctrl_norm_mean[!rownames(ctrl_norm_mean) %in% rownames(ctrl_main_shift), ]
rnase_no_main_shift = rnase_norm_mean[!rownames(rnase_norm_mean) %in% rownames(rnase_main_shift), ]
# Funktion zur Berechnung der zeilenweise Korrelation, Vermutung: cor von ctrl_main_shift ist geringer als von ctrl_no_main_shift
correlations <- function(df1, df2, methode = "pearson") {
# Prüfen, ob beide Dataframes gleich dimensioniert sind
if (!all(dim(df1) == dim(df2))) {
stop("Die beiden Dataframes müssen die gleiche Dimension haben")
}
# Anzahl der Zeilen
n <- nrow(df1)
# Vektor zur Speicherung der Korrelationswerte
correlations <- numeric(n)
# Schleife über alle Zeilen
for (i in 1:n) {
v1 <- as.numeric(df1[i, 1:25])
v2 <- as.numeric(df2[i, 1:25])
# Korrelation nur berechnen, wenn beide Vektoren Varianz haben
if (sd(v1, na.rm = TRUE) != 0 && sd(v2, na.rm = TRUE) != 0) {
correlations[i] <- cor(v1, v2, method = methode, use = "complete.obs")
} else {
correlations[i] <- NA
}
}
abs_correlations = abs(correlations)
mean_abs_correlation = mean(abs_correlations, na.rm = TRUE)
return(list(
correlations = correlations, mean_abs_correlation = mean_abs_correlation
))
}
# Mittelwert der Korrelationswerte (ctrl vs. rnase) von denjenigen Proteinen, deren Hauptmaximum um mindestens 2 Fraktionen verschoben ist
testing_cor_shifter = correlations(ctrl_main_shift, rnase_main_shift)
testing_cor_shifter$mean_abs_correlation
# Mittelwert der Korrelationswerte (ctrl vs. rnase) von denjenigen Proteinen, deren Hauptmaximum nicht um mindestens 2 Fraktionen verschoben ist
testing_cor_no_shifter = correlations(ctrl_no_main_shift, rnase_no_main_shift)
testing_cor_no_shifter$mean_abs_correlation
# Hat sich die Hypothese bewahrheitet, ist der Mittelwert der Korrelationen der shifter kleiner als die der no_shifter?
testing_cor_shifter$mean_abs_correlation < testing_cor_no_shifter$mean_abs_correlation
cor_all_proteins = correlations(ctrl_norm_mean, rnase_norm_mean)
cor_all_proteins$mean_abs_correlation
#Vektoren der Maxima-Anzahl extrahieren
n_max_ctrl  <- ctrl_no_main_shift$n_max_comb
n_max_rnase <- rnase_no_main_shift$n_max_comb
#Proteine (Zeilennamen) mit gleicher Maxima-Anzahl finden
unequal_max_proteins <- rownames(ctrl_no_main_shift)[n_max_ctrl != n_max_rnase]
#Neuen DataFrame ctrl_equal_max mit diesen Proteinen erstellen
ctrl_unequal_max <- ctrl_no_main_shift[unequal_max_proteins, ]
rnase_unequal_max <- rnase_no_main_shift[unequal_max_proteins, ]
#Vor Abgabe löschen
#dim(ctrl_unequal_max)
#dim(rnase_unequal_max)
#Vektoren der Maxima-Anzahl extrahieren
n_max_ctrl  <- ctrl_no_main_shift$n_max_comb
n_max_rnase <- rnase_no_main_shift$n_max_comb
#Proteine (Zeilennamen) mit gleicher Maxima-Anzahl finden
equal_max_proteins <- rownames(ctrl_no_main_shift)[n_max_ctrl == n_max_rnase]
#Neuen DataFrame ctrl_equal_max mit diesen Proteinen erstellen
ctrl_equal_max <- ctrl_no_main_shift[equal_max_proteins, ]
rnase_equal_max <- rnase_no_main_shift[equal_max_proteins, ]
#Test: Löschen vor Abgabe
#dim(ctrl_no_main_shift)
#dim(rnase_equal_max)
#dim(ctrl_main_shift)
#length(n_max_ctrl)
#length(n_max_rnase)
ctrl_selected = rbind(ctrl_main_shift, ctrl_unequal_max)
rnase_selected = rbind(rnase_main_shift, rnase_unequal_max)
sum(rownames(ctrl_selected) != rownames(rnase_selected))
ctrl_not_selected = ctrl_equal_max
rnase_not_selected = rnase_equal_max
dim(ctrl_not_selected)[1] + dim(ctrl_selected)[1] == 4765
# Mittelwerte pro Zeile berechnen und Differenz bilden
get_differences <- function(ctrl_df, rnase_df, ctrl_col, rnase_col) {
ctrl_means <- sapply(ctrl_df[[ctrl_col]], mean)
rnase_means <- sapply(rnase_df[[rnase_col]], mean)
return(ctrl_means - rnase_means)
}
# Berechne die Differenzvektoren für beide Gruppen
diff_selected <- get_differences(ctrl_selected, rnase_selected, "combined_max_ctrl", "combined_max_rnase")
diff_not_selected <- get_differences(ctrl_not_selected, rnase_not_selected, "combined_max_ctrl", "combined_max_rnase")
# Wilcoxon Rank-Sum Test (ungepaart)
wilcox_test_result <- wilcox.test(diff_selected, diff_not_selected)
# Ergebnis anzeigen
print(wilcox_test_result)
View(ctrl_selected)
View(rnase_selected)
View(ctrl_not_selected)
View(rnase_not_selected)
# Nur numerische Spalten behalten
pca_ctrl_numeric <- ctrl_selected[1:25, sapply(ctrl_selected, is.numeric)]
pca_rnase_numeric <- rnase_selected[1:25, sapply(rnase_selected, is.numeric)]
# Zeilen mit NAs entfernen
pca_ctrl_clean <- pca_ctrl_numeric[complete.cases(pca_ctrl_numeric), ]
pca_rnase_clean <- pca_rnase_numeric[complete.cases(pca_rnase_numeric), ]
pca_result_ctrl <- prcomp(pca_ctrl_clean, center = TRUE, scale. = TRUE, )
pca_result_rnase <- prcomp(pca_rnase_clean, center = TRUE, scale. = TRUE)
# Einfaches 2D PCA-Plot
plot(pca_result_ctrl$x[,1:2], col = "blue", pch = 16,
xlab = "PC1", ylab = "PC2", main = "PCA: PC1 vs PC2 CTRL")
plot(pca_result_rnase$x[,1:2], col = "blue", pch = 16,
xlab = "PC1", ylab = "PC2", main = "PCA: PC1 vs PC2 RNASE")
#chech which PCs have the most variance
summary(pca_result_ctrl)
summary(pca_result_rnase)
#plot PC1 with PC3
plot(pca_result_ctrl$x[,c(1, 3)], col = "blue", pch = 16,
xlab = "PC1", ylab = "PC3", main = "PCA: PC1 vs PC3 CTRL")
plot(pca_result_rnase$x[,c(1, 3)], col = "blue", pch = 16,
xlab = "PC1", ylab = "PC3", main = "PCA: PC1 vs PC3 RNASE")
#plot PC2 with PC3
plot(pca_result_ctrl$x[,2:3], col = "blue", pch = 16,
xlab = "PC2", ylab = "PC3", main = "PCA: PC2 vs PC3 CTRL")
plot(pca_result_rnase$x[,2:3], col = "blue", pch = 16,
xlab = "PC2", ylab = "PC3", main = "PCA: PC2 vs PC3 RNASE")
# Nur numerische Spalten behalten
pca_ctrl_numeric_not_selected <- ctrl_not_selected[1:25, sapply(ctrl_not_selected, is.numeric)]
pca_rnase_numeric_not_selected <- rnase_not_selected[1:25, sapply(rnase_not_selected, is.numeric)]
# Zeilen mit NAs entfernen
pca_ctrl_clean_not_selected <- pca_ctrl_numeric_not_selected[complete.cases(pca_ctrl_numeric_not_selected), ]
pca_rnase_clean_not_selected <- pca_rnase_numeric_not_selected[complete.cases(pca_rnase_numeric_not_selected), ]
pca_result_ctrl_not_selected <- prcomp(pca_ctrl_clean_not_selected, center = TRUE, scale. = TRUE, )
pca_result_rnase_not_selected <- prcomp(pca_rnase_clean_not_selected, center = TRUE, scale. = TRUE)
# Einfaches 2D PCA-Plot
plot(pca_result_ctrl_not_selected$x[,1:2], col = "blue", pch = 16,
xlab = "PC1", ylab = "PC2", main = "PCA: PC1 vs PC2 CTRL")
plot(pca_result_rnase_not_selected$x[,1:2], col = "blue", pch = 16,
xlab = "PC1", ylab = "PC2", main = "PCA: PC1 vs PC2 RNASE")
#plot PC1 with PC3
plot(pca_result_ctrl_not_selected$x[,c(1, 3)], col = "blue", pch = 16,
xlab = "PC1", ylab = "PC3", main = "PCA: PC1 vs PC3 CTRL")
plot(pca_result_rnase_not_selected$x[,c(1, 3)], col = "blue", pch = 16,
xlab = "PC1", ylab = "PC3", main = "PCA: PC1 vs PC3 RNASE")
#plot PC2 with PC3
plot(pca_result_ctrl_not_selected$x[,2:3], col = "blue", pch = 16,
xlab = "PC2", ylab = "PC3", main = "PCA: PC2 vs PC3 CTRL")
plot(pca_result_rnase_not_selected$x[,2:3], col = "blue", pch = 16,
xlab = "PC2", ylab = "PC3", main = "PCA: PC2 vs PC3 RNASE")
#Centren für kmeans clustering erkennen
#--> 3 Centren
plot(pca_result_ctrl, type = "l", main = "Elbow-Plot CTRL")
plot(pca_result_rnase, type = "l", main = "Elbow-Plot RNASE")
pca_ctrl_pc1_pc2 <- as.data.frame(pca_result_ctrl$x[, 1:2])
pca_ctrl_pc1_pc3 <- as.data.frame(pca_result_ctrl$x[, c(1,3)])
pca_ctrl_pc2_pc3 <- as.data.frame(pca_result_ctrl$x[, 2:3])
pca_rnase_pc1_pc2 <- as.data.frame(pca_result_rnase$x[, 1:2])
pca_rnase_pc1_pc3 <- as.data.frame(pca_result_rnase$x[, c(1,3)])
pca_rnase_pc2_pc3 <- as.data.frame(pca_result_rnase$x[, 2:3])
#--> Elbowe plot wird verwendet, weil silouette Methode zu viele Cluster anzeigt
library(factoextra)
fviz_nbclust(pca_ctrl_pc1_pc2, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_ctrl_pc1_pc3, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_ctrl_pc2_pc3, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC2/PC3") +
theme_minimal()
fviz_nbclust(pca_rnase_pc1_pc2, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_rnase_pc1_pc3, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC1/PC3") +
theme_minimal()
fviz_nbclust(pca_rnase_pc2_pc3, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC2/PC3") +
theme_minimal()
#kmeans wird mit 3 Centren durchgeführt
km_result_ctrl_pc1_pc2<- kmeans(pca_ctrl_pc1_pc2, centers = 3)
km_result_ctrl_pc1_pc3<- kmeans(pca_ctrl_pc1_pc3, centers = 3)
km_result_ctrl_pc2_pc3<- kmeans(pca_ctrl_pc2_pc3, centers = 3)
km_result_rnase_pc1_pc2<- kmeans(pca_rnase_pc1_pc2, centers = 3)
km_result_rnase_pc1_pc3<- kmeans(pca_rnase_pc1_pc3, centers = 3)
km_result_rnase_pc2_pc3<- kmeans(pca_rnase_pc2_pc3, centers = 3)
library(factoextra)
# pca_df enthält deine Daten, z. B. PC1 und PC2
fviz_cluster(km_result_ctrl_pc1_pc2, data = pca_ctrl_pc1_pc2,
geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),
main = "k-Means Cluster der CTRL")
fviz_cluster(km_result_ctrl_pc1_pc3, data = pca_ctrl_pc1_pc3,
geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),
main = "k-Means Cluster der CTRL")
fviz_cluster(km_result_ctrl_pc2_pc3, data = pca_ctrl_pc2_pc3,
geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),
main = "k-Means Cluster der CTRL")
fviz_cluster(km_result_rnase_pc1_pc2, data = pca_rnase_pc1_pc2,
geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),
main = "k-Means Cluster der RNASE")
fviz_cluster(km_result_rnase_pc1_pc3, data = pca_rnase_pc1_pc3,
geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),
main = "k-Means Cluster der RNASE")
fviz_cluster(km_result_rnase_pc2_pc3, data = pca_rnase_pc2_pc3,
geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),
main = "k-Means Cluster der RNASE")
#Für ctrl
#Generiert einen Plot mit den Datenpunkten der PCA und malt eine Trendlinie dadurch
plot(pca_ctrl_pc1_pc2$PC1,pca_ctrl_pc1_pc2$PC2,pch=20,col='blue', xlab='PC1',ylab='PC2');abline(0,1,col='red')
plot(pca_ctrl_pc1_pc3$PC1,pca_ctrl_pc1_pc3$PC3,pch=20,col='blue', xlab='PC1',ylab='PC3');abline(0,1,col='red')
plot(pca_ctrl_pc2_pc3$PC2,pca_ctrl_pc2_pc3$PC3,pch=20,col='blue', xlab='PC2',ylab='PC3');abline(0,1,col='red')
#Je eine PCA Komponente wird als Zielvariable definiert, also als das, was mit der Regressionsanalyse vorhergesagt werden soll
target_ctrl_pc1pc2 <- pca_ctrl_pc1_pc2$PC2
target_ctrl_pc1pc3 <- pca_ctrl_pc1_pc3$PC3
target_ctrl_pc2pc3 <- pca_ctrl_pc2_pc3$PC3
#Zusammengesetzten dataframe für Regressionsanalyse aus Zielvariable mit zwei PCA Komponenten aufbauen
df_regression_ctrl_1 <- cbind(target = target_ctrl_pc1pc2,
pca_ctrl_pc1_pc2)
df_regression_ctrl_2 <- cbind(target = target_ctrl_pc1pc3,
pca_ctrl_pc1_pc3)
df_regression_ctrl_3 <- cbind(target = target_ctrl_pc2pc3,
pca_ctrl_pc2_pc3)
#Multiple Lineare Regressionsanalyse
model_ctrl_pc1_pc2 <- lm(target ~ PC1 + PC2, data = df_regression_ctrl_1)
model_ctrl_pc1_pc3 <- lm(target ~ PC1 + PC3, data = df_regression_ctrl_2)
model_ctrl_pc2_pc3 <- lm(target ~ PC2 + PC3, data = df_regression_ctrl_3)
#Ergebnisse/Zusammenfassung anzeigen
summary(model_ctrl_pc1_pc2)
summary(model_ctrl_pc1_pc3)
summary(model_ctrl_pc2_pc3)
#Das gleiche für rnase
plot(pca_rnase_pc1_pc2$PC1,pca_rnase_pc1_pc2$PC2,pch=20,col='blue', xlab='PC1',ylab='PC2');abline(0,1,col='red')
plot(pca_rnase_pc1_pc3$PC1,pca_rnase_pc1_pc3$PC3,pch=20,col='blue', xlab='PC1',ylab='PC3');abline(0,1,col='red')
plot(pca_rnase_pc2_pc3$PC2,pca_rnase_pc2_pc3$PC3,pch=20,col='blue', xlab='PC2',ylab='PC3');abline(0,1,col='red')
target_rnase_pc1pc2 <- pca_rnase_pc1_pc2$PC2
target_rnase_pc1pc3 <- pca_rnase_pc1_pc3$PC3
target_rnase_pc2pc3 <- pca_rnase_pc2_pc3$PC3
df_regression_rnase_1 <- cbind(target = target_rnase_pc1pc2,
pca_rnase_pc1_pc2)
df_regression_rnase_2 <- cbind(target = target_rnase_pc1pc3,
pca_rnase_pc1_pc3)
df_regression_rnase_3 <- cbind(target = target_rnase_pc2pc3,
pca_rnase_pc2_pc3)
model_rnase_pc1_pc2 <- lm(target ~ PC1 + PC2, data = df_regression_rnase_1)
model_rnase_pc1_pc3 <- lm(target ~ PC1 + PC3, data = df_regression_rnase_2)
model_rnase_pc2_pc3 <- lm(target ~ PC2 + PC3, data = df_regression_rnase_3)
summary(model_rnase_pc1_pc2)
summary(model_rnase_pc1_pc3)
summary(model_rnase_pc2_pc3)
#Centren für kmeans clustering erkennen
#--> 2 Centren
plot(pca_result_ctrl_not_selected, type = "l", main = "Elbow-Plot CTRL")
plot(pca_result_rnase_not_selected, type = "l", main = "Elbow-Plot RNASE")
pca_ctrl_pc1_pc2_not_selected <- as.data.frame(pca_result_ctrl_not_selected$x[, 1:2])
pca_ctrl_pc1_pc3_not_selected <- as.data.frame(pca_result_ctrl_not_selected$x[, c(1,3)])
pca_ctrl_pc2_pc3_not_selected <- as.data.frame(pca_result_ctrl_not_selected$x[, 2:3])
pca_rnase_pc1_pc2_not_selected <- as.data.frame(pca_result_rnase_not_selected$x[, 1:2])
pca_rnase_pc1_pc3_not_selected <- as.data.frame(pca_result_rnase_not_selected$x[, c(1,3)])
pca_rnase_pc2_pc3_not_selected <- as.data.frame(pca_result_rnase_not_selected$x[, 2:3])
#--> Elbowe plot wird verwendet, weil silouette Methode zu viele Cluster anzeigt
library(factoextra)
fviz_nbclust(pca_ctrl_pc1_pc2_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_ctrl_pc1_pc3_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_ctrl_pc2_pc3_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC2/PC3") +
theme_minimal()
fviz_nbclust(pca_rnase_pc1_pc2_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_rnase_pc1_pc3_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC1/PC3") +
theme_minimal()
fviz_nbclust(pca_rnase_pc2_pc3_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC2/PC3") +
theme_minimal()
#kmeans wird mit 3 Centren durchgeführt
km_result_ctrl_pc1_pc2_not_selected<- kmeans(pca_ctrl_pc1_pc2_not_selected, centers = 2)
km_result_ctrl_pc1_pc3_not_selected<- kmeans(pca_ctrl_pc1_pc3_not_selected, centers = 2)
km_result_ctrl_pc2_pc3_not_selected<- kmeans(pca_ctrl_pc2_pc3, centers = 2)
km_result_rnase_pc1_pc2_not_selected<- kmeans(pca_rnase_pc1_pc2_not_selected, centers = 2)
km_result_rnase_pc1_pc3_not_selected<- kmeans(pca_rnase_pc1_pc3_not_selected, centers = 2)
km_result_rnase_pc2_pc3_not_selected<- kmeans(pca_rnase_pc2_pc3_not_selected, centers = 2)
library(factoextra)
# pca_df enthält deine Daten, z. B. PC1 und PC2
fviz_cluster(km_result_ctrl_pc1_pc2_not_selected, data = pca_ctrl_pc1_pc2,
geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),
main = "k-Means Cluster der CTRL")
fviz_cluster(km_result_ctrl_pc1_pc3_not_selected, data = pca_ctrl_pc1_pc3,
geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),
main = "k-Means Cluster der CTRL")
fviz_cluster(km_result_ctrl_pc2_pc3_not_selected, data = pca_ctrl_pc2_pc3,
geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),
main = "k-Means Cluster der CTRL")
fviz_cluster(km_result_rnase_pc1_pc2_not_selected, data = pca_rnase_pc1_pc2,
geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),
main = "k-Means Cluster der RNASE")
fviz_cluster(km_result_rnase_pc1_pc3_not_selected, data = pca_rnase_pc1_pc3,
geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),
main = "k-Means Cluster der RNASE")
fviz_cluster(km_result_rnase_pc2_pc3_not_selected, data = pca_rnase_pc2_pc3,
geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal(),
main = "k-Means Cluster der RNASE")
#Für ctrl
#Generiert einen Plot mit den Datenpunkten der PCA und malt eine Trendlinie dadurch
plot(pca_ctrl_pc1_pc2_not_selected$PC1,pca_ctrl_pc1_pc2_not_selected$PC2,pch=20,col='blue', xlab='PC1',ylab='PC2');abline(0,1,col='red')
plot(pca_ctrl_pc1_pc3_not_selected$PC1,pca_ctrl_pc1_pc3_not_selected$PC3,pch=20,col='blue', xlab='PC1',ylab='PC3');abline(0,1,col='red')
plot(pca_ctrl_pc2_pc3_not_selected$PC2,pca_ctrl_pc2_pc3_not_selected$PC3,pch=20,col='blue', xlab='PC2',ylab='PC3');abline(0,1,col='red')
#Je eine PCA Komponente wird als Zielvariable definiert, also als das, was mit der Regressionsanalyse vorhergesagt werden soll
target_ctrl_pc1pc2_not_selected <- pca_ctrl_pc1_pc2_not_selected$PC2
target_ctrl_pc1pc3_not_selected <- pca_ctrl_pc1_pc3_not_selected$PC3
target_ctrl_pc2pc3_not_selected <- pca_ctrl_pc2_pc3_not_selected$PC3
#Zusammengesetzten dataframe für Regressionsanalyse aus Zielvariable mit zwei PCA Komponenten aufbauen
df_regression_ctrl_1_not_selected <- cbind(target = target_ctrl_pc1pc2_not_selected,
pca_ctrl_pc1_pc2_not_selected)
df_regression_ctrl_2_not_selected <- cbind(target = target_ctrl_pc1pc3_not_selected,
pca_ctrl_pc1_pc3_not_selected)
df_regression_ctrl_3_not_selected <- cbind(target = target_ctrl_pc2pc3_not_selected,
pca_ctrl_pc2_pc3_not_selected)
#Multiple Lineare Regressionsanalyse
model_ctrl_pc1_pc2_not_selected <- lm(target ~ PC1 + PC2, data = df_regression_ctrl_1_not_selected)
model_ctrl_pc1_pc3_not_selected <- lm(target ~ PC1 + PC3, data = df_regression_ctrl_2_not_selected)
model_ctrl_pc2_pc3_not_selected <- lm(target ~ PC2 + PC3, data = df_regression_ctrl_3_not_selected)
#Ergebnisse/Zusammenfassung anzeigen
summary(model_ctrl_pc1_pc2_not_selected)
summary(model_ctrl_pc1_pc3_not_selected)
summary(model_ctrl_pc2_pc3_not_selected)
#Das gleiche für rnase
plot(pca_rnase_pc1_pc2_not_selected$PC1,pca_rnase_pc1_pc2_not_selected$PC2,pch=20,col='blue', xlab='PC1',ylab='PC2');abline(0,1,col='red')
plot(pca_rnase_pc1_pc3_not_selected$PC1,pca_rnase_pc1_pc3_not_selected$PC3,pch=20,col='blue', xlab='PC1',ylab='PC3');abline(0,1,col='red')
plot(pca_rnase_pc2_pc3_not_selected$PC2,pca_rnase_pc2_pc3_not_selected$PC3,pch=20,col='blue', xlab='PC2',ylab='PC3');abline(0,1,col='red')
target_rnase_pc1pc2_not_selected <- pca_rnase_pc1_pc2_not_selected$PC2
target_rnase_pc1pc3_not_selected <- pca_rnase_pc1_pc3_not_selected$PC3
target_rnase_pc2pc3_not_selected <- pca_rnase_pc2_pc3_not_selected$PC3
df_regression_rnase_1_not_selected <- cbind(target = target_rnase_pc1pc2_not_selected,
pca_rnase_pc1_pc2_not_selected)
df_regression_rnase_2_not_selected <- cbind(target = target_rnase_pc1pc3_not_selected,
pca_rnase_pc1_pc3_not_selected)
df_regression_rnase_3_not_selected <- cbind(target = target_rnase_pc2pc3_not_selected,
pca_rnase_pc2_pc3_not_selected)
model_rnase_pc1_pc2_not_selected <- lm(target ~ PC1 + PC2, data = df_regression_rnase_1_not_selected)
model_rnase_pc1_pc3_not_selected <- lm(target ~ PC1 + PC3, data = df_regression_rnase_2_not_selected)
model_rnase_pc2_pc3_not_selected <- lm(target ~ PC2 + PC3, data = df_regression_rnase_3_not_selected)
summary(model_rnase_pc1_pc2_not_selected)
summary(model_rnase_pc1_pc3_not_selected)
summary(model_rnase_pc2_pc3_not_selected)
