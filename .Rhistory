table.frxn23.RNASE <- table.frxn23[,data3$levels_CR == "RNASE"]
table.frxn24.CTRL <- table.frxn24[,data3$levels_CR == "CTRL"]
table.frxn24.RNASE <- table.frxn24[,data3$levels_CR == "RNASE"]
table.frxn25.CTRL <- table.frxn25[,data3$levels_CR == "CTRL"]
table.frxn25.RNASE <- table.frxn25[,data3$levels_CR == "RNASE"]
View(table.frxn25.RNASE)
fraction.tables <- lapply(paste("fraction", 1:25, sep = ""), function(fx) {NS_Table[, colmns_sorted$fraction == fx]})
names(fraction.tables) <- paste("fraction", 1:25, sep = "")
# Liste mit nur CTRL-Spalten für jede Fraktion
fraction.tables.CTRL <- lapply(fraction.tables, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "CTRL"))
NS_Table[, cols, drop = FALSE]
})
# Liste mit nur RNASE-Spalten für jede Fraktion
fraction.tables.RNASE <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "RNASE"))
NS_Table[, cols, drop = FALSE]})
names(fraction.tables.CTRL) <- selected_proteins
names(fraction.tables.RNASE) <- selected_proteins
View(fraction.tables.CTRL[["fraction3"]])
fraction.tables <- lapply(paste("fraction", 1:25, sep = ""), function(fx) {NS_Table[, colmns_sorted$fraction == fx]})
names(fraction.tables) <- paste("fraction", 1:25, sep = "")
selected_proteins <- names(fraction.tables)
fraction.tables <- lapply(paste("fraction", 1:25, sep = ""), function(fx) {NS_Table[, colmns_sorted$fraction == fx]})
names(fraction.tables) <- paste("fraction", 1:25, sep = "")
selected_proteins <- names(fraction.tables)
# Liste mit nur CTRL-Spalten für jede Fraktion
fraction.tables.CTRL <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "CTRL"))
NS_Table[, cols, drop = FALSE]
})
# Liste mit nur RNASE-Spalten für jede Fraktion
fraction.tables.RNASE <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "RNASE"))
NS_Table[, cols, drop = FALSE]})
names(fraction.tables.CTRL) <- selected_proteins
names(fraction.tables.RNASE) <- selected_proteins
View(fraction.tables.CTRL[["fraction3"]])
fraction.tables <- lapply(paste("fraction", 1:25, sep = ""), function(fx) {NS_Table[, colmns_sorted$fraction == fx]})
# Liste mit nur CTRL-Spalten für jede Fraktion
fraction.tables.CTRL <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "CTRL"))
NS_Table[, cols, drop = FALSE]
})
# Liste mit nur RNASE-Spalten für jede Fraktion
fraction.tables.RNASE <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "RNASE"))
NS_Table[, cols, drop = FALSE]})
names(fraction.tables.CTRL) <- selected_proteins
names(fraction.tables.RNASE) <- selected_proteins
View(fraction.tables.CTRL[["fraction3"]])
fraction.tables <- lapply(paste("fraction", 1:25, sep = ""), function(fx) {NS_Table[, colmns_sorted$fraction == fx]})
# Liste mit nur CTRL-Spalten für jede Fraktion
fraction.tables.CTRL <- lapply(fraction.tables, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "CTRL"))
NS_Table[, cols, drop = FALSE]
})
# Liste mit nur RNASE-Spalten für jede Fraktion
fraction.tables.RNASE <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "RNASE"))
NS_Table[, cols, drop = FALSE]})
names(fraction.tables.CTRL) <- selected_proteins
names(fraction.tables.RNASE) <- selected_proteins
View(fraction.tables.CTRL[["fraction3"]])
fraction.tables <- lapply(paste("fraction", 1:25, sep = ""), function(fx) {NS_Table[, colmns_sorted$fraction == fx]})
selected_proteins <- names(fraction.tables)
# Liste mit nur CTRL-Spalten für jede Fraktion
fraction.tables.CTRL <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "CTRL"))
NS_Table[, cols, drop = FALSE]
})
# Liste mit nur RNASE-Spalten für jede Fraktion
fraction.tables.RNASE <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "RNASE"))
NS_Table[, cols, drop = FALSE]})
names(fraction.tables.CTRL) <- selected_proteins
names(fraction.tables.RNASE) <- selected_proteins
View(fraction.tables.CTRL[["fraction3"]])
fraction.tables <- lapply(paste("fraction", 1:25, sep = ""), function(fx) {NS_Table[, colmns_sorted$fraction == fx]})
names(fraction.tables) <- paste("fraction", 1:25, sep = "")
selected_proteins <- names(fraction.tables)
# Liste mit nur CTRL-Spalten für jede Fraktion
fraction.tables.CTRL <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "CTRL"))
NS_Table[, cols, drop = FALSE]
})
# Liste mit nur RNASE-Spalten für jede Fraktion
fraction.tables.RNASE <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "RNASE"))
NS_Table[, cols, drop = FALSE]})
names(fraction.tables.CTRL) <- selected_proteins
names(fraction.tables.RNASE) <- selected_proteins
View(fraction.tables.CTRL[["fraction3"]])
# Liste mit nur CTRL-Spalten für jede Fraktion
fraction.tables.CTRL <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "CTRL"))
NS_Table[, cols, drop = FALSE]
})
# Liste mit nur RNASE-Spalten für jede Fraktion
fraction.tables.RNASE <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "RNASE"))
NS_Table[, cols, drop = FALSE]})
names(fraction.tables.CTRL) <- selected_proteins
names(fraction.tables.RNASE) <- selected_proteins
View(fraction.tables.CTRL[["fraction3"]])
# Re-define the information for the fraction subtables (dataframe named "data3") and create one table per treatment and per fraction. Here there are 50 subtables in total
# A new table is defined for each fraction, containing 3 replicates of either CTRL or RNASE.
# CODE: data3 serves as an auxiliary table used to more easily select the correct columns of CTRL or RNASE replicates for the new tables.
data3 <- data.frame(row.names=colnames(table.frxn1), levels_CR = rep(c("CTRL", "RNASE"),3), levels_fraction = c("ctrl1","rnase1","ctrl2","rnase2","ctrl3","rnase3"))
table.frxn1.CTRL <- table.frxn1[,data3$levels_CR == "CTRL"]
table.frxn1.RNASE <- table.frxn1[,data3$levels_CR == "RNASE"]
table.frxn2.CTRL <- table.frxn2[,data3$levels_CR == "CTRL"]
table.frxn2.RNASE <- table.frxn2[,data3$levels_CR == "RNASE"]
table.frxn3.CTRL <- table.frxn3[,data3$levels_CR == "CTRL"]
table.frxn3.RNASE <- table.frxn3[,data3$levels_CR == "RNASE"]
table.frxn4.CTRL <- table.frxn4[,data3$levels_CR == "CTRL"]
table.frxn4.RNASE <- table.frxn4[,data3$levels_CR == "RNASE"]
table.frxn5.CTRL <- table.frxn5[,data3$levels_CR == "CTRL"]
table.frxn5.RNASE <- table.frxn5[,data3$levels_CR == "RNASE"]
table.frxn6.CTRL <- table.frxn6[,data3$levels_CR == "CTRL"]
table.frxn6.RNASE <- table.frxn6[,data3$levels_CR == "RNASE"]
table.frxn7.CTRL <- table.frxn7[,data3$levels_CR == "CTRL"]
table.frxn7.RNASE <- table.frxn7[,data3$levels_CR == "RNASE"]
table.frxn8.CTRL <- table.frxn8[,data3$levels_CR == "CTRL"]
table.frxn8.RNASE <- table.frxn8[,data3$levels_CR == "RNASE"]
table.frxn9.CTRL <- table.frxn9[,data3$levels_CR == "CTRL"]
table.frxn9.RNASE <- table.frxn9[,data3$levels_CR == "RNASE"]
table.frxn10.CTRL <- table.frxn10[,data3$levels_CR == "CTRL"]
table.frxn10.RNASE <- table.frxn10[,data3$levels_CR == "RNASE"]
table.frxn11.CTRL <- table.frxn11[,data3$levels_CR == "CTRL"]
table.frxn11.RNASE <- table.frxn11[,data3$levels_CR == "RNASE"]
table.frxn12.CTRL <- table.frxn12[,data3$levels_CR == "CTRL"]
table.frxn12.RNASE <- table.frxn12[,data3$levels_CR == "RNASE"]
table.frxn13.CTRL <- table.frxn13[,data3$levels_CR == "CTRL"]
table.frxn13.RNASE <- table.frxn13[,data3$levels_CR == "RNASE"]
table.frxn14.CTRL <- table.frxn14[,data3$levels_CR == "CTRL"]
table.frxn14.RNASE <- table.frxn14[,data3$levels_CR == "RNASE"]
table.frxn15.CTRL <- table.frxn15[,data3$levels_CR == "CTRL"]
table.frxn15.RNASE <- table.frxn15[,data3$levels_CRt == "RNASE"]
table.frxn16.CTRL <- table.frxn16[,data3$levels_CR == "CTRL"]
table.frxn16.RNASE <- table.frxn16[,data3$levels_CR == "RNASE"]
table.frxn17.CTRL <- table.frxn17[,data3$levels_CR == "CTRL"]
table.frxn17.RNASE <- table.frxn17[,data3$levels_CR == "RNASE"]
table.frxn18.CTRL <- table.frxn18[,data3$levels_CR == "CTRL"]
table.frxn18.RNASE <- table.frxn18[,data3$levels_CR == "RNASE"]
table.frxn19.CTRL <- table.frxn19[,data3$levels_CR == "CTRL"]
table.frxn19.RNASE <- table.frxn19[,data3$levels_CR == "RNASE"]
table.frxn20.CTRL <- table.frxn20[,data3$levels_CR == "CTRL"]
table.frxn20.RNASE <- table.frxn20[,data3$levels_CR == "RNASE"]
table.frxn21.CTRL <- table.frxn21[,data3$tlevels_CR == "CTRL"]
table.frxn21.RNASE <- table.frxn21[,data3$levels_CR == "RNASE"]
table.frxn22.CTRL <- table.frxn22[,data3$levels_CR == "CTRL"]
table.frxn22.RNASE <- table.frxn22[,data3$levels_CR == "RNASE"]
table.frxn23.CTRL <- table.frxn23[,data3$levels_CR == "CTRL"]
table.frxn23.RNASE <- table.frxn23[,data3$levels_CR == "RNASE"]
table.frxn24.CTRL <- table.frxn24[,data3$levels_CR == "CTRL"]
table.frxn24.RNASE <- table.frxn24[,data3$levels_CR == "RNASE"]
table.frxn25.CTRL <- table.frxn25[,data3$levels_CR == "CTRL"]
table.frxn25.RNASE <- table.frxn25[,data3$levels_CR == "RNASE"]
View(table.frxn25.RNASE)
# Determine average values for each treatment, each fraction and each replicate. Here, the values for the three replicates are stored in the same table
# Each vector contains the average protein value across all proteins for each of its 3 replicates.
avg.table.frxn1.CTRL <- sapply(table.frxn1.CTRL, function(x) mean(x))
avg.table.frxn2.CTRL <- sapply(table.frxn2.CTRL, function(x) mean(x))
avg.table.frxn3.CTRL <- sapply(table.frxn3.CTRL, function(x) mean(x))
avg.table.frxn4.CTRL <- sapply(table.frxn4.CTRL, function(x) mean(x))
avg.table.frxn5.CTRL <- sapply(table.frxn5.CTRL, function(x) mean(x))
avg.table.frxn6.CTRL <- sapply(table.frxn6.CTRL, function(x) mean(x))
avg.table.frxn7.CTRL <- sapply(table.frxn7.CTRL, function(x) mean(x))
avg.table.frxn8.CTRL <- sapply(table.frxn8.CTRL, function(x) mean(x))
avg.table.frxn9.CTRL <- sapply(table.frxn9.CTRL, function(x) mean(x))
avg.table.frxn10.CTRL <- sapply(table.frxn10.CTRL, function(x) mean(x))
avg.table.frxn11.CTRL <- sapply(table.frxn11.CTRL, function(x) mean(x))
avg.table.frxn12.CTRL <- sapply(table.frxn12.CTRL, function(x) mean(x))
avg.table.frxn13.CTRL <- sapply(table.frxn13.CTRL, function(x) mean(x))
avg.table.frxn14.CTRL <- sapply(table.frxn14.CTRL, function(x) mean(x))
avg.table.frxn15.CTRL <- sapply(table.frxn15.CTRL, function(x) mean(x))
avg.table.frxn16.CTRL <- sapply(table.frxn16.CTRL, function(x) mean(x))
avg.table.frxn17.CTRL <- sapply(table.frxn17.CTRL, function(x) mean(x))
avg.table.frxn18.CTRL <- sapply(table.frxn18.CTRL, function(x) mean(x))
avg.table.frxn19.CTRL <- sapply(table.frxn19.CTRL, function(x) mean(x))
avg.table.frxn20.CTRL <- sapply(table.frxn20.CTRL, function(x) mean(x))
avg.table.frxn21.CTRL <- sapply(table.frxn21.CTRL, function(x) mean(x))
avg.table.frxn22.CTRL <- sapply(table.frxn22.CTRL, function(x) mean(x))
avg.table.frxn23.CTRL <- sapply(table.frxn23.CTRL, function(x) mean(x))
avg.table.frxn24.CTRL <- sapply(table.frxn24.CTRL, function(x) mean(x))
avg.table.frxn25.CTRL <- sapply(table.frxn25.CTRL, function(x) mean(x))
avg.table.frxn1.RNASE <- sapply(table.frxn1.RNASE, function(x) mean(x))
avg.table.frxn2.RNASE <- sapply(table.frxn2.RNASE, function(x) mean(x))
avg.table.frxn3.RNASE <- sapply(table.frxn3.RNASE, function(x) mean(x))
avg.table.frxn4.RNASE <- sapply(table.frxn4.RNASE, function(x) mean(x))
avg.table.frxn5.RNASE <- sapply(table.frxn5.RNASE, function(x) mean(x))
avg.table.frxn6.RNASE <- sapply(table.frxn6.RNASE, function(x) mean(x))
avg.table.frxn7.RNASE <- sapply(table.frxn7.RNASE, function(x) mean(x))
avg.table.frxn8.RNASE <- sapply(table.frxn8.RNASE, function(x) mean(x))
avg.table.frxn9.RNASE <- sapply(table.frxn9.RNASE, function(x) mean(x))
avg.table.frxn10.RNASE <- sapply(table.frxn10.RNASE, function(x) mean(x))
avg.table.frxn11.RNASE <- sapply(table.frxn11.RNASE, function(x) mean(x))
avg.table.frxn12.RNASE <- sapply(table.frxn12.RNASE, function(x) mean(x))
avg.table.frxn13.RNASE <- sapply(table.frxn13.RNASE, function(x) mean(x))
avg.table.frxn14.RNASE <- sapply(table.frxn14.RNASE, function(x) mean(x))
avg.table.frxn15.RNASE <- sapply(table.frxn15.RNASE, function(x) mean(x))
avg.table.frxn16.RNASE <- sapply(table.frxn16.RNASE, function(x) mean(x))
avg.table.frxn17.RNASE <- sapply(table.frxn17.RNASE, function(x) mean(x))
avg.table.frxn18.RNASE <- sapply(table.frxn18.RNASE, function(x) mean(x))
avg.table.frxn19.RNASE <- sapply(table.frxn19.RNASE, function(x) mean(x))
avg.table.frxn20.RNASE <- sapply(table.frxn20.RNASE, function(x) mean(x))
avg.table.frxn21.RNASE <- sapply(table.frxn21.RNASE, function(x) mean(x))
avg.table.frxn22.RNASE <- sapply(table.frxn22.RNASE, function(x) mean(x))
avg.table.frxn23.RNASE <- sapply(table.frxn23.RNASE, function(x) mean(x))
avg.table.frxn24.RNASE <- sapply(table.frxn24.RNASE, function(x) mean(x))
avg.table.frxn25.RNASE <- sapply(table.frxn25.RNASE, function(x) mean(x))
View(avg.table.frxn25.RNASE)
# Determine average values for each treatment, each fraction and each replicate. Here, the values for the three replicates are stored in the same table
# Each vector contains the average protein value across all proteins for each of its 3 replicates.
avg.table.frxn1.CTRL <- sapply(table.frxn1.CTRL, function(x) mean(x))
avg.table.frxn2.CTRL <- sapply(table.frxn2.CTRL, function(x) mean(x))
avg.table.frxn3.CTRL <- sapply(table.frxn3.CTRL, function(x) mean(x))
avg.table.frxn4.CTRL <- sapply(table.frxn4.CTRL, function(x) mean(x))
avg.table.frxn5.CTRL <- sapply(table.frxn5.CTRL, function(x) mean(x))
avg.table.frxn6.CTRL <- sapply(table.frxn6.CTRL, function(x) mean(x))
avg.table.frxn7.CTRL <- sapply(table.frxn7.CTRL, function(x) mean(x))
avg.table.frxn8.CTRL <- sapply(table.frxn8.CTRL, function(x) mean(x))
avg.table.frxn9.CTRL <- sapply(table.frxn9.CTRL, function(x) mean(x))
avg.table.frxn10.CTRL <- sapply(table.frxn10.CTRL, function(x) mean(x))
avg.table.frxn11.CTRL <- sapply(table.frxn11.CTRL, function(x) mean(x))
avg.table.frxn12.CTRL <- sapply(table.frxn12.CTRL, function(x) mean(x))
avg.table.frxn13.CTRL <- sapply(table.frxn13.CTRL, function(x) mean(x))
avg.table.frxn14.CTRL <- sapply(table.frxn14.CTRL, function(x) mean(x))
avg.table.frxn15.CTRL <- sapply(table.frxn15.CTRL, function(x) mean(x))
avg.table.frxn16.CTRL <- sapply(table.frxn16.CTRL, function(x) mean(x))
avg.table.frxn17.CTRL <- sapply(table.frxn17.CTRL, function(x) mean(x))
avg.table.frxn18.CTRL <- sapply(table.frxn18.CTRL, function(x) mean(x))
avg.table.frxn19.CTRL <- sapply(table.frxn19.CTRL, function(x) mean(x))
avg.table.frxn20.CTRL <- sapply(table.frxn20.CTRL, function(x) mean(x))
avg.table.frxn21.CTRL <- sapply(table.frxn21.CTRL, function(x) mean(x))
avg.table.frxn22.CTRL <- sapply(table.frxn22.CTRL, function(x) mean(x))
avg.table.frxn23.CTRL <- sapply(table.frxn23.CTRL, function(x) mean(x))
avg.table.frxn24.CTRL <- sapply(table.frxn24.CTRL, function(x) mean(x))
avg.table.frxn25.CTRL <- sapply(table.frxn25.CTRL, function(x) mean(x))
avg.table.frxn1.RNASE <- sapply(table.frxn1.RNASE, function(x) mean(x))
avg.table.frxn2.RNASE <- sapply(table.frxn2.RNASE, function(x) mean(x))
avg.table.frxn3.RNASE <- sapply(table.frxn3.RNASE, function(x) mean(x))
avg.table.frxn4.RNASE <- sapply(table.frxn4.RNASE, function(x) mean(x))
avg.table.frxn5.RNASE <- sapply(table.frxn5.RNASE, function(x) mean(x))
avg.table.frxn6.RNASE <- sapply(table.frxn6.RNASE, function(x) mean(x))
avg.table.frxn7.RNASE <- sapply(table.frxn7.RNASE, function(x) mean(x))
avg.table.frxn8.RNASE <- sapply(table.frxn8.RNASE, function(x) mean(x))
avg.table.frxn9.RNASE <- sapply(table.frxn9.RNASE, function(x) mean(x))
avg.table.frxn10.RNASE <- sapply(table.frxn10.RNASE, function(x) mean(x))
avg.table.frxn11.RNASE <- sapply(table.frxn11.RNASE, function(x) mean(x))
avg.table.frxn12.RNASE <- sapply(table.frxn12.RNASE, function(x) mean(x))
avg.table.frxn13.RNASE <- sapply(table.frxn13.RNASE, function(x) mean(x))
avg.table.frxn14.RNASE <- sapply(table.frxn14.RNASE, function(x) mean(x))
avg.table.frxn15.RNASE <- sapply(table.frxn15.RNASE, function(x) mean(x))
avg.table.frxn16.RNASE <- sapply(table.frxn16.RNASE, function(x) mean(x))
avg.table.frxn17.RNASE <- sapply(table.frxn17.RNASE, function(x) mean(x))
avg.table.frxn18.RNASE <- sapply(table.frxn18.RNASE, function(x) mean(x))
avg.table.frxn19.RNASE <- sapply(table.frxn19.RNASE, function(x) mean(x))
avg.table.frxn20.RNASE <- sapply(table.frxn20.RNASE, function(x) mean(x))
avg.table.frxn21.RNASE <- sapply(table.frxn21.RNASE, function(x) mean(x))
avg.table.frxn22.RNASE <- sapply(table.frxn22.RNASE, function(x) mean(x))
avg.table.frxn23.RNASE <- sapply(table.frxn23.RNASE, function(x) mean(x))
avg.table.frxn24.RNASE <- sapply(table.frxn24.RNASE, function(x) mean(x))
avg.table.frxn25.RNASE <- sapply(table.frxn25.RNASE, function(x) mean(x))
avg.table.frxn25.RNASE
# Determine normalization factor for each condition (i.e. sample), as the mean of the 2 most similar replicates.
# Create a function norm_fact for this step:
norm_fact <- function(x) {
if( (abs(x[1]-x[2])<abs(x[1]-x[3])) && (abs(x[1]-x[2])<abs(x[2]-x[3])) )
{mean(c(x[1],x[2]))} else if( (abs(x[1]-x[3])<abs(x[1]-x[2])) && (abs(x[1]-x[3])<abs(x[2]-x[3])) )
{mean(c(x[1],x[3]))} else {mean(c(x[2],x[3]))}
}
# Determine the normalization factor for very replicate for the CTRL fractions and for the RNASE fractions
# Normalization factors are calculated by dividing the mean of the two most similar replicates by the average protein value across all proteins for each of the three replicates.
# -> Reduces the influence of outlier replicates and ensures more robust normalization
norm_mean_frxn1_CTRL <-  norm_fact(avg.table.frxn1.CTRL)/avg.table.frxn1.CTRL
norm_mean_frxn2_CTRL <-  norm_fact(avg.table.frxn2.CTRL)/avg.table.frxn2.CTRL
norm_mean_frxn3_CTRL <-  norm_fact(avg.table.frxn3.CTRL)/avg.table.frxn3.CTRL
norm_mean_frxn4_CTRL <-  norm_fact(avg.table.frxn4.CTRL)/avg.table.frxn4.CTRL
norm_mean_frxn5_CTRL <-  norm_fact(avg.table.frxn5.CTRL)/avg.table.frxn5.CTRL
norm_mean_frxn6_CTRL <-  norm_fact(avg.table.frxn6.CTRL)/avg.table.frxn6.CTRL
norm_mean_frxn7_CTRL <-  norm_fact(avg.table.frxn7.CTRL)/avg.table.frxn7.CTRL
norm_mean_frxn8_CTRL <-  norm_fact(avg.table.frxn8.CTRL)/avg.table.frxn8.CTRL
norm_mean_frxn9_CTRL <-  norm_fact(avg.table.frxn9.CTRL)/avg.table.frxn9.CTRL
norm_mean_frxn10_CTRL <-  norm_fact(avg.table.frxn10.CTRL)/avg.table.frxn10.CTRL
norm_mean_frxn11_CTRL <-  norm_fact(avg.table.frxn11.CTRL)/avg.table.frxn11.CTRL
norm_mean_frxn12_CTRL <-  norm_fact(avg.table.frxn12.CTRL)/avg.table.frxn12.CTRL
norm_mean_frxn13_CTRL <-  norm_fact(avg.table.frxn13.CTRL)/avg.table.frxn13.CTRL
norm_mean_frxn14_CTRL <-  norm_fact(avg.table.frxn14.CTRL)/avg.table.frxn14.CTRL
norm_mean_frxn15_CTRL <-  norm_fact(avg.table.frxn15.CTRL)/avg.table.frxn15.CTRL
norm_mean_frxn16_CTRL <-  norm_fact(avg.table.frxn16.CTRL)/avg.table.frxn16.CTRL
norm_mean_frxn17_CTRL <-  norm_fact(avg.table.frxn17.CTRL)/avg.table.frxn17.CTRL
norm_mean_frxn18_CTRL <-  norm_fact(avg.table.frxn18.CTRL)/avg.table.frxn18.CTRL
norm_mean_frxn19_CTRL <-  norm_fact(avg.table.frxn19.CTRL)/avg.table.frxn19.CTRL
norm_mean_frxn20_CTRL <-  norm_fact(avg.table.frxn20.CTRL)/avg.table.frxn20.CTRL
norm_mean_frxn21_CTRL <-  norm_fact(avg.table.frxn21.CTRL)/avg.table.frxn21.CTRL
# Determine the normalization factor for very replicate for the CTRL fractions and for the RNASE fractions
# Normalization factors are calculated by dividing the mean of the two most similar replicates by the average protein value across all proteins for each of the three replicates.
# -> Reduces the influence of outlier replicates and ensures more robust normalization
norm_mean_frxn1_CTRL <-  norm_fact(avg.table.frxn1.CTRL)/avg.table.frxn1.CTRL
norm_mean_frxn2_CTRL <-  norm_fact(avg.table.frxn2.CTRL)/avg.table.frxn2.CTRL
norm_mean_frxn3_CTRL <-  norm_fact(avg.table.frxn3.CTRL)/avg.table.frxn3.CTRL
norm_mean_frxn4_CTRL <-  norm_fact(avg.table.frxn4.CTRL)/avg.table.frxn4.CTRL
norm_mean_frxn5_CTRL <-  norm_fact(avg.table.frxn5.CTRL)/avg.table.frxn5.CTRL
norm_mean_frxn6_CTRL <-  norm_fact(avg.table.frxn6.CTRL)/avg.table.frxn6.CTRL
norm_mean_frxn7_CTRL <-  norm_fact(avg.table.frxn7.CTRL)/avg.table.frxn7.CTRL
norm_mean_frxn8_CTRL <-  norm_fact(avg.table.frxn8.CTRL)/avg.table.frxn8.CTRL
norm_mean_frxn9_CTRL <-  norm_fact(avg.table.frxn9.CTRL)/avg.table.frxn9.CTRL
norm_mean_frxn10_CTRL <-  norm_fact(avg.table.frxn10.CTRL)/avg.table.frxn10.CTRL
norm_mean_frxn11_CTRL <-  norm_fact(avg.table.frxn11.CTRL)/avg.table.frxn11.CTRL
norm_mean_frxn12_CTRL <-  norm_fact(avg.table.frxn12.CTRL)/avg.table.frxn12.CTRL
norm_mean_frxn13_CTRL <-  norm_fact(avg.table.frxn13.CTRL)/avg.table.frxn13.CTRL
norm_mean_frxn14_CTRL <-  norm_fact(avg.table.frxn14.CTRL)/avg.table.frxn14.CTRL
norm_mean_frxn15_CTRL <-  norm_fact(avg.table.frxn15.CTRL)/avg.table.frxn15.CTRL
norm_mean_frxn16_CTRL <-  norm_fact(avg.table.frxn16.CTRL)/avg.table.frxn16.CTRL
norm_mean_frxn17_CTRL <-  norm_fact(avg.table.frxn17.CTRL)/avg.table.frxn17.CTRL
norm_mean_frxn18_CTRL <-  norm_fact(avg.table.frxn18.CTRL)/avg.table.frxn18.CTRL
norm_mean_frxn19_CTRL <-  norm_fact(avg.table.frxn19.CTRL)/avg.table.frxn19.CTRL
norm_mean_frxn20_CTRL <-  norm_fact(avg.table.frxn20.CTRL)/avg.table.frxn20.CTRL
norm_mean_frxn21_CTRL <-  norm_fact(avg.table.frxn21.CTRL)/avg.table.frxn21.CTRL
# Determine normalization factor for each condition (i.e. sample), as the mean of the 2 most similar replicates.
# Create a function norm_fact for this step:
norm_fact <- function(x) {
if( (abs(x[1]-x[2])<abs(x[1]-x[3])) && (abs(x[1]-x[2])<abs(x[2]-x[3])) )
{mean(c(x[1],x[2]))} else if( (abs(x[1]-x[3])<abs(x[1]-x[2])) && (abs(x[1]-x[3])<abs(x[2]-x[3])) )
{mean(c(x[1],x[3]))} else {mean(c(x[2],x[3]))}
}
norm_fact[[25]]
# Determine normalization factor for each condition (i.e. sample), as the mean of the 2 most similar replicates.
# Create a function norm_fact for this step:
norm_fact <- function(x) {
if( (abs(x[1]-x[2])<abs(x[1]-x[3])) && (abs(x[1]-x[2])<abs(x[2]-x[3])) )
{mean(c(x[1],x[2]))} else if( (abs(x[1]-x[3])<abs(x[1]-x[2])) && (abs(x[1]-x[3])<abs(x[2]-x[3])) )
{mean(c(x[1],x[3]))} else {mean(c(x[2],x[3]))}
}
norm_fact(25)
# Determine normalization factor for each condition (i.e. sample), as the mean of the 2 most similar replicates.
# Create a function norm_fact for this step:
norm_fact <- function(x) {
if( (abs(x[1]-x[2])<abs(x[1]-x[3])) && (abs(x[1]-x[2])<abs(x[2]-x[3])) )
{mean(c(x[1],x[2]))} else if( (abs(x[1]-x[3])<abs(x[1]-x[2])) && (abs(x[1]-x[3])<abs(x[2]-x[3])) )
{mean(c(x[1],x[3]))} else {mean(c(x[2],x[3]))}
}
result <- norm_fact(x)
# Determine normalization factor for each condition (i.e. sample), as the mean of the 2 most similar replicates.
# Create a function norm_fact for this step:
norm_fact(x) <- function(x) {
if( (abs(x[1]-x[2])<abs(x[1]-x[3])) && (abs(x[1]-x[2])<abs(x[2]-x[3])) )
{mean(c(x[1],x[2]))} else if( (abs(x[1]-x[3])<abs(x[1]-x[2])) && (abs(x[1]-x[3])<abs(x[2]-x[3])) )
{mean(c(x[1],x[3]))} else {mean(c(x[2],x[3]))}
}
# Determine normalization factor for each condition (i.e. sample), as the mean of the 2 most similar replicates.
# Create a function norm_fact for this step:
norm_fact <- function(x) {
if( (abs(x[1]-x[2])<abs(x[1]-x[3])) && (abs(x[1]-x[2])<abs(x[2]-x[3])) )
{mean(c(x[1],x[2]))} else if( (abs(x[1]-x[3])<abs(x[1]-x[2])) && (abs(x[1]-x[3])<abs(x[2]-x[3])) )
{mean(c(x[1],x[3]))} else {mean(c(x[2],x[3]))}
}
print(norm_fact)
# Determine normalization factor for each condition (i.e. sample), as the mean of the 2 most similar replicates.
# Create a function norm_fact for this step:
norm_fact <- function(x) {
if( (abs(x[1]-x[2])<abs(x[1]-x[3])) && (abs(x[1]-x[2])<abs(x[2]-x[3])) )
{mean(c(x[1],x[2]))} else if( (abs(x[1]-x[3])<abs(x[1]-x[2])) && (abs(x[1]-x[3])<abs(x[2]-x[3])) )
{mean(c(x[1],x[3]))} else {mean(c(x[2],x[3]))}
}
print(norm_fact(avg.table.frxn25.RNASE))
# Liste mit nur CTRL-Spalten für jede Fraktion
fraction.tables.CTRL <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "CTRL"))
NS_Table[, cols, drop = FALSE]
})
# Liste mit nur RNASE-Spalten für jede Fraktion
fraction.tables.RNASE <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "RNASE"))
NS_Table[, cols, drop = FALSE]})
names(fraction.tables.CTRL) <- selected_proteins
names(fraction.tables.RNASE) <- selected_proteins
View(fraction.tables.CTRL[["fraction3"]])
avg.table.frxn1.CTRL <- sapply(fraction.tables.CTRL[["fraction1"]], function(x) mean(x))
avg.table.frxn2.CTRL <- sapply(fraction.tables.CTRL[["fraction2"]], function(x) mean(x))
avg.table.frxn3.CTRL <- sapply(fraction.tables.CTRL[["fraction3"]], function(x) mean(x))
avg.table.frxn3.CTRL
avg.tables.CTRL <- lapply(fraction.tables.CTRL, function(df) {
sapply(df, mean)
})
avg.tables.CTRL[["fraction1"]]
# Liste mit nur CTRL-Spalten für jede Fraktion
fraction.tables.CTRL <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "CTRL"))
NS_Table[, cols, drop = FALSE]
})
# Liste mit nur RNASE-Spalten für jede Fraktion
fraction.tables.RNASE <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "RNASE"))
NS_Table[, cols, drop = FALSE]})
View(fraction.tables.CTRL[["fraction3"]])
# Liste mit nur CTRL-Spalten für jede Fraktion
fraction.tables.CTRL <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "CTRL"))
NS_Table[, cols, drop = FALSE]
})
# Liste mit nur RNASE-Spalten für jede Fraktion
fraction.tables.RNASE <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "RNASE"))
NS_Table[, cols, drop = FALSE]})
names(fraction.tables.CTRL) <- selected_proteins
names(fraction.tables.RNASE) <- selected_proteins
View(fraction.tables.CTRL[["fraction3"]])
avg.tables.CTRL <- lapply(fraction.tables.CTRL, function(df) {
sapply(df, mean)
})
avg.tables.RNASE <- lapply(fraction.tables.RNASE, function(df) {
sapply(df, mean)
})
avg.tables.CTRL[["fraction1"]]
avg.tables.RNASE[["fraction1"]]
norm_fact <- function(x) {
if( (abs(x[1]-x[2])<abs(x[1]-x[3])) && (abs(x[1]-x[2])<abs(x[2]-x[3])) )
{mean(c(x[1],x[2]))} else if( (abs(x[1]-x[3])<abs(x[1]-x[2])) && (abs(x[1]-x[3])<abs(x[2]-x[3])) )
{mean(c(x[1],x[3]))} else {mean(c(x[2],x[3]))}
}
print(norm_fact(avg.table.frxn25.RNASE))
fraction.tables <- lapply(paste("fraction", 1:25, sep = ""), function(fx) {NS_Table[, colmns_sorted$fraction == fx]})
names(fraction.tables) <- paste("fraction", 1:25, sep = "")
selected_proteins <- names(fraction.tables)
# Liste mit nur CTRL-Spalten für jede Fraktion
fraction.tables.CTRL <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "CTRL"))
NS_Table[, cols, drop = FALSE]
})
# Liste mit nur RNASE-Spalten für jede Fraktion
fraction.tables.RNASE <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "RNASE"))
NS_Table[, cols, drop = FALSE]})
names(fraction.tables.CTRL) <- selected_proteins
names(fraction.tables.RNASE) <- selected_proteins
View(fraction.tables.CTRL[["fraction3"]])
avg.tables.CTRL <- lapply(fraction.tables.CTRL, function(df) {
sapply(df, mean)
})
avg.tables.RNASE <- lapply(fraction.tables.RNASE, function(df) {
sapply(df, mean)
})
avg.tables.CTRL[["fraction1"]]
avg.tables.RNASE[["fraction1"]]
#Reads table, by indicating path to directory where the dataset is stored, and stores it to variable NS_Table (NS for Non-synchronizied HeLa-cells)
NS_Table <- read.table("Daten/Daten_Kommata_behoben.csv", header=TRUE, row.names=1, sep = ";")
#The first 12 titles of the table (NS_Table) rows/colums are read out
#Row names are protein names
head(rownames(NS_Table),12)
#Columns indicate the respective fractions from 1 to 25, and their replicated
head(colnames(NS_Table),12)
#A vector consists of 2 variables (CTRL, RNASE) --> c("CTRL", "RNASE")
#The factor() function encodes a vector as a factor. The 2 variables CTRL and RNASE are ordered into 2 different levels (characters)
#rep(vector,75) repeats the factor() function 75 times, because we have 150 columns (75 times CTRL and RNASE)
#The factor is defined as the variable 'treatment'
levels_CR <- factor(rep(c("CTRL", "RNASE"),75))
#Every sample of every fraction gets its own level to disconnect them from each other -> 6 levels per fraction because we have 3 CTRLs and 3 RNASEs per fraction
levels_fraction <- factor(rep(c("Ctrl_Rep1","RNase_Rep1","Ctrl_Rep2","RNase_Rep2","Ctrl_Rep3","RNase_Rep3"),25))
View(levels_fraction)
# Creation of a matrix with 6 rows and 25 columns. The matrix is filled by row from fraction1 to fraction25 so every column has one single fraction.
# sep="" compares the word fraction with the numbers 1 to 25 without a blank space.
# as.vector changes the created matrix into a vector with 150 elements sorted from 6 times fraction1 to 6 times fraction25
fraction_names <- as.vector(matrix(rep(paste("fraction",1:25,sep=""),6), nrow = 6, ncol=25, byrow = TRUE))
View(matrix(rep(paste("fraction",1:25,sep=""),6), nrow = 6, ncol=25, byrow = TRUE))
View(fraction)
# The number of rows are stored in a variable
n_row <- nrow(NS_Table)
# The row names (protein names) are stored in a variable
row_names <- rownames(NS_Table)
# Creation of a data frame with levels_CR, levels_fraction and fraction_names. This assigns every replicate of the factions (levels_fraction) to their fraction (fraction_names) and their kind of treatment, CRTL or RNASE (levels_CR).
colmns_sorted <- data.frame(row.names = colnames(NS_Table), levels_CR = levels_CR, levels_fraction = levels_fraction, fraction_names = fraction_names)
View(colmns_sorted)
#Check for missing values, there are none
anyNA(NS_Table)
fraction.tables <- lapply(paste("fraction", 1:25, sep = ""), function(fx) {NS_Table[, colmns_sorted$fraction == fx]})
names(fraction.tables) <- paste("fraction", 1:25, sep = "")
selected_proteins <- names(fraction.tables)
# Liste mit nur CTRL-Spalten für jede Fraktion
fraction.tables.CTRL <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "CTRL"))
NS_Table[, cols, drop = FALSE]
})
# Liste mit nur RNASE-Spalten für jede Fraktion
fraction.tables.RNASE <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "RNASE"))
NS_Table[, cols, drop = FALSE]})
names(fraction.tables.CTRL) <- selected_proteins
names(fraction.tables.RNASE) <- selected_proteins
View(fraction.tables.CTRL[["fraction3"]])
avg.tables.CTRL <- lapply(fraction.tables.CTRL, function(df) {
sapply(df, mean)
})
avg.tables.RNASE <- lapply(fraction.tables.RNASE, function(df) {
sapply(df, mean)
})
avg.tables.CTRL[["fraction1"]]
avg.tables.RNASE[["fraction1"]]
# Determine normalization factor for each condition (i.e. sample), as the mean of the 2 most similar replicates.
# Create a function norm_fact for this step:
--> prinzpiell wird mit diesem Code gesagt, dass mindestens 1 Wert immer ein Messfehler sein muss, müssen wir uns überlegen, ob wir das genauso machen wollen.
# Determine normalization factor for each condition (i.e. sample), as the mean of the 2 most similar replicates.
# Create a function norm_fact for this step:
#--> prinzpiell wird mit diesem Code gesagt, dass mindestens 1 Wert immer ein Messfehler sein muss, müssen wir uns überlegen, ob wir das genauso machen wollen.
norm_fact <- function(x) {
if( (abs(x[1]-x[2])<abs(x[1]-x[3])) && (abs(x[1]-x[2])<abs(x[2]-x[3])) )
{mean(c(x[1],x[2]))} else if( (abs(x[1]-x[3])<abs(x[1]-x[2])) && (abs(x[1]-x[3])<abs(x[2]-x[3])) )
{mean(c(x[1],x[3]))} else {mean(c(x[2],x[3]))}
}
print(norm_fact(avg.table.frxn25.RNASE))
