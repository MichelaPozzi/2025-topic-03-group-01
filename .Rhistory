model_not_selected_pc1_3<- lm(target ~ ctrl_ns_1 + rnase_ns_3, data = df_regression_not_selected_13)
model_not_selected_pc2_1<- lm(target ~ ctrl_ns_2 + rnase_ns_1, data = df_regression_not_selected_21)
model_not_selected_pc2_2<- lm(target ~ ctrl_ns_2 + rnase_ns_2, data = df_regression_not_selected_22)
model_not_selected_pc2_3<- lm(target ~ ctrl_ns_2 + rnase_ns_3, data = df_regression_not_selected_23)
model_not_selected_pc3_1<- lm(target ~ ctrl_ns_3 + rnase_ns_1, data = df_regression_not_selected_31)
model_not_selected_pc3_2<- lm(target ~ ctrl_ns_3 + rnase_ns_2, data = df_regression_not_selected_32)
model_not_selected_pc3_3<- lm(target ~ ctrl_ns_3 + rnase_ns_3, data = df_regression_not_selected_33)
#Show results/summary
summary(model_not_selected_pc1_1)
summary(model_not_selected_pc1_2)
summary(model_not_selected_pc1_3)
summary(model_not_selected_pc2_1)
summary(model_not_selected_pc2_2)
summary(model_not_selected_pc2_3)
summary(model_not_selected_pc3_1)
summary(model_not_selected_pc3_2)
summary(model_not_selected_pc3_3)
View(ctrl_selected)
library(factoextra)
# pca_df contains the data, e.g. PC1 and PC2
fviz_cluster(km_result_ctrl_pc1_pc2, data = pca_ctrl_pc1_pc2,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 CTRL (SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc2, data = pca_rnase_pc1_pc2,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("violetred4", "firebrick3", "midnightblue"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 RNASE (SHIFT)")
fviz_cluster(km_result_ctrl_pc1_pc3, data = pca_ctrl_pc1_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 CTRL (SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc3, data = pca_rnase_pc1_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("violetred4", "midnightblue", "firebrick3"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 RNASE (SHIFT)")
fviz_cluster(km_result_ctrl_pc2_pc3, data = pca_ctrl_pc2_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC2 vs PC3 CTRL (SHIFT)")
fviz_cluster(km_result_rnase_pc2_pc3, data = pca_rnase_pc2_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC2 vs PC3 RNASE (SHIFT)")
# pca_df contains the data, e.g. PC1 and PC2
fviz_cluster(km_result_ctrl_pc1_pc2_not_selected, data = pca_ctrl_pc1_pc2_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 CTRL (NO SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc2_not_selected, data = pca_rnase_pc1_pc2_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 RNASE (NO SHIFT)")
fviz_cluster(km_result_ctrl_pc1_pc3_not_selected, data = pca_ctrl_pc1_pc3_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 CTRL (NO SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc3_not_selected, data = pca_rnase_pc1_pc3_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("firebrick3", "midnightblue", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 RNASE (NO SHIFT)")
fviz_cluster(km_result_ctrl_pc2_pc3_not_selected, data = pca_ctrl_pc2_pc3_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC2 vs PC3 CTRL (NO SHIFT)")
fviz_cluster(km_result_rnase_pc2_pc3_not_selected, data = pca_rnase_pc2_pc3_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC2 vs PC3 RNASE (SHIFT)")
library(factoextra)
# pca_df contains the data, e.g. PC1 and PC2
fviz_cluster(km_result_ctrl_pc1_pc2, data = pca_ctrl_pc1_pc2,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 CTRL (SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc2, data = pca_rnase_pc1_pc2,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("violetred4", "firebrick3", "midnightblue"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 RNASE (SHIFT)")
fviz_cluster(km_result_ctrl_pc1_pc3, data = pca_ctrl_pc1_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 CTRL (SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc3, data = pca_rnase_pc1_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("violetred4", "midnightblue", "firebrick3"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 RNASE (SHIFT)")
fviz_cluster(km_result_ctrl_pc2_pc3, data = pca_ctrl_pc2_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC2 vs PC3 CTRL (SHIFT)")
fviz_cluster(km_result_rnase_pc2_pc3, data = pca_rnase_pc2_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC2 vs PC3 RNASE (SHIFT)")
# pca_df contains the data, e.g. PC1 and PC2
fviz_cluster(km_result_ctrl_pc1_pc2_not_selected, data = pca_ctrl_pc1_pc2_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 CTRL (NO SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc2_not_selected, data = pca_rnase_pc1_pc2_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("violetred4", "firebrick3", "midnightblue"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 RNASE (NO SHIFT)")
fviz_cluster(km_result_ctrl_pc1_pc3_not_selected, data = pca_ctrl_pc1_pc3_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 CTRL (NO SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc3_not_selected, data = pca_rnase_pc1_pc3_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 RNASE (NO SHIFT)")
fviz_cluster(km_result_ctrl_pc2_pc3_not_selected, data = pca_ctrl_pc2_pc3_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC2 vs PC3 CTRL (NO SHIFT)")
fviz_cluster(km_result_rnase_pc2_pc3_not_selected, data = pca_rnase_pc2_pc3_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC2 vs PC3 RNASE (SHIFT)")
library(factoextra)
# pca_df contains the data, e.g. PC1 and PC2
fviz_cluster(km_result_ctrl_pc1_pc2, data = pca_ctrl_pc1_pc2,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 CTRL (SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc2, data = pca_rnase_pc1_pc2,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("violetred4", "firebrick3", "midnightblue"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 RNASE (SHIFT)")
fviz_cluster(km_result_ctrl_pc1_pc3, data = pca_ctrl_pc1_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 CTRL (SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc3, data = pca_rnase_pc1_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4", ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 RNASE (SHIFT)")
fviz_cluster(km_result_ctrl_pc2_pc3, data = pca_ctrl_pc2_pc3,
library(factoextra)
# pca_df contains the data, e.g. PC1 and PC2
fviz_cluster(km_result_ctrl_pc1_pc2, data = pca_ctrl_pc1_pc2,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 CTRL (SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc2, data = pca_rnase_pc1_pc2,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("violetred4", "firebrick3", "midnightblue"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 RNASE (SHIFT)")
fviz_cluster(km_result_ctrl_pc1_pc3, data = pca_ctrl_pc1_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 CTRL (SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc3, data = pca_rnase_pc1_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 RNASE (SHIFT)")
fviz_cluster(km_result_ctrl_pc2_pc3, data = pca_ctrl_pc2_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC2 vs PC3 CTRL (SHIFT)")
fviz_cluster(km_result_rnase_pc2_pc3, data = pca_rnase_pc2_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC2 vs PC3 RNASE (SHIFT)")
# pca_df contains the data, e.g. PC1 and PC2
fviz_cluster(km_result_ctrl_pc1_pc2_not_selected, data = pca_ctrl_pc1_pc2_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 CTRL (NO SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc2_not_selected, data = pca_rnase_pc1_pc2_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("violetred4", "firebrick3", "midnightblue"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 RNASE (NO SHIFT)")
fviz_cluster(km_result_ctrl_pc1_pc3_not_selected, data = pca_ctrl_pc1_pc3_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 CTRL (NO SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc3_not_selected, data = pca_rnase_pc1_pc3_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 RNASE (NO SHIFT)")
fviz_cluster(km_result_ctrl_pc2_pc3_not_selected, data = pca_ctrl_pc2_pc3_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC2 vs PC3 CTRL (NO SHIFT)")
fviz_cluster(km_result_rnase_pc2_pc3_not_selected, data = pca_rnase_pc2_pc3_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC2 vs PC3 RNASE (SHIFT)")
# JPEG-Datei öffnen
jpeg("k-Means Cluster PC1 vs PC2 RNASE (NO SHIFT).jpeg", width = 800, height = 600)
fviz_cluster(km_result_rnase_pc1_pc2_not_selected, data = pca_rnase_pc1_pc2_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("violetred4", "firebrick3", "midnightblue"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 RNASE (NO SHIFT)")
# Grafikgerät schließen
dev.off()
# JPEG-Datei öffnen
jpeg("k-Means Cluster PC1 vs PC2 CTRL (NO SHIFT).jpeg", width = 800, height = 600)
fviz_cluster(km_result_ctrl_pc1_pc2_not_selected, data = pca_ctrl_pc1_pc2_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 CTRL (NO SHIFT)")
# Grafikgerät schließen
dev.off()
# JPEG-Datei öffnen
jpeg("k-Means Cluster PC1 vs PC2 CTRL (NO SHIFT).jpeg", width = 800, height = 600)
fviz_cluster(km_result_ctrl_pc1_pc2_not_selected, data = pca_ctrl_pc1_pc2_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 CTRL (NO SHIFT)")
# Grafikgerät schließen
dev.off()
# JPEG-Datei öffnen
jpeg("k-Means Cluster PC1 vs PC2 CTRL (SHIFT).jpeg", width = 800, height = 600)
fviz_cluster(km_result_ctrl_pc1_pc2, data = pca_ctrl_pc1_pc2,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 CTRL (SHIFT)")
# Grafikgerät schließen
dev.off()
# JPEG-Datei öffnen
jpeg("k-Means Cluster PC1 vs PC2 RNASE (SHIFT).jpeg", width = 800, height = 600)
fviz_cluster(km_result_rnase_pc1_pc2, data = pca_rnase_pc1_pc2,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("violetred4", "firebrick3", "midnightblue"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 RNASE (SHIFT)")
# Grafikgerät schließen
dev.off()
# JPEG-Datei öffnen
jpeg("Elbow-Plot RNASE (NO SHIFT).jpeg", width = 800, height = 600)
plot(pca_result_rnase_not_selected, type = "l", main = "plot(pca_result_rnase_not_selected, type = "l", main = "Elbow-Plot RNASE (NO SHIFT)")")
# JPEG-Datei öffnen
jpeg("Elbow-Plot RNASE (NO SHIFT).jpeg", width = 800, height = 600)
plot(pca_result_rnase_not_selected, type = "l", main = "Elbow-Plot RNASE (NO SHIFT)")
# Grafikgerät schließen
dev.off()
# JPEG-Datei öffnen
jpeg("Elbow-Plot RNASE (SHIFT).jpeg", width = 800, height = 600)
plot(pca_result_rnase, type = "l", main = "Elbow-Plot RNASE (SHIFT)")
# Grafikgerät schließen
dev.off()
# JPEG-Datei öffnen
jpeg("PC1 vs PC2 CTRL (SHIFT).jpeg", width = 800, height = 600)
plot(pca_result_ctrl$x[,1:2], col = "midnightblue", pch = 16,
xlab = "PC1", ylab = "PC2", main = "PCA: PC1 vs PC2 CTRL (SHIFT)")
# Grafikgerät schließen
dev.off()
# JPEG-Datei öffnen
jpeg("PC1 vs PC2 CTRL (NO SHIFT).jpeg", width = 800, height = 600)
plot(pca_result_ctrl_not_selected$x[,1:2], col = "midnightblue", pch = 16,
xlab = "PC1", ylab = "PC2", main = "PCA: PC1 vs PC2 CTRL (NO SHIFT)")
# Grafikgerät schließen
dev.off()
# JPEG-Datei öffnen
jpeg("PC1 vs PC2 RNASE (NO SHIFT).jpeg", width = 800, height = 600)
plot(pca_result_rnase_not_selected$x[,1:2], col = "midnightblue", pch = 16,
xlab = "PC1", ylab = "PC2", main = "PCA: PC1 vs PC2 RNASE (NO SHIFT)")
# Grafikgerät schließen
dev.off()
# JPEG-Datei öffnen
jpeg("PC1 vs PC2 RNASE (SHIFT).jpeg", width = 800, height = 600)
plot(pca_result_rnase$x[,1:2], col = "midnightblue", pch = 16,
xlab = "PC1", ylab = "PC2", main = "PCA: PC1 vs PC2 RNASE (SHIFT)")
# Grafikgerät schließen
dev.off()
# RBP2GO database contains proteome-wide datasets for RBPs from 53 studies including 105 datasets -> 22 552 identified RBP candidates across 13 species.)
# Load the RBP2GO tables: One for known RBPs (RNA-binding proteins) and one for known non-RBPs in humans.
# Skip the first 6 lines of the file (-> Not part of the datatable)
# "\t" means the values are separated by tabs.
# stringsAsFactors => FALSE means text columns are treated as text and not turned into factors. Characters remain usable.
rbp_pos <- read.delim("Daten/RBP2GO Table RBPs.txt", skip = 6, sep = "\t", stringsAsFactors = FALSE)
rbp_neg <- read.delim("Daten/RBP2GO Table Non-RBPs.txt", skip = 6, sep = "\t", stringsAsFactors = FALSE)
# Add a new column to the ctrl_norm_mean dataframe to store RBP2GO status
# The status "RBP" or "Non-RBP" confirms that the protein has been identified as an RBP in previous studies / datasets.
# Set status "unknown", will be replaced if possible.
ctrl_norm_mean$RBP2GO_status <- "unkown"
# If the protein name (row name) is found in the list of known RBPs (toupper makes it case-insensitive), mark it as "RBP"
ctrl_norm_mean$RBP2GO_status[
toupper(rownames(ctrl_norm_mean)) %in% toupper(rbp_pos$Entry_Name)
] <- "RBP"
# If the protein is in the list of known non-RBPs, mark it as "Non-RBP"
ctrl_norm_mean$RBP2GO_status[
toupper(rownames(ctrl_norm_mean)) %in% toupper(rbp_neg$Entry_Name)
] <- "Non-RBP"
library(ggplot2)
# Count how many proteins fall into each category ("RBP", "Non-RBP", "unknown")
# table counts how often a status occured -> see "df_plot" (dataframe)
df_plot <- as.data.frame(table(ctrl_norm_mean$RBP2GO_status))
colnames(df_plot) <- c("Status", "Amount")
# Create a pie chart from these counts
ggplot(df_plot, aes(x = "", y = Amount, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
labs(title = "RBP2GO Classification of all ctrl_norm_mean proteins",
scale_fill_manual(values = c("firebrick", "midnightblue", "darkseagreen3")))
# Create a logical vector: TRUE if the protein in ctrl_selected is a known RBP
z = rownames(ctrl_selected) %in% rbp_pos$Entry_Name
length(z)
sum(z) # counts TRUE -> previously identified RBPs in ctrl_norm_mean
# Do the same for ctrl_not_selected
y = rownames(ctrl_not_selected) %in% rbp_pos$Entry_Name
length(y)
sum(y) # counts TRUE -> previously identified Non-RBPs in ctrl_norm_mean
# Classification of selected proteins
# Collect the protein names in each RBP2GO table and the names of the selected proteins as a vector, uppercase for comparison
prot_names_selected <- toupper(rownames(ctrl_selected))
rbp_pos_names <- toupper(rbp_pos$Entry_Name)
rbp_neg_names <- toupper(rbp_neg$Entry_Name)
# Create a status vector for each protein in ctrl_selected, default "unknown"
status_selected <- rep("unknown", nrow(ctrl_selected))
# Label proteins found in rbp_pos as "selected RBPs"
status_selected[prot_names_selected %in% rbp_pos_names] <- "selected RBPs"
# Label proteins found in rbp_neg as "selected Non-RBPs"
status_selected[prot_names_selected %in% rbp_neg_names] <- "selected Non-RBPs"
# Create a data frame of the counts per category
library(ggplot2)
df_plot <- as.data.frame(table(status_selected))
colnames(df_plot) <- c("Status", "Amount")
ggplot(df_plot, aes(x = "", y = Amount, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
labs(title = "Classification of the selected proteins") +
scale_fill_manual(values = c("selected RBPs" = "midnightblue",
"selected Non-RBPs" = "firebrick",
"unknown" = "darkseagreen3"))
# Classification of not selected proteins
# Collect the protein names in each RBP2GO table and the names of the not selected proteins as a vector, uppercase for comparison
prot_names_not_selected <- toupper(rownames(ctrl_not_selected))
rbp_pos_names <- toupper(rbp_pos$Entry_Name)
rbp_neg_names <- toupper(rbp_neg$Entry_Name)
# Create a status vector for each protein in ctrl_selected, default "unknown"
status_not_selected <- rep("unknown", nrow(ctrl_not_selected))
# Label proteins found in rbp_pos as "selected RBPs"
# Label proteins found in rbp_neg as "selected Non-RBPs"
status_not_selected[prot_names_not_selected %in% rbp_pos_names] <- "selected RBPs"
status_not_selected[prot_names_not_selected %in% rbp_neg_names] <- "selected Non-RBPs"
# Create a data frame of the counts per category
library(ggplot2)
df_plot_not_selected <- as.data.frame(table(status_not_selected))
colnames(df_plot_not_selected) <- c("Status", "Amount")
ggplot(df_plot_not_selected, aes(x = "", y = Amount, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
labs(title = "Classification of the NOT selected proteins") +
scale_fill_manual(values = c("selected RBPs" = "midnightblue",
"selected Non-RBPs" = "firebrick",
"unknown" = "darkseagreen3"))
# Classification of selected proteins
# Collect the protein names in each RBP2GO table and the names of the selected proteins as a vector, uppercase for comparison
prot_names_selected <- toupper(rownames(ctrl_selected))
rbp_pos_names <- toupper(rbp_pos$Entry_Name)
rbp_neg_names <- toupper(rbp_neg$Entry_Name)
# Create a status vector for each protein in ctrl_selected, default "unknown"
status_selected <- rep("unknown", nrow(ctrl_selected))
# Label proteins found in rbp_pos as "selected RBPs"
status_selected[prot_names_selected %in% rbp_pos_names] <- "selected RBPs"
# Label proteins found in rbp_neg as "selected Non-RBPs"
status_selected[prot_names_selected %in% rbp_neg_names] <- "selected Non-RBPs"
# Create a data frame of the counts per category
library(ggplot2)
df_plot <- as.data.frame(table(status_selected))
colnames(df_plot) <- c("Status", "Amount")
ggplot(df_plot, aes(x = "", y = Amount, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
labs(title = "Classification of the selected proteins") +
scale_fill_manual(values = c("selected RBPs" = "midnightblue",
"selected Non-RBPs" = "firebrick",
"unknown" = "mediumpurple1"))
# Classification of selected proteins
# Collect the protein names in each RBP2GO table and the names of the selected proteins as a vector, uppercase for comparison
prot_names_selected <- toupper(rownames(ctrl_selected))
rbp_pos_names <- toupper(rbp_pos$Entry_Name)
rbp_neg_names <- toupper(rbp_neg$Entry_Name)
# Create a status vector for each protein in ctrl_selected, default "unknown"
status_selected <- rep("unknown", nrow(ctrl_selected))
# Label proteins found in rbp_pos as "selected RBPs"
status_selected[prot_names_selected %in% rbp_pos_names] <- "selected RBPs"
# Label proteins found in rbp_neg as "selected Non-RBPs"
status_selected[prot_names_selected %in% rbp_neg_names] <- "selected Non-RBPs"
# Create a data frame of the counts per category
library(ggplot2)
df_plot <- as.data.frame(table(status_selected))
colnames(df_plot) <- c("Status", "Amount")
ggplot(df_plot, aes(x = "", y = Amount, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
labs(title = "Classification of the selected proteins") +
scale_fill_manual(values = c("selected RBPs" = "midnightblue",
"selected Non-RBPs" = "firebrick",
"unknown" = "violetred4"))
# Classification of selected proteins
# Collect the protein names in each RBP2GO table and the names of the selected proteins as a vector, uppercase for comparison
prot_names_selected <- toupper(rownames(ctrl_selected))
rbp_pos_names <- toupper(rbp_pos$Entry_Name)
rbp_neg_names <- toupper(rbp_neg$Entry_Name)
# Create a status vector for each protein in ctrl_selected, default "unknown"
status_selected <- rep("unknown", nrow(ctrl_selected))
# Label proteins found in rbp_pos as "selected RBPs"
status_selected[prot_names_selected %in% rbp_pos_names] <- "selected RBPs"
# Label proteins found in rbp_neg as "selected Non-RBPs"
status_selected[prot_names_selected %in% rbp_neg_names] <- "selected Non-RBPs"
# Create a data frame of the counts per category
library(ggplot2)
df_plot <- as.data.frame(table(status_selected))
colnames(df_plot) <- c("Status", "Amount")
ggplot(df_plot, aes(x = "", y = Amount, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
labs(title = "Classification of the selected proteins") +
scale_fill_manual(values = c("selected RBPs" = "midnightblue",
"selected Non-RBPs" = "firebrick",
"unknown" = "mediumpurple1"))
# Classification of not selected proteins
# Collect the protein names in each RBP2GO table and the names of the not selected proteins as a vector, uppercase for comparison
prot_names_not_selected <- toupper(rownames(ctrl_not_selected))
rbp_pos_names <- toupper(rbp_pos$Entry_Name)
rbp_neg_names <- toupper(rbp_neg$Entry_Name)
# Create a status vector for each protein in ctrl_selected, default "unknown"
status_not_selected <- rep("unknown", nrow(ctrl_not_selected))
# Label proteins found in rbp_pos as "selected RBPs"
# Label proteins found in rbp_neg as "selected Non-RBPs"
status_not_selected[prot_names_not_selected %in% rbp_pos_names] <- "selected RBPs"
status_not_selected[prot_names_not_selected %in% rbp_neg_names] <- "selected Non-RBPs"
# Create a data frame of the counts per category
library(ggplot2)
df_plot_not_selected <- as.data.frame(table(status_not_selected))
colnames(df_plot_not_selected) <- c("Status", "Amount")
ggplot(df_plot_not_selected, aes(x = "", y = Amount, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
labs(title = "Classification of the NOT selected proteins") +
scale_fill_manual(values = c("selected RBPs" = "midnightblue",
"selected Non-RBPs" = "firebrick",
"unknown" = "mediumpurple1"))
library(ggplot2)
# Plot erstellen und einem Objekt zuweisen
p <- ggplot(df_plot, aes(x = "", y = Amount, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
labs(title = "Classification of the selected proteins") +
scale_fill_manual(values = c("selected RBPs" = "midnightblue",
"selected Non-RBPs" = "firebrick",
"unknown" = "mediumpurple1"))
# Plot anzeigen (optional)
print(p)
# Plot als JPEG speichern
ggsave("Classification of the selected proteins.jpeg", plot = p, width = 6, height = 6, dpi = 300, units = "in")
# Create a logical vector: TRUE if the protein in ctrl_selected is a known RBP
z = rownames(ctrl_selected) %in% rbp_pos$Entry_Name
length(z)
sum(z) # counts TRUE -> previously identified RBPs in ctrl_norm_mean
# Do the same for ctrl_not_selected
y = rownames(ctrl_not_selected) %in% rbp_pos$Entry_Name
length(y)
sum(y) # counts TRUE -> previously identified Non-RBPs in ctrl_norm_mean
# Classification of selected proteins
# Collect the protein names in each RBP2GO table and the names of the selected proteins as a vector, uppercase for comparison
prot_names_selected <- toupper(rownames(ctrl_selected))
rbp_pos_names <- toupper(rbp_pos$Entry_Name)
rbp_neg_names <- toupper(rbp_neg$Entry_Name)
# Create a status vector for each protein in ctrl_selected, default "unknown"
status_selected <- rep("unknown", nrow(ctrl_selected))
# Label proteins found in rbp_pos as "selected RBPs"
status_selected[prot_names_selected %in% rbp_pos_names] <- "selected RBPs"
# Label proteins found in rbp_neg as "selected Non-RBPs"
status_selected[prot_names_selected %in% rbp_neg_names] <- "selected Non-RBPs"
# Create a data frame of the counts per category
library(ggplot2)
df_plot <- as.data.frame(table(status_selected))
colnames(df_plot) <- c("Status", "Amount")
ggplot(df_plot, aes(x = "", y = Amount, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
labs(title = "Classification of the selected proteins") +
scale_fill_manual(values = c("selected RBPs" = "midnightblue",
"selected Non-RBPs" = "firebrick",
"unknown" = "darkseagreen3"))
# Classification of not selected proteins
# Collect the protein names in each RBP2GO table and the names of the not selected proteins as a vector, uppercase for comparison
prot_names_not_selected <- toupper(rownames(ctrl_not_selected))
rbp_pos_names <- toupper(rbp_pos$Entry_Name)
rbp_neg_names <- toupper(rbp_neg$Entry_Name)
# Create a status vector for each protein in ctrl_selected, default "unknown"
status_not_selected <- rep("unknown", nrow(ctrl_not_selected))
# Label proteins found in rbp_pos as "selected RBPs"
# Label proteins found in rbp_neg as "selected Non-RBPs"
status_not_selected[prot_names_not_selected %in% rbp_pos_names] <- "selected RBPs"
status_not_selected[prot_names_not_selected %in% rbp_neg_names] <- "selected Non-RBPs"
# Create a data frame of the counts per category
library(ggplot2)
df_plot_not_selected <- as.data.frame(table(status_not_selected))
colnames(df_plot_not_selected) <- c("Status", "Amount")
ggplot(df_plot_not_selected, aes(x = "", y = Amount, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
labs(title = "Classification of the NOT selected proteins") +
scale_fill_manual(values = c("selected RBPs" = "midnightblue",
"selected Non-RBPs" = "firebrick",
"unknown" = "darkseagreen3"))
