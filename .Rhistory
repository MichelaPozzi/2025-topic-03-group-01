tbl <- rapply(tbl, function(x) ifelse(is.nan(x), 0, x), how = "replace")
return(tbl)
}
#tables.norm.ctrl <- list(
#  ctrl1 = table.ctrl1.SW.norm,
#  ctrl2 = table.ctrl2.SW.norm,
#  ctrl3 = table.ctrl3.SW.norm)
#tables.norm.rnase <- list(
#  rnase1 = table.rnase1.SW.norm,
#  rnase2 = table.rnase2.SW.norm,
#  rnase3 = table.rnase3.SW.norm)
# Getting the clean table
tables.norm.ctrl <- lapply(norm_tables.ctrl, clean_table)
tables.norm.rnase <- lapply(norm_tables.rnase, clean_table)
#View(tables.norm.ctrl$ctrl1)
my.list.ctrl.norm <- list(table.ctrl1.SW, table.ctrl2.SW, table.ctrl3.SW)
my.list.rnase.norm <- list(table.rnase1.SW, table.rnase2.SW, table.rnase3.SW)
# Addition of all data-frames in the list my.list.ctrl.norm (element-wise) and Division of the Sum with 3 to get the mean of all 3 replicates
ctrl_norm_mean <- Reduce("+", my.list.ctrl.norm)/length(my.list.ctrl.norm)
rnase_norm_mean <- Reduce("+", my.list.rnase.norm)/length(my.list.rnase.norm)
# Change names of the columns: from "fraction1" to "fraction25"
col_fractions <- paste("fraction",1:25,sep="")
colnames(ctrl_norm_mean) <- col_fractions
colnames(rnase_norm_mean) <- col_fractions
# second normalization of the fractions (mean destroyed first normalization): Sum of all fraction values equals 100 (%)
ctrl_norm_mean <- ctrl_norm_mean*100/rowSums(ctrl_norm_mean)
rnase_norm_mean <- rnase_norm_mean*100/rowSums(rnase_norm_mean)
# Function for replacing NA and NaN with 0
replace_na_nan <- function(x) rapply(x, function(y) ifelse(is.na(y) | is.nan(y), 0, y), how = "replace")
ctrl_norm_mean <- replace_na_nan(ctrl_norm_mean)
rnase_norm_mean <- replace_na_nan(rnase_norm_mean)
# If a curve is 0 in all fractions, the other fraction is also set to 0 and is excluded from the analysis
ctrl_norm_mean[rowSums(rnase_norm_mean[1:25])==0,] <- 0
rnase_norm_mean[rowSums(ctrl_norm_mean[1:25])==0,] <- 0
View(ctrl_norm_mean)
View(rnase_norm_mean)
#Function find_peaks
#Peak is local maximum with "window" points on each side being smaller than it
#Bigger window =>more stringent peak finding procedure
find_peaks <- function(x, window = 2) {
slope_changes <- diff(sign(diff(x)))
peak_indices <- which(slope_changes < 0)
peaks <- c()
for (i in peak_indices) {
left <- max(1, i - window + 1)
right <- min(length(x), i + window + 1)
neighbors <- c(x[left:i], x[(i + 2):right])
if (all(neighbors <= x[i + 1])) {
peaks <- c(peaks, i + 1)
}
}
# part added to deal with plateaux
# Ergibt diese Operation überhaupt Sinn, Plateaus haben ja auch nur einen Hochpunkt, und alle anderen (ähnlichen) werden doch ohnehin nicht erkannt werden?
n = length(peaks)
if (n>1) {
rem <- numeric(0)
for (i in 1:(n-1)) { if  ((peaks[i]+1) == peaks[(i+1)]) {rem <- c(rem, peaks[i+1]) } }
for (i in 1:(n-1)) { if  ((peaks[i]+2) == peaks[(i+1)]) {rem <- c(rem, peaks[i+1]) } }
peaks <- peaks[! peaks%in% rem]
}
# part added to deal with the 1st and 25th values, in case they are max
if ( sum(x[1]>x[2:(window+1)]) == 2 ) {peaks <- c(peaks, 1)}
if ( sum(x[25]>x[24:(25-window)]) == 2 ) {peaks <- c(peaks, 25)}
peaks <- unlist(peaks)
peaks
return(peaks)
}
#Test, ob die Peak-Positionen richtig ausgegeben werden
#test_vec2 = as.numeric(ctrl_norm_mean[4, ])
#find_peaks(test_vec2)
#z = c(30, 2, 2, 2, 2, 2, 5, 4, 3, 2, 2, 2, 2, 2, 31, 30, 31, 32, 2, 2, 2, 2, 2, 2, 30)
#find_peaks(z)
# Apply the function to the data set and retrieve the values
# restriction to values above an absolut threshold of 2%
# New column: "maxima" (column 26)
ctrl_norm_mean$maxima <- apply(ctrl_norm_mean, 1, function(x) {
list <- find_peaks(x)
list <- list[x[list] > 2]
list <- unlist(list)
list
})
rnase_norm_mean$maxima <- apply(rnase_norm_mean, 1, function(x) {
list <- find_peaks(x)
list <- list[x[list] > 2]
list <- unlist(list)
list
})
View(ctrl_norm_mean)
View(rnase_norm_mean)
#Reads table, by indicating path to directory where the dataset is stored, and stores it to variable NS_Table (NS for Non-synchronizied HeLa-cells)
NS_Table <- read.table("Daten/Data, copy but dont open.csv", header=TRUE, row.names=1, sep = ";")
#The first 12 titles of the table (NS_Table) rows/colums are read out
#Row names are protein names
head(rownames(NS_Table),12)
#Columns indicate the respective fractions from 1 to 25, and their replicated
head(colnames(NS_Table),12)
#A vector consists of 2 variables (CTRL, RNASE) --> c("CTRL", "RNASE")
#The factor() function encodes a vector as a factor. The 2 variables CTRL and RNASE are ordered into 2 different levels (characters)
#rep(vector,75) repeats the factor() function 75 times, because we have 150 columns (75 times CTRL and RNASE)
#The factor is defined as the variable 'treatment'
levels_CR <- factor(rep(c("CTRL", "RNASE"),75))
#Every sample of every fraction gets its own level to disconnect them from each other -> 6 levels per fraction because we have 3 CTRLs and 3 RNASEs per fraction
levels_fraction <- factor(rep(c("Ctrl_Rep1","RNase_Rep1","Ctrl_Rep2","RNase_Rep2","Ctrl_Rep3","RNase_Rep3"),25))
View(levels_fraction)
# Creation of a matrix with 6 rows and 25 columns. The matrix is filled by row from fraction1 to fraction25 so every column has one single fraction.
# sep="" compares the word fraction with the numbers 1 to 25 without a blank space.
# paste("fraction",1:25,sep="") creates a vector with the strings fraction1 to fraction25
# as.vector changes the created matrix into a vector with 150 elements sorted from 6 times fraction1 to 6 times fraction25
fraction_names <- as.vector(matrix(rep(paste("fraction",1:25,sep=""),6), nrow = 6, ncol=25, byrow = TRUE))
View(matrix(rep(paste("fraction",1:25,sep=""),6), nrow = 6, ncol=25, byrow = TRUE))
# The number of rows are stored in a variable
n_row <- nrow(NS_Table)
# The row names (protein names) are stored in a variable
row_names <- rownames(NS_Table)
# Creation of a data frame with levels_CR, levels_fraction and fraction_names. This assigns every replicate of the factions (levels_fraction) to their fraction (fraction_names) and their kind of treatment, CRTL or RNASE (levels_CR).
colmns_sorted <- data.frame(row.names = colnames(NS_Table), levels_CR = levels_CR, levels_fraction = levels_fraction, fraction_names = fraction_names)
View(colmns_sorted)
#Check for missing values, there are none
anyNA(NS_Table)
# lapply executes for every with paste  created string (the fractions) a function fx
# colmns_sorted$fraction == fx: checks which columns are part of the fractions fx
# NS_Table[, ...] filters just these columns and assigns them to the list "fraction.tables"
# names(fraction.tables): the list "fraction.tables" gets names for its segments and assigns them to the variable selected_proteins
fraction.tables <- lapply(paste("fraction", 1:25, sep = ""), function(fx) {NS_Table[, colmns_sorted$fraction == fx]})
names(fraction.tables) <- paste("fraction", 1:25, sep = "")
selected_proteins <- names(fraction.tables)
# List with just CTRL/RNASE columns for each fraction
# subset filters just the fractions that fulfill the conditions: fraction_names == fx --> fraction name is part of the funtion fx, levels_CR == "CTRL" --> protein was treated as a CTRL
# rownames() takes the rownames of the filtert fractions and asigns them to the variable col
# NS_Table[, cols, drop = FALSE] the names that are part of NS_Table are filterd out and drop = FALSE makes sure that fraction.tables.CTRL will be a dataframe
# Liste mit nur CTRL-Spalten für jede Fraktion
fraction.tables.CTRL <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "CTRL"))
NS_Table[, cols, drop = FALSE]
})
# Liste mit nur RNASE-Spalten für jede Fraktion
fraction.tables.RNASE <- lapply(selected_proteins, function(fx) {
cols <- rownames(subset(colmns_sorted, fraction_names == fx & levels_CR == "RNASE"))
NS_Table[, cols, drop = FALSE]})
names(fraction.tables.CTRL) <- selected_proteins
names(fraction.tables.RNASE) <- selected_proteins
View(fraction.tables.CTRL[["fraction3"]])
# sapply(df, mean) calculates the mean of every column of the dataframe fraction.tables.CTRL
avg.tables.CTRL <- lapply(fraction.tables.CTRL, function(df) {
sapply(df, mean)
})
avg.tables.RNASE <- lapply(fraction.tables.RNASE, function(df) {
sapply(df, mean)
})
avg.tables.CTRL[["fraction1"]]
avg.tables.RNASE[["fraction1"]]
#--> prinzpiell wird mit diesem Code gesagt, dass mindestens 1 Wert immer ein Messfehler sein muss, müssen wir uns überlegen, ob wir das genauso machen wollen oder ob wir alle 3 Messwerte mit einbeziehen.
# Determine normalization factor for each condition (i.e. sample), as the mean of the 2 most similar replicates.
# Create a function norm_fact for this step:
norm_fact <- function(x) {
if( (abs(x[1]-x[2])<abs(x[1]-x[3])) && (abs(x[1]-x[2])<abs(x[2]-x[3])) )
{mean(c(x[1],x[2]))} else if( (abs(x[1]-x[3])<abs(x[1]-x[2])) && (abs(x[1]-x[3])<abs(x[2]-x[3])) )
{mean(c(x[1],x[3]))} else {mean(c(x[2],x[3]))}
}
print(norm_fact(avg.tables.CTRL[["fraction1"]]))
# normalization of the mean value vectors - inversely proportional to the size of the values
# norm_factor / vec: gives a new vector indicating how strong each element is relative to the norm factor (mean)
norm_mean_frxn_CTRL <- lapply(avg.tables.CTRL, function(vec) {
norm_factor <- norm_fact(vec)
norm_factor / vec
})
norm_mean_frxn_RNASE <- lapply(avg.tables.RNASE, function(vec) {
norm_factor <- norm_fact(vec)
norm_factor / vec
})
print(norm_mean_frxn_CTRL[[1]])
# Correction factor for the overall protein quantity
# Normalization vectors for replicates 1-3
# function(x) x[1]: extracts the first element of each vector in the list
# norm.ctrl1 is a numeric vector consisting of the 1st element of each normalized CTRL vector
norm.ctrl1 <- sapply(norm_mean_frxn_CTRL, function(x) x[1])
norm.ctrl2 <- sapply(norm_mean_frxn_CTRL, function(x) x[2])
norm.ctrl3 <- sapply(norm_mean_frxn_CTRL, function(x) x[3])
norm.rnase1 <- sapply(norm_mean_frxn_RNASE, function(x) x[1])
norm.rnase2 <- sapply(norm_mean_frxn_RNASE, function(x) x[2])
norm.rnase3 <- sapply(norm_mean_frxn_RNASE, function(x) x[3])
# Defines logical vectors (TRUE, FALSE), which are later used to create subtables - separately for treatment (Ctrl vs. RNase) and replica (Rep1, Rep2, Rep3)
# colmns_sorted$levels_fraction =="Ctrl_Rep1": checks at which position exactly in the columns_sorted Ctrl_Rep1 can be found (marks it with TRUE)
data.ctrl1 <- colmns_sorted$levels_fraction =="Ctrl_Rep1"
data.ctrl2 <- colmns_sorted$levels_fraction =="Ctrl_Rep2"
data.ctrl3 <- colmns_sorted$levels_fraction =="Ctrl_Rep3"
data.rnase1 <- colmns_sorted$levels_fraction =="RNase_Rep1"
data.rnase2 <- colmns_sorted$levels_fraction =="RNase_Rep2"
data.rnase3 <- colmns_sorted$levels_fraction =="RNase_Rep3"
# Normalization step, fraction-wise
# takes specific columns from the protein intensity table and scales each row according to a normalization factor to compensate for measurement differences between replicates
# mask: A logical vector (TRUE/FALSE) that specifies which columns of NS_Table are selected
# selected <- NS_Table[, mask]: from NS_Table only the columns marked with TRUE in mask are selected
# (`*`, selected, norm_vec, SIMPLIFY = FALSE): Multiplication of colums of selected and the vector norm_vec saved as a list
normalize_group <- function(mask, norm_vec) {
selected <- NS_Table[, mask]
as.data.frame(mapply(`*`, selected, norm_vec, SIMPLIFY = FALSE))
}
# logical vectors (data.ctrl1) and vectors with normalization-factors (norm.ctrl1) form groups
# normalize_group(): multiplication of the vectors with their normalization-factor
table.ctrl1  <- normalize_group(data.ctrl1,  norm.ctrl1)
table.ctrl2  <- normalize_group(data.ctrl2,  norm.ctrl2)
table.ctrl3  <- normalize_group(data.ctrl3,  norm.ctrl3)
table.rnase1 <- normalize_group(data.rnase1, norm.rnase1)
table.rnase2 <- normalize_group(data.rnase2, norm.rnase2)
table.rnase3 <- normalize_group(data.rnase3, norm.rnase3)
# Get the proper rownames for the tables
rownames(table.ctrl1) <- row_names
rownames(table.ctrl2) <- row_names
rownames(table.ctrl3) <- row_names
rownames(table.rnase1) <- row_names
rownames(table.rnase2) <- row_names
rownames(table.rnase3) <- row_names
View(table.ctrl1)
# Apply a sliding window/moving average of 3 points to the data to reduce noise in the data and obtain smoother curves (not possible for fraction 1 and 25)
smooth_table <- function(tbl) {
data.frame(tbl[1], (tbl[1:23] + tbl[2:24] + tbl[3:25]) / 3, tbl[25])
}
table.ctrl1.SW <- smooth_table(table.ctrl1)
table.ctrl2.SW <- smooth_table(table.ctrl2)
table.ctrl3.SW <- smooth_table(table.ctrl3)
table.rnase1.SW <- smooth_table(table.rnase1)
table.rnase2.SW <- smooth_table(table.rnase2)
table.rnase3.SW <- smooth_table(table.rnase3)
# Get the proper rownames for the tables
colnames(table.ctrl1.SW) <- colnames(table.ctrl1)
colnames(table.ctrl2.SW) <- colnames(table.ctrl2)
colnames(table.ctrl3.SW) <- colnames(table.ctrl3)
colnames(table.rnase1.SW) <- colnames(table.rnase1)
colnames(table.rnase2.SW) <- colnames(table.rnase2)
colnames(table.rnase3.SW) <- colnames(table.rnase3)
View(table.ctrl1.SW)
# Normalization of the fractions: Sum of all fraction values equals 100 (%)
normalize_table <- function(tbl) {
tbl * 100 / rowSums(tbl)
}
tables.ctrl <- list(
ctrl1 = table.ctrl1.SW,
ctrl2 = table.ctrl2.SW,
ctrl3 = table.ctrl3.SW)
tables.rnase <- list(
rnase1 = table.rnase1.SW,
rnase2 = table.rnase2.SW,
rnase3 = table.rnase3.SW)
# Calculation of the percentages of the fractions in the normalized table (table.ctrl1.SW)
norm_tables.ctrl <- lapply(tables.ctrl, normalize_table)
norm_tables.rnase <- lapply(tables.rnase, normalize_table)
norm_tables.rnase$rnase1
# Function for replacing NA and NaN with 0
clean_table <- function(tbl) {
tbl <- rapply(tbl, function(x) ifelse(is.na(x), 0, x), how = "replace")
tbl <- rapply(tbl, function(x) ifelse(is.nan(x), 0, x), how = "replace")
return(tbl)
}
#tables.norm.ctrl <- list(
#  ctrl1 = table.ctrl1.SW.norm,
#  ctrl2 = table.ctrl2.SW.norm,
#  ctrl3 = table.ctrl3.SW.norm)
#tables.norm.rnase <- list(
#  rnase1 = table.rnase1.SW.norm,
#  rnase2 = table.rnase2.SW.norm,
#  rnase3 = table.rnase3.SW.norm)
# Getting the clean table
tables.norm.ctrl <- lapply(norm_tables.ctrl, clean_table)
tables.norm.rnase <- lapply(norm_tables.rnase, clean_table)
#View(tables.norm.ctrl$ctrl1)
my.list.ctrl.norm <- list(table.ctrl1.SW, table.ctrl2.SW, table.ctrl3.SW)
my.list.rnase.norm <- list(table.rnase1.SW, table.rnase2.SW, table.rnase3.SW)
# Addition of all data-frames in the list my.list.ctrl.norm (element-wise) and Division of the Sum with 3 to get the mean of all 3 replicates
ctrl_norm_mean <- Reduce("+", my.list.ctrl.norm)/length(my.list.ctrl.norm)
rnase_norm_mean <- Reduce("+", my.list.rnase.norm)/length(my.list.rnase.norm)
# Change names of the columns: from "fraction1" to "fraction25"
col_fractions <- paste("fraction",1:25,sep="")
colnames(ctrl_norm_mean) <- col_fractions
colnames(rnase_norm_mean) <- col_fractions
# second normalization of the fractions (mean destroyed first normalization): Sum of all fraction values equals 100 (%)
ctrl_norm_mean <- ctrl_norm_mean*100/rowSums(ctrl_norm_mean)
rnase_norm_mean <- rnase_norm_mean*100/rowSums(rnase_norm_mean)
# Function for replacing NA and NaN with 0
replace_na_nan <- function(x) rapply(x, function(y) ifelse(is.na(y) | is.nan(y), 0, y), how = "replace")
ctrl_norm_mean <- replace_na_nan(ctrl_norm_mean)
rnase_norm_mean <- replace_na_nan(rnase_norm_mean)
# If a curve is 0 in all fractions, the other fraction is also set to 0 and is excluded from the analysis
ctrl_norm_mean[rowSums(rnase_norm_mean[1:25])==0,] <- 0
rnase_norm_mean[rowSums(ctrl_norm_mean[1:25])==0,] <- 0
View(ctrl_norm_mean)
View(rnase_norm_mean)
#Function find_peaks
#Peak is local maximum with "window" points on each side being smaller than it
#Bigger window =>more stringent peak finding procedure
find_peaks <- function(x, window = 2) {
slope_changes <- diff(sign(diff(x)))
peak_indices <- which(slope_changes < 0)
peaks <- c()
for (i in peak_indices) {
left <- max(1, i - window + 1)
right <- min(length(x), i + window + 1)
neighbors <- c(x[left:i], x[(i + 2):right])
if (all(neighbors <= x[i + 1])) {
peaks <- c(peaks, i + 1)
}
}
# part added to deal with plateaux
# Ergibt diese Operation überhaupt Sinn, Plateaus haben ja auch nur einen Hochpunkt, und alle anderen (ähnlichen) werden doch ohnehin nicht erkannt werden?
n = length(peaks)
if (n>1) {
rem <- numeric(0)
for (i in 1:(n-1)) { if  ((peaks[i]+1) == peaks[(i+1)]) {rem <- c(rem, peaks[i+1]) } }
for (i in 1:(n-1)) { if  ((peaks[i]+2) == peaks[(i+1)]) {rem <- c(rem, peaks[i+1]) } }
peaks <- peaks[! peaks%in% rem]
}
# part added to deal with the 1st and 25th values, in case they are max
if ( sum(x[1]>x[2:(window+1)]) == 2 ) {peaks <- c(peaks, 1)}
if ( sum(x[25]>x[24:(25-window)]) == 2 ) {peaks <- c(peaks, 25)}
peaks <- unlist(peaks)
peaks
#return(peaks)
}
#Test, ob die Peak-Positionen richtig ausgegeben werden
#test_vec2 = as.numeric(ctrl_norm_mean[4, ])
#find_peaks(test_vec2)
#z = c(30, 2, 2, 2, 2, 2, 5, 4, 3, 2, 2, 2, 2, 2, 31, 30, 31, 32, 2, 2, 2, 2, 2, 2, 30)
#find_peaks(z)
# Apply the function to the data set and retrieve the values
# restriction to values above an absolut threshold of 2%
# New column: "maxima" (column 26)
ctrl_norm_mean$maxima <- apply(ctrl_norm_mean, 1, function(x) {
list <- find_peaks(x)
list <- list[x[list] > 2]
list <- unlist(list)
list
})
rnase_norm_mean$maxima <- apply(rnase_norm_mean, 1, function(x) {
list <- find_peaks(x)
list <- list[x[list] > 2]
list <- unlist(list)
list
})
# Get fractions where (RNASE fraction value > 2%). Dataframe with 0/1 and RNASE maxima
# Define new tables called ctrl_3 and rnase_3 that will be used temporary
rnase_3 <- rnase_norm_mean
rnase_3[1:25] <- (rnase_norm_mean[1:25] > 2)*1
# Get fractions where (CTRL fraction value > 2%). Dataframe with 0/1 and CTRL maxima
ctrl_3 <- ctrl_norm_mean
ctrl_3[1:25] <- (ctrl_norm_mean[1:25] > 2)*1
View(ctrl_3)
# Get fractions where (RNASE fraction value > 2%). Dataframe with 0/1 and RNASE maxima
# Define new tables called ctrl_3 and rnase_3 that will be used temporary
rnase_3 <- rnase_norm_mean
rnase_3[1:25] <- (rnase_norm_mean[1:25] > 2)*1
# Get fractions where (CTRL fraction value > 2%). Dataframe with 0/1 and CTRL maxima
ctrl_3 <- ctrl_norm_mean
ctrl_3[1:25] <- (ctrl_norm_mean[1:25] > 2)
View(ctrl_3)
# Get fractions where (RNASE fraction value > 2%). Dataframe with 0/1 and RNASE maxima
# Define new tables called ctrl_3 and rnase_3 that will be used temporary
rnase_3 <- rnase_norm_mean
rnase_3[1:25] <- (rnase_norm_mean[1:25] > 2)*1
# Get fractions where (CTRL fraction value > 2%). Dataframe with 0/1 and CTRL maxima
ctrl_3 <- ctrl_norm_mean
ctrl_3[1:25] <- (ctrl_norm_mean[1:25] > 2)*1
View(ctrl_3)
as.numeric(unlist(ctrl_norm_mean$maxima))
View(ctrl_norm_mean)
# Remove regions around maxima (3 fractions) in order not to identify those regions as "shoulder"
th_max_reg <- function(x) {
ls <- as.numeric(unlist(x$maxima))
n <- length(ls)
dt <- as.data.frame(matrix(rep(1,25),1,25))
if (n == 0) {dt[1:25] = 1} else {
for (i in 1:n) {
if (ls[i] < 1) {dt[1:25] = 1}
else if (ls[i] == 1) {dt[1:4] = 0}
else if (ls[i] == 2) {dt[1:5] = 0}
else if (ls[i] == 3) {dt[1:6] = 0}
else if (ls[i] == 4) {dt[1:7] = 0}
else if (ls[i] == 5) {dt[1:8] = 0}
else if (ls[i]>=6  && ls[i]<=20) {dt[(ls[i]-3):(ls[i]+3)] = 0}
else if (ls[i] == 21) {dt[18:24] = 0}
else if (ls[i] == 22) {dt[19:25] = 0}
else if (ls[i] == 23) {dt[20:25] = 0}
else if (ls[i] == 24) {dt[21:25] = 0}
else {dt[22:25] = 0}
}
}
x[1:25] <- x[1:25]*dt
x <- unlist(x)
x[1:25]
}
rnase_3[1:25] <- t(apply( rnase_3, 1, function(x) {th_max_reg(x)} ))
ctrl_3[1:25] <- t(apply( ctrl_3, 1, function(x) {th_max_reg(x)} ))
View(ctrl_norm_mean)
View(ctrl_3)
# Get fractions where (RNASE fraction value > 2%). Dataframe with 0/1 and RNASE maxima
# Define new tables called ctrl_3 and rnase_3 that will be used temporary
rnase_3 <- rnase_norm_mean
rnase_3[1:25] <- (rnase_norm_mean[1:25] > 2)*1
# Get fractions where (CTRL fraction value > 2%). Dataframe with 0/1 and CTRL maxima
ctrl_3 <- ctrl_norm_mean
ctrl_3[1:25] <- (ctrl_norm_mean[1:25] > 2)*1
View(ctrl_3)
View(ctrl_3)
# Remove regions around maxima (3 fractions) in order not to identify those regions as "shoulder"
th_max_reg <- function(x) {
ls <- as.numeric(unlist(x$maxima))
n <- length(ls)
dt <- as.data.frame(matrix(rep(1,25),1,25))
if (n == 0) {dt[1:25] = 1} else {
for (i in 1:n) {
if (ls[i] < 1) {dt[1:25] = 1}
else if (ls[i] == 1) {dt[1:4] = 0}
else if (ls[i] == 2) {dt[1:5] = 0}
else if (ls[i] == 3) {dt[1:6] = 0}
else if (ls[i] == 4) {dt[1:7] = 0}
else if (ls[i] == 5) {dt[1:8] = 0}
else if (ls[i]>=6  && ls[i]<=20) {dt[(ls[i]-3):(ls[i]+3)] = 0}
else if (ls[i] == 21) {dt[18:24] = 0}
else if (ls[i] == 22) {dt[19:25] = 0}
else if (ls[i] == 23) {dt[20:25] = 0}
else if (ls[i] == 24) {dt[21:25] = 0}
else {dt[22:25] = 0}
}
}
x[1:25] <- x[1:25]*dt
x <- unlist(x)
x[1:25]
}
rnase_3[1:25] <- t(apply( rnase_3, 1, function(x) {th_max_reg(x)} ))
ctrl_3[1:25] <- t(apply( ctrl_3, 1, function(x) {th_max_reg(x)} ))
View(ctrl_3)
# Remove regions around maxima (3 fractions) in order not to identify those regions as "shoulder"
# Wie können überhaupt noch Werte auf "1" bleiben, sie können natürlich mehr als 2% haben, aber einer hätte als Maximum erkannt werden müssen, und somit hätten alle anderen drum herum gestrichen werden müssen?!
th_max_reg <- function(x) {
ls <- as.numeric(unlist(x$maxima))
n <- length(ls)
dt <- as.data.frame(matrix(rep(1,25),1,25))
if (n == 0) {dt[1:25] = 1} else {
for (i in 1:n) {
if (ls[i] < 1) {dt[1:25] = 1}
else if (ls[i] == 1) {dt[1:4] = 0}
else if (ls[i] == 2) {dt[1:5] = 0}
else if (ls[i] == 3) {dt[1:6] = 0}
else if (ls[i] == 4) {dt[1:7] = 0}
else if (ls[i] == 5) {dt[1:8] = 0}
else if (ls[i]>=6  && ls[i]<=20) {dt[(ls[i]-3):(ls[i]+3)] = 0}
else if (ls[i] == 21) {dt[18:24] = 0}
else if (ls[i] == 22) {dt[19:25] = 0}
else if (ls[i] == 23) {dt[20:25] = 0}
else if (ls[i] == 24) {dt[21:25] = 0}
else {dt[22:25] = 0}
}
}
x[1:25] <- x[1:25]*dt
x <- unlist(x)
x[1:25]
}
rnase_3[1:25] <- t(apply( rnase_3, 1, function(x) {th_max_reg(x)} ))
ctrl_3[1:25] <- t(apply( ctrl_3, 1, function(x) {th_max_reg(x)} ))
View(ctrl_3)
View(ctrl_norm_mean)
# Get fractions where (RNASE fraction value > 2%). Dataframe with 0/1 and RNASE maxima
# Define new tables called ctrl_3 and rnase_3 that will be used temporary
rnase_3 <- rnase_norm_mean
rnase_3[1:25] <- (rnase_norm_mean[1:25] > 2)*1
# Get fractions where (CTRL fraction value > 2%). Dataframe with 0/1 and CTRL maxima
ctrl_3 <- ctrl_norm_mean
ctrl_3[1:25] <- (ctrl_norm_mean[1:25] > 2)*1
# Get fractions where (RNASE fraction value > 2%). Dataframe with 0/1 and RNASE maxima
# Define new tables called ctrl_3 and rnase_3 that will be used temporary
rnase_3 <- rnase_norm_mean
rnase_3[1:25] <- (rnase_norm_mean[1:25] > 2)*1
# Get fractions where (CTRL fraction value > 2%). Dataframe with 0/1 and CTRL maxima
ctrl_3 <- ctrl_norm_mean
ctrl_3[1:25] <- (ctrl_norm_mean[1:25] > 2)
View(ctrl_3)
# Get fractions where (RNASE fraction value > 2%). Dataframe with 0/1 and RNASE maxima
# Define new tables called ctrl_3 and rnase_3 that will be used temporary
rnase_3 <- rnase_norm_mean
rnase_3[1:25] <- (rnase_norm_mean[1:25] > 2)*1
# Get fractions where (CTRL fraction value > 2%). Dataframe with 0/1 and CTRL maxima
ctrl_3 <- ctrl_norm_mean
ctrl_3[1:25] <- (ctrl_norm_mean[1:25] > 2)*1
# Remove regions around maxima (3 fractions) in order not to identify those regions as "shoulder"
# Wie können überhaupt noch Werte auf "1" bleiben, sie können natürlich mehr als 2% haben, aber einer hätte als Maximum erkannt werden müssen, und somit hätten alle anderen drum herum gestrichen werden müssen?!
th_max_reg <- function(x) {
ls <- as.numeric(unlist(x$maxima))
n <- length(ls)
dt <- as.data.frame(matrix(rep(1,25),1,25))
if (n == 0) {dt[1:25] = 1} else {
for (i in 1:n) {
if (ls[i] < 1) {dt[1:25] = 1}
else if (ls[i] == 1) {dt[1:4] = 0}
else if (ls[i] == 2) {dt[1:5] = 0}
else if (ls[i] == 3) {dt[1:6] = 0}
else if (ls[i] == 4) {dt[1:7] = 0}
else if (ls[i] == 5) {dt[1:8] = 0}
else if (ls[i]>=6  && ls[i]<=20) {dt[(ls[i]-3):(ls[i]+3)] = 0}
else if (ls[i] == 21) {dt[18:24] = 0}
else if (ls[i] == 22) {dt[19:25] = 0}
else if (ls[i] == 23) {dt[20:25] = 0}
else if (ls[i] == 24) {dt[21:25] = 0}
else {dt[22:25] = 0}
}
}
x[1:25] <- x[1:25]*dt
x <- unlist(x)
x[1:25]
}
rnase_3[1:25] <- t(apply( rnase_3, 1, function(x) {th_max_reg(x)} ))
ctrl_3[1:25] <- t(apply( ctrl_3, 1, function(x) {th_max_reg(x)} ))
View(colmns_sorted)
View(ctrl_3)
