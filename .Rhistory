data3 <- data.frame(row.names=colnames(table.frxn1), treatment = rep(c("CTRL", "RNASE"),3), condition = c("ctrl1","rnase1","ctrl2","rnase2","ctrl3","rnase3"))
table.frxn1.CTRL <- table.frxn1[,data3$treatment == "CTRL"]
table.frxn1.RNASE <- table.frxn1[,data3$treatment == "RNASE"]
table.frxn2.CTRL <- table.frxn2[,data3$treatment == "CTRL"]
table.frxn2.RNASE <- table.frxn2[,data3$treatment == "RNASE"]
table.frxn3.CTRL <- table.frxn3[,data3$treatment == "CTRL"]
table.frxn3.RNASE <- table.frxn3[,data3$treatment == "RNASE"]
table.frxn4.CTRL <- table.frxn4[,data3$treatment == "CTRL"]
table.frxn4.RNASE <- table.frxn4[,data3$treatment == "RNASE"]
table.frxn5.CTRL <- table.frxn5[,data3$treatment == "CTRL"]
table.frxn5.RNASE <- table.frxn5[,data3$treatment == "RNASE"]
table.frxn6.CTRL <- table.frxn6[,data3$treatment == "CTRL"]
table.frxn6.RNASE <- table.frxn6[,data3$treatment == "RNASE"]
table.frxn7.CTRL <- table.frxn7[,data3$treatment == "CTRL"]
table.frxn7.RNASE <- table.frxn7[,data3$treatment == "RNASE"]
table.frxn8.CTRL <- table.frxn8[,data3$treatment == "CTRL"]
table.frxn8.RNASE <- table.frxn8[,data3$treatment == "RNASE"]
table.frxn9.CTRL <- table.frxn9[,data3$treatment == "CTRL"]
table.frxn9.RNASE <- table.frxn9[,data3$treatment == "RNASE"]
table.frxn10.CTRL <- table.frxn10[,data3$treatment == "CTRL"]
table.frxn10.RNASE <- table.frxn10[,data3$treatment == "RNASE"]
table.frxn11.CTRL <- table.frxn11[,data3$treatment == "CTRL"]
table.frxn11.RNASE <- table.frxn11[,data3$treatment == "RNASE"]
table.frxn12.CTRL <- table.frxn12[,data3$treatment == "CTRL"]
table.frxn12.RNASE <- table.frxn12[,data3$treatment == "RNASE"]
table.frxn13.CTRL <- table.frxn13[,data3$treatment == "CTRL"]
table.frxn13.RNASE <- table.frxn13[,data3$treatment == "RNASE"]
table.frxn14.CTRL <- table.frxn14[,data3$treatment == "CTRL"]
table.frxn14.RNASE <- table.frxn14[,data3$treatment == "RNASE"]
table.frxn15.CTRL <- table.frxn15[,data3$treatment == "CTRL"]
table.frxn15.RNASE <- table.frxn15[,data3$treatment == "RNASE"]
table.frxn16.CTRL <- table.frxn16[,data3$treatment == "CTRL"]
table.frxn16.RNASE <- table.frxn16[,data3$treatment == "RNASE"]
table.frxn17.CTRL <- table.frxn17[,data3$treatment == "CTRL"]
table.frxn17.RNASE <- table.frxn17[,data3$treatment == "RNASE"]
table.frxn18.CTRL <- table.frxn18[,data3$treatment == "CTRL"]
table.frxn18.RNASE <- table.frxn18[,data3$treatment == "RNASE"]
table.frxn19.CTRL <- table.frxn19[,data3$treatment == "CTRL"]
table.frxn19.RNASE <- table.frxn19[,data3$treatment == "RNASE"]
table.frxn20.CTRL <- table.frxn20[,data3$treatment == "CTRL"]
table.frxn20.RNASE <- table.frxn20[,data3$treatment == "RNASE"]
table.frxn21.CTRL <- table.frxn21[,data3$treatment == "CTRL"]
table.frxn21.RNASE <- table.frxn21[,data3$treatment == "RNASE"]
table.frxn22.CTRL <- table.frxn22[,data3$treatment == "CTRL"]
table.frxn22.RNASE <- table.frxn22[,data3$treatment == "RNASE"]
table.frxn23.CTRL <- table.frxn23[,data3$treatment == "CTRL"]
table.frxn23.RNASE <- table.frxn23[,data3$treatment == "RNASE"]
table.frxn24.CTRL <- table.frxn24[,data3$treatment == "CTRL"]
table.frxn24.RNASE <- table.frxn24[,data3$treatment == "RNASE"]
table.frxn25.CTRL <- table.frxn25[,data3$treatment == "CTRL"]
table.frxn25.RNASE <- table.frxn25[,data3$treatment == "RNASE"]
# Determine average values for each treatment, each fraction and each replicate. Here, the values for the three replicates are stored in the same table
# Each vector contains the average protein value across all proteins for each of its 3 replicates.
avg.table.frxn1.CTRL <- sapply(table.frxn1.CTRL, function(x) mean(x))
avg.table.frxn2.CTRL <- sapply(table.frxn2.CTRL, function(x) mean(x))
avg.table.frxn3.CTRL <- sapply(table.frxn3.CTRL, function(x) mean(x))
avg.table.frxn4.CTRL <- sapply(table.frxn4.CTRL, function(x) mean(x))
avg.table.frxn5.CTRL <- sapply(table.frxn5.CTRL, function(x) mean(x))
avg.table.frxn6.CTRL <- sapply(table.frxn6.CTRL, function(x) mean(x))
avg.table.frxn7.CTRL <- sapply(table.frxn7.CTRL, function(x) mean(x))
avg.table.frxn8.CTRL <- sapply(table.frxn8.CTRL, function(x) mean(x))
avg.table.frxn9.CTRL <- sapply(table.frxn9.CTRL, function(x) mean(x))
avg.table.frxn10.CTRL <- sapply(table.frxn10.CTRL, function(x) mean(x))
avg.table.frxn11.CTRL <- sapply(table.frxn11.CTRL, function(x) mean(x))
avg.table.frxn12.CTRL <- sapply(table.frxn12.CTRL, function(x) mean(x))
avg.table.frxn13.CTRL <- sapply(table.frxn13.CTRL, function(x) mean(x))
avg.table.frxn14.CTRL <- sapply(table.frxn14.CTRL, function(x) mean(x))
avg.table.frxn15.CTRL <- sapply(table.frxn15.CTRL, function(x) mean(x))
avg.table.frxn16.CTRL <- sapply(table.frxn16.CTRL, function(x) mean(x))
avg.table.frxn17.CTRL <- sapply(table.frxn17.CTRL, function(x) mean(x))
avg.table.frxn18.CTRL <- sapply(table.frxn18.CTRL, function(x) mean(x))
avg.table.frxn19.CTRL <- sapply(table.frxn19.CTRL, function(x) mean(x))
avg.table.frxn20.CTRL <- sapply(table.frxn20.CTRL, function(x) mean(x))
avg.table.frxn21.CTRL <- sapply(table.frxn21.CTRL, function(x) mean(x))
avg.table.frxn22.CTRL <- sapply(table.frxn22.CTRL, function(x) mean(x))
avg.table.frxn23.CTRL <- sapply(table.frxn23.CTRL, function(x) mean(x))
avg.table.frxn24.CTRL <- sapply(table.frxn24.CTRL, function(x) mean(x))
avg.table.frxn25.CTRL <- sapply(table.frxn25.CTRL, function(x) mean(x))
avg.table.frxn1.RNASE <- sapply(table.frxn1.RNASE, function(x) mean(x))
avg.table.frxn2.RNASE <- sapply(table.frxn2.RNASE, function(x) mean(x))
avg.table.frxn3.RNASE <- sapply(table.frxn3.RNASE, function(x) mean(x))
avg.table.frxn4.RNASE <- sapply(table.frxn4.RNASE, function(x) mean(x))
avg.table.frxn5.RNASE <- sapply(table.frxn5.RNASE, function(x) mean(x))
avg.table.frxn6.RNASE <- sapply(table.frxn6.RNASE, function(x) mean(x))
avg.table.frxn7.RNASE <- sapply(table.frxn7.RNASE, function(x) mean(x))
avg.table.frxn8.RNASE <- sapply(table.frxn8.RNASE, function(x) mean(x))
avg.table.frxn9.RNASE <- sapply(table.frxn9.RNASE, function(x) mean(x))
avg.table.frxn10.RNASE <- sapply(table.frxn10.RNASE, function(x) mean(x))
avg.table.frxn11.RNASE <- sapply(table.frxn11.RNASE, function(x) mean(x))
avg.table.frxn12.RNASE <- sapply(table.frxn12.RNASE, function(x) mean(x))
avg.table.frxn13.RNASE <- sapply(table.frxn13.RNASE, function(x) mean(x))
avg.table.frxn14.RNASE <- sapply(table.frxn14.RNASE, function(x) mean(x))
avg.table.frxn15.RNASE <- sapply(table.frxn15.RNASE, function(x) mean(x))
avg.table.frxn16.RNASE <- sapply(table.frxn16.RNASE, function(x) mean(x))
avg.table.frxn17.RNASE <- sapply(table.frxn17.RNASE, function(x) mean(x))
avg.table.frxn18.RNASE <- sapply(table.frxn18.RNASE, function(x) mean(x))
avg.table.frxn19.RNASE <- sapply(table.frxn19.RNASE, function(x) mean(x))
avg.table.frxn20.RNASE <- sapply(table.frxn20.RNASE, function(x) mean(x))
avg.table.frxn21.RNASE <- sapply(table.frxn21.RNASE, function(x) mean(x))
avg.table.frxn22.RNASE <- sapply(table.frxn22.RNASE, function(x) mean(x))
avg.table.frxn23.RNASE <- sapply(table.frxn23.RNASE, function(x) mean(x))
avg.table.frxn24.RNASE <- sapply(table.frxn24.RNASE, function(x) mean(x))
avg.table.frxn25.RNASE <- sapply(table.frxn25.RNASE, function(x) mean(x))
# Determine normalization factor for each condition (i.e. sample), as the mean of the 2 most similar replicates.
# Create a function norm_fact for this step:
norm_fact <- function(x) {
if( (abs(x[1]-x[2])<abs(x[1]-x[3])) && (abs(x[1]-x[2])<abs(x[2]-x[3])) )
{mean(c(x[1],x[2]))} else if( (abs(x[1]-x[3])<abs(x[1]-x[2])) && (abs(x[1]-x[3])<abs(x[2]-x[3])) )
{mean(c(x[1],x[3]))} else {mean(c(x[2],x[3]))}
}
# Determine the normalization factor for very replicate for the CTRL fractions and for the RNASE fractions
# Normalization factors are calculated by dividing the mean of the two most similar replicates by the average protein value across all proteins for each of the three replicates.
# -> Reduces the influence of outlier replicates and ensures more robust normalization
norm_mean_frxn1_CTRL <-  norm_fact(avg.table.frxn1.CTRL)/avg.table.frxn1.CTRL
norm_mean_frxn2_CTRL <-  norm_fact(avg.table.frxn2.CTRL)/avg.table.frxn2.CTRL
norm_mean_frxn3_CTRL <-  norm_fact(avg.table.frxn3.CTRL)/avg.table.frxn3.CTRL
norm_mean_frxn4_CTRL <-  norm_fact(avg.table.frxn4.CTRL)/avg.table.frxn4.CTRL
norm_mean_frxn5_CTRL <-  norm_fact(avg.table.frxn5.CTRL)/avg.table.frxn5.CTRL
norm_mean_frxn6_CTRL <-  norm_fact(avg.table.frxn6.CTRL)/avg.table.frxn6.CTRL
norm_mean_frxn7_CTRL <-  norm_fact(avg.table.frxn7.CTRL)/avg.table.frxn7.CTRL
norm_mean_frxn8_CTRL <-  norm_fact(avg.table.frxn8.CTRL)/avg.table.frxn8.CTRL
norm_mean_frxn9_CTRL <-  norm_fact(avg.table.frxn9.CTRL)/avg.table.frxn9.CTRL
norm_mean_frxn10_CTRL <-  norm_fact(avg.table.frxn10.CTRL)/avg.table.frxn10.CTRL
norm_mean_frxn11_CTRL <-  norm_fact(avg.table.frxn11.CTRL)/avg.table.frxn11.CTRL
norm_mean_frxn12_CTRL <-  norm_fact(avg.table.frxn12.CTRL)/avg.table.frxn12.CTRL
norm_mean_frxn13_CTRL <-  norm_fact(avg.table.frxn13.CTRL)/avg.table.frxn13.CTRL
norm_mean_frxn14_CTRL <-  norm_fact(avg.table.frxn14.CTRL)/avg.table.frxn14.CTRL
norm_mean_frxn15_CTRL <-  norm_fact(avg.table.frxn15.CTRL)/avg.table.frxn15.CTRL
norm_mean_frxn16_CTRL <-  norm_fact(avg.table.frxn16.CTRL)/avg.table.frxn16.CTRL
norm_mean_frxn17_CTRL <-  norm_fact(avg.table.frxn17.CTRL)/avg.table.frxn17.CTRL
norm_mean_frxn18_CTRL <-  norm_fact(avg.table.frxn18.CTRL)/avg.table.frxn18.CTRL
norm_mean_frxn19_CTRL <-  norm_fact(avg.table.frxn19.CTRL)/avg.table.frxn19.CTRL
norm_mean_frxn20_CTRL <-  norm_fact(avg.table.frxn20.CTRL)/avg.table.frxn20.CTRL
norm_mean_frxn21_CTRL <-  norm_fact(avg.table.frxn21.CTRL)/avg.table.frxn21.CTRL
norm_mean_frxn22_CTRL <-  norm_fact(avg.table.frxn22.CTRL)/avg.table.frxn22.CTRL
norm_mean_frxn23_CTRL <-  norm_fact(avg.table.frxn23.CTRL)/avg.table.frxn23.CTRL
norm_mean_frxn24_CTRL <-  norm_fact(avg.table.frxn24.CTRL)/avg.table.frxn24.CTRL
norm_mean_frxn25_CTRL <-  norm_fact(avg.table.frxn25.CTRL)/avg.table.frxn25.CTRL
norm_mean_frxn1_RNASE <-  norm_fact(avg.table.frxn1.RNASE)/avg.table.frxn1.RNASE
norm_mean_frxn2_RNASE <-  norm_fact(avg.table.frxn2.RNASE)/avg.table.frxn2.RNASE
norm_mean_frxn3_RNASE <-  norm_fact(avg.table.frxn3.RNASE)/avg.table.frxn3.RNASE
norm_mean_frxn4_RNASE <-  norm_fact(avg.table.frxn4.RNASE)/avg.table.frxn4.RNASE
norm_mean_frxn5_RNASE <-  norm_fact(avg.table.frxn5.RNASE)/avg.table.frxn5.RNASE
norm_mean_frxn6_RNASE <-  norm_fact(avg.table.frxn6.RNASE)/avg.table.frxn6.RNASE
norm_mean_frxn7_RNASE <-  norm_fact(avg.table.frxn7.RNASE)/avg.table.frxn7.RNASE
norm_mean_frxn8_RNASE <-  norm_fact(avg.table.frxn8.RNASE)/avg.table.frxn8.RNASE
norm_mean_frxn9_RNASE <-  norm_fact(avg.table.frxn9.RNASE)/avg.table.frxn9.RNASE
norm_mean_frxn10_RNASE <-  norm_fact(avg.table.frxn10.RNASE)/avg.table.frxn10.RNASE
norm_mean_frxn11_RNASE <-  norm_fact(avg.table.frxn11.RNASE)/avg.table.frxn11.RNASE
norm_mean_frxn12_RNASE <-  norm_fact(avg.table.frxn12.RNASE)/avg.table.frxn12.RNASE
norm_mean_frxn13_RNASE <-  norm_fact(avg.table.frxn13.RNASE)/avg.table.frxn13.RNASE
norm_mean_frxn14_RNASE <-  norm_fact(avg.table.frxn14.RNASE)/avg.table.frxn14.RNASE
norm_mean_frxn15_RNASE <-  norm_fact(avg.table.frxn15.RNASE)/avg.table.frxn15.RNASE
norm_mean_frxn16_RNASE <-  norm_fact(avg.table.frxn16.RNASE)/avg.table.frxn16.RNASE
norm_mean_frxn17_RNASE <-  norm_fact(avg.table.frxn17.RNASE)/avg.table.frxn17.RNASE
norm_mean_frxn18_RNASE <-  norm_fact(avg.table.frxn18.RNASE)/avg.table.frxn18.RNASE
norm_mean_frxn19_RNASE <-  norm_fact(avg.table.frxn19.RNASE)/avg.table.frxn19.RNASE
norm_mean_frxn20_RNASE <-  norm_fact(avg.table.frxn20.RNASE)/avg.table.frxn20.RNASE
norm_mean_frxn21_RNASE <-  norm_fact(avg.table.frxn21.RNASE)/avg.table.frxn21.RNASE
norm_mean_frxn22_RNASE <-  norm_fact(avg.table.frxn22.RNASE)/avg.table.frxn22.RNASE
norm_mean_frxn23_RNASE <-  norm_fact(avg.table.frxn23.RNASE)/avg.table.frxn23.RNASE
norm_mean_frxn24_RNASE <-  norm_fact(avg.table.frxn24.RNASE)/avg.table.frxn24.RNASE
norm_mean_frxn25_RNASE <-  norm_fact(avg.table.frxn25.RNASE)/avg.table.frxn25.RNASE
# Compute vectors containing the normalization factors for the respective treatment and replicates and fractions 1 to 25
# Korrekturfaktor für die overall Proteinmenge?!
norm.ctrl1 <- c(norm_mean_frxn1_CTRL[1],norm_mean_frxn2_CTRL[1],norm_mean_frxn3_CTRL[1],norm_mean_frxn4_CTRL[1],norm_mean_frxn5_CTRL[1],norm_mean_frxn6_CTRL[1],norm_mean_frxn7_CTRL[1],norm_mean_frxn8_CTRL[1],norm_mean_frxn9_CTRL[1],norm_mean_frxn10_CTRL[1],norm_mean_frxn11_CTRL[1],norm_mean_frxn12_CTRL[1],norm_mean_frxn13_CTRL[1],norm_mean_frxn14_CTRL[1],norm_mean_frxn15_CTRL[1],norm_mean_frxn16_CTRL[1],norm_mean_frxn17_CTRL[1],norm_mean_frxn18_CTRL[1],norm_mean_frxn19_CTRL[1],norm_mean_frxn20_CTRL[1],norm_mean_frxn21_CTRL[1],norm_mean_frxn22_CTRL[1],norm_mean_frxn23_CTRL[1],norm_mean_frxn24_CTRL[1],norm_mean_frxn25_CTRL[1])
norm.ctrl2 <- c(norm_mean_frxn1_CTRL[2],norm_mean_frxn2_CTRL[2],norm_mean_frxn3_CTRL[2],norm_mean_frxn4_CTRL[2],norm_mean_frxn5_CTRL[2],norm_mean_frxn6_CTRL[2],norm_mean_frxn7_CTRL[2],norm_mean_frxn8_CTRL[2],norm_mean_frxn9_CTRL[2],norm_mean_frxn10_CTRL[2],norm_mean_frxn11_CTRL[2],norm_mean_frxn12_CTRL[2],norm_mean_frxn13_CTRL[2],norm_mean_frxn14_CTRL[2],norm_mean_frxn15_CTRL[2],norm_mean_frxn16_CTRL[2],norm_mean_frxn17_CTRL[2],norm_mean_frxn18_CTRL[2],norm_mean_frxn19_CTRL[2],norm_mean_frxn20_CTRL[2],norm_mean_frxn21_CTRL[2],norm_mean_frxn22_CTRL[2],norm_mean_frxn23_CTRL[2],norm_mean_frxn24_CTRL[2],norm_mean_frxn25_CTRL[2])
norm.ctrl3 <- c(norm_mean_frxn1_CTRL[3],norm_mean_frxn2_CTRL[3],norm_mean_frxn3_CTRL[3],norm_mean_frxn4_CTRL[3],norm_mean_frxn5_CTRL[3],norm_mean_frxn6_CTRL[3],norm_mean_frxn7_CTRL[3],norm_mean_frxn8_CTRL[3],norm_mean_frxn9_CTRL[3],norm_mean_frxn10_CTRL[3],norm_mean_frxn11_CTRL[3],norm_mean_frxn12_CTRL[3],norm_mean_frxn13_CTRL[3],norm_mean_frxn14_CTRL[3],norm_mean_frxn15_CTRL[3],norm_mean_frxn16_CTRL[3],norm_mean_frxn17_CTRL[3],norm_mean_frxn18_CTRL[3],norm_mean_frxn19_CTRL[3],norm_mean_frxn20_CTRL[3],norm_mean_frxn21_CTRL[3],norm_mean_frxn22_CTRL[3],norm_mean_frxn23_CTRL[3],norm_mean_frxn24_CTRL[3],norm_mean_frxn25_CTRL[3])
norm.rnase1 <- c(norm_mean_frxn1_RNASE[1],norm_mean_frxn2_RNASE[1],norm_mean_frxn3_RNASE[1],norm_mean_frxn4_RNASE[1],norm_mean_frxn5_RNASE[1],norm_mean_frxn6_RNASE[1],norm_mean_frxn7_RNASE[1],norm_mean_frxn8_RNASE[1],norm_mean_frxn9_RNASE[1],norm_mean_frxn10_RNASE[1],norm_mean_frxn11_RNASE[1],norm_mean_frxn12_RNASE[1],norm_mean_frxn13_RNASE[1],norm_mean_frxn14_RNASE[1],norm_mean_frxn15_RNASE[1],norm_mean_frxn16_RNASE[1],norm_mean_frxn17_RNASE[1],norm_mean_frxn18_RNASE[1],norm_mean_frxn19_RNASE[1],norm_mean_frxn20_RNASE[1],norm_mean_frxn21_RNASE[1],norm_mean_frxn22_RNASE[1],norm_mean_frxn23_RNASE[1],norm_mean_frxn24_RNASE[1],norm_mean_frxn25_RNASE[1])
norm.rnase2 <- c(norm_mean_frxn1_RNASE[2],norm_mean_frxn2_RNASE[2],norm_mean_frxn3_RNASE[2],norm_mean_frxn4_RNASE[2],norm_mean_frxn5_RNASE[2],norm_mean_frxn6_RNASE[2],norm_mean_frxn7_RNASE[2],norm_mean_frxn8_RNASE[2],norm_mean_frxn9_RNASE[2],norm_mean_frxn10_RNASE[2],norm_mean_frxn11_RNASE[2],norm_mean_frxn12_RNASE[2],norm_mean_frxn13_RNASE[2],norm_mean_frxn14_RNASE[2],norm_mean_frxn15_RNASE[2],norm_mean_frxn16_RNASE[2],norm_mean_frxn17_RNASE[2],norm_mean_frxn18_RNASE[2],norm_mean_frxn19_RNASE[2],norm_mean_frxn20_RNASE[2],norm_mean_frxn21_RNASE[2],norm_mean_frxn22_RNASE[2],norm_mean_frxn23_RNASE[2],norm_mean_frxn24_RNASE[2],norm_mean_frxn25_RNASE[2])
norm.rnase3 <- c(norm_mean_frxn1_RNASE[3],norm_mean_frxn2_RNASE[3],norm_mean_frxn3_RNASE[3],norm_mean_frxn4_RNASE[3],norm_mean_frxn5_RNASE[3],norm_mean_frxn6_RNASE[3],norm_mean_frxn7_RNASE[3],norm_mean_frxn8_RNASE[3],norm_mean_frxn9_RNASE[3],norm_mean_frxn10_RNASE[3],norm_mean_frxn11_RNASE[3],norm_mean_frxn12_RNASE[3],norm_mean_frxn13_RNASE[3],norm_mean_frxn14_RNASE[3],norm_mean_frxn15_RNASE[3],norm_mean_frxn16_RNASE[3],norm_mean_frxn17_RNASE[3],norm_mean_frxn18_RNASE[3],norm_mean_frxn19_RNASE[3],norm_mean_frxn20_RNASE[3],norm_mean_frxn21_RNASE[3],norm_mean_frxn22_RNASE[3],norm_mean_frxn23_RNASE[3],norm_mean_frxn24_RNASE[3],norm_mean_frxn25_RNASE[3])
# Define subtables for each treatment and each replicate
data.ctrl1 <- data$condition =="Ctrl_Rep1"
data.ctrl2 <- data$condition =="Ctrl_Rep2"
data.ctrl3 <- data$condition =="Ctrl_Rep3"
data.rnase1 <- data$condition =="RNase_Rep1"
data.rnase2 <- data$condition =="RNase_Rep2"
data.rnase3 <- data$condition =="RNase_Rep3"
# Normalization step, fraction-wise
table.ctrl1 <- data.frame(mapply('*', NS_Table[,data.ctrl1], norm.ctrl1, SIMPLIFY=FALSE))
table.ctrl2 <- data.frame(mapply('*', NS_Table[,data.ctrl2], norm.ctrl2, SIMPLIFY=FALSE))
table.ctrl3 <- data.frame(mapply('*', NS_Table[,data.ctrl3], norm.ctrl3, SIMPLIFY=FALSE))
table.rnase1 <- data.frame(mapply('*', NS_Table[,data.rnase1], norm.rnase1, SIMPLIFY=FALSE))
table.rnase2 <- data.frame(mapply('*', NS_Table[,data.rnase2], norm.rnase2, SIMPLIFY=FALSE))
table.rnase3 <- data.frame(mapply('*', NS_Table[,data.rnase3], norm.rnase3, SIMPLIFY=FALSE))
# Get the proper rownames for the tables
rownames(table.ctrl1) <- row_names
rownames(table.ctrl2) <- row_names
rownames(table.ctrl3) <- row_names
rownames(table.rnase1) <- row_names
rownames(table.rnase2) <- row_names
rownames(table.rnase3) <- row_names
#### Apply a sliding window/moving average of 3 points to the data ####
table.ctrl1.SW <- data.frame(table.ctrl1[1],(table.ctrl1[1:23]+table.ctrl1[2:24]+table.ctrl1[3:25])/3,table.ctrl1[25])
table.ctrl2.SW <- data.frame(table.ctrl2[1],(table.ctrl2[1:23]+table.ctrl2[2:24]+table.ctrl2[3:25])/3,table.ctrl2[25])
table.ctrl3.SW <- data.frame(table.ctrl3[1],(table.ctrl3[1:23]+table.ctrl3[2:24]+table.ctrl3[3:25])/3,table.ctrl3[25])
table.rnase1.SW <- data.frame(table.rnase1[1],(table.rnase1[1:23]+table.rnase1[2:24]+table.rnase1[3:25])/3,table.rnase1[25])
table.rnase2.SW <- data.frame(table.rnase2[1],(table.rnase2[1:23]+table.rnase2[2:24]+table.rnase2[3:25])/3,table.rnase2[25])
table.rnase3.SW <- data.frame(table.rnase3[1],(table.rnase3[1:23]+table.rnase3[2:24]+table.rnase3[3:25])/3,table.rnase3[25])
# Get the proper rownames for the tables
colnames(table.ctrl1.SW) <- colnames(table.ctrl1)
colnames(table.ctrl2.SW) <- colnames(table.ctrl2)
colnames(table.ctrl3.SW) <- colnames(table.ctrl3)
colnames(table.rnase1.SW) <- colnames(table.rnase1)
colnames(table.rnase2.SW) <- colnames(table.rnase2)
colnames(table.rnase3.SW) <- colnames(table.rnase3)
#### Normaliztion over the amount to sum = 100 (%) ####
table.ctrl1.SW.norm <- table.ctrl1.SW * 100 / rowSums(table.ctrl1.SW)
table.ctrl2.SW.norm <- table.ctrl2.SW * 100 / rowSums(table.ctrl2.SW)
table.ctrl3.SW.norm <- table.ctrl3.SW * 100 / rowSums(table.ctrl3.SW)
table.rnase1.SW.norm <- table.rnase1.SW * 100 / rowSums(table.rnase1.SW)
table.rnase2.SW.norm <- table.rnase2.SW * 100 / rowSums(table.rnase2.SW)
table.rnase3.SW.norm <- table.rnase3.SW * 100 / rowSums(table.rnase3.SW)
# Replace NA, NaN with 0 if any
table.ctrl1.SW.norm <- rapply(table.ctrl1.SW.norm, f=function(x) ifelse(is.na(x),0,x), how="replace")
table.ctrl2.SW.norm <- rapply(table.ctrl2.SW.norm, f=function(x) ifelse(is.na(x),0,x), how="replace" )
table.ctrl3.SW.norm <- rapply(table.ctrl3.SW.norm, f=function(x) ifelse(is.na(x),0,x), how="replace" )
table.rnase1.SW.norm <- rapply(table.rnase1.SW.norm, f=function(x) ifelse(is.na(x),0,x), how="replace" )
table.rnase2.SW.norm <- rapply(table.rnase2.SW.norm, f=function(x) ifelse(is.na(x),0,x), how="replace" )
table.rnase3.SW.norm <- rapply(table.rnase3.SW.norm, f=function(x) ifelse(is.na(x),0,x), how="replace" )
table.ctrl1.SW.norm <- rapply(table.ctrl1.SW.norm, f=function(x) ifelse(is.nan(x),0,x), how="replace")
table.ctrl2.SW.norm <- rapply(table.ctrl2.SW.norm, f=function(x) ifelse(is.nan(x),0,x), how="replace" )
table.ctrl3.SW.norm <- rapply(table.ctrl3.SW.norm, f=function(x) ifelse(is.nan(x),0,x), how="replace" )
table.rnase1.SW.norm <- rapply(table.rnase1.SW.norm, f=function(x) ifelse(is.nan(x),0,x), how="replace" )
table.rnase2.SW.norm <- rapply(table.rnase2.SW.norm, f=function(x) ifelse(is.nan(x),0,x), how="replace" )
table.rnase3.SW.norm <- rapply(table.rnase3.SW.norm, f=function(x) ifelse(is.nan(x),0,x), how="replace" )
# Average value for normalization of CTRL and RNASE samples to 100
my.list.ctrl.norm <- list(table.ctrl1.SW, table.ctrl2.SW, table.ctrl3.SW)
my.list.rnase.norm <- list(table.rnase1.SW, table.rnase2.SW, table.rnase3.SW)
ctrl_norm_mean <- Reduce("+", my.list.ctrl.norm)/length(my.list.ctrl.norm)
rnase_norm_mean <- Reduce("+", my.list.rnase.norm)/length(my.list.rnase.norm)
# Change names of the columns: from "fraction1" to "fraction25"
col_fractions <- paste("fraction",1:25,sep="")
colnames(ctrl_norm_mean) <- col_fractions
colnames(rnase_norm_mean) <- col_fractions
# Normalization to 100 for each protein (= the sum of the amount of protein from fraction1 to fraction25 is 100)
ctrl_norm_mean <- ctrl_norm_mean*100/rowSums(ctrl_norm_mean)
rnase_norm_mean <- rnase_norm_mean*100/rowSums(rnase_norm_mean)
# Replace the NaN and NA values by 0 if any
ctrl_norm_mean <- rapply(ctrl_norm_mean, f=function(x) ifelse(is.nan(x),0,x), how="replace")
rnase_norm_mean <- rapply(rnase_norm_mean, f=function(x) ifelse(is.nan(x),0,x), how="replace")
ctrl_norm_mean <- rapply(ctrl_norm_mean, f=function(x) ifelse(is.na(x),0,x), how="replace")
rnase_norm_mean <- rapply(rnase_norm_mean, f=function(x) ifelse(is.na(x),0,x), how="replace")
# If one of the curve is 0 over all the fractions of one condition, the other condition will be set to 0 to take it out of the analysis
ctrl_norm_mean[rowSums(rnase_norm_mean[1:25])==0,] <- 0
rnase_norm_mean[rowSums(ctrl_norm_mean[1:25])==0,] <- 0
# Define the function find_peaks
# A "peak" is defined as a local maxima with m points either side of it being smaller than it.
# Hence, the bigger the parameter m, the more stringent the peak finding procedure
# m set to 2
find_peaks <- function (x, m = 2){
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), FUN = function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
pks <- unlist(pks)
# Average value for normalization of CTRL and RNASE samples to 100
my.list.ctrl.norm <- list(table.ctrl1.SW, table.ctrl2.SW, table.ctrl3.SW)
my.list.rnase.norm <- list(table.rnase1.SW, table.rnase2.SW, table.rnase3.SW)
ctrl_norm_mean <- Reduce("+", my.list.ctrl.norm)/length(my.list.ctrl.norm)
rnase_norm_mean <- Reduce("+", my.list.rnase.norm)/length(my.list.rnase.norm)
View(ctrl_norm_mean)
ctrl_norm_mean1 <- Reduce("+", norm_tables.ctrl) / length(norm_tables.ctrl)
rnase_norm_mean <- Reduce("+", norm_tables.rnase) / length(norm_tables.rnase)
View(ctrl_norm_mean1)
# Funktion zum Ersetzen von NA und NaN durch 0
clean_table <- function(tbl) {
tbl <- rapply(tbl, function(x) ifelse(is.na(x), 0, x), how = "replace")
tbl <- rapply(tbl, function(x) ifelse(is.nan(x), 0, x), how = "replace")
return(tbl)
}
# Liste der Tabellen
tables.norm.ctrl <- list(
ctrl1 = table.ctrl1.SW.norm,
ctrl2 = table.ctrl2.SW.norm,
ctrl3 = table.ctrl3.SW.norm)
tables.norm.rnase <- list(
rnase1 = table.rnase1.SW.norm,
rnase2 = table.rnase2.SW.norm,
rnase3 = table.rnase3.SW.norm)
# Bereinigen
tables.norm.ctrl <- lapply(tables.norm.ctrl, clean_table)
tables.norm.rnase <- lapply(tables.norm.rnase, clean_table)
View(tables.norm.ctrl$ctrl1)
# Replace NA, NaN with 0 if any
table.ctrl1.SW.norm <- rapply(table.ctrl1.SW.norm, f=function(x) ifelse(is.na(x),0,x), how="replace")
table.ctrl2.SW.norm <- rapply(table.ctrl2.SW.norm, f=function(x) ifelse(is.na(x),0,x), how="replace" )
table.ctrl3.SW.norm <- rapply(table.ctrl3.SW.norm, f=function(x) ifelse(is.na(x),0,x), how="replace" )
table.rnase1.SW.norm <- rapply(table.rnase1.SW.norm, f=function(x) ifelse(is.na(x),0,x), how="replace" )
table.rnase2.SW.norm <- rapply(table.rnase2.SW.norm, f=function(x) ifelse(is.na(x),0,x), how="replace" )
table.rnase3.SW.norm <- rapply(table.rnase3.SW.norm, f=function(x) ifelse(is.na(x),0,x), how="replace" )
table.ctrl1.SW.norm <- rapply(table.ctrl1.SW.norm, f=function(x) ifelse(is.nan(x),0,x), how="replace")
table.ctrl2.SW.norm <- rapply(table.ctrl2.SW.norm, f=function(x) ifelse(is.nan(x),0,x), how="replace" )
table.ctrl3.SW.norm <- rapply(table.ctrl3.SW.norm, f=function(x) ifelse(is.nan(x),0,x), how="replace" )
table.rnase1.SW.norm <- rapply(table.rnase1.SW.norm, f=function(x) ifelse(is.nan(x),0,x), how="replace" )
table.rnase2.SW.norm <- rapply(table.rnase2.SW.norm, f=function(x) ifelse(is.nan(x),0,x), how="replace" )
table.rnase3.SW.norm <- rapply(table.rnase3.SW.norm, f=function(x) ifelse(is.nan(x),0,x), how="replace" )
View(table.ctrl1.SW.norm)
# Average value for normalization of CTRL and RNASE samples to 100
my.list.ctrl.norm <- list(table.ctrl1.SW, table.ctrl2.SW, table.ctrl3.SW)
my.list.rnase.norm <- list(table.rnase1.SW, table.rnase2.SW, table.rnase3.SW)
ctrl_norm_mean <- Reduce("+", my.list.ctrl.norm)/length(my.list.ctrl.norm)
rnase_norm_mean <- Reduce("+", my.list.rnase.norm)/length(my.list.rnase.norm)
print(ctrl_norm_mean)
# Average value for normalization of CTRL and RNASE samples to 100
my.list.ctrl.norm <- list(table.ctrl1.SW, table.ctrl2.SW, table.ctrl3.SW)
my.list.rnase.norm <- list(table.rnase1.SW, table.rnase2.SW, table.rnase3.SW)
ctrl_norm_mean <- Reduce("+", my.list.ctrl.norm)/length(my.list.ctrl.norm)
rnase_norm_mean <- Reduce("+", my.list.rnase.norm)/length(my.list.rnase.norm)
View(ctrl_norm_mean)
# Average value for normalization of CTRL and RNASE samples to 100
my.list.ctrl.norm <- list(table.ctrl1.SW, table.ctrl2.SW, table.ctrl3.SW)
my.list.rnase.norm <- list(table.rnase1.SW, table.rnase2.SW, table.rnase3.SW)
ctrl_norm_mean <- Reduce("+", my.list.ctrl.norm)/length(my.list.ctrl.norm)
rnase_norm_mean <- Reduce("+", my.list.rnase.norm)/length(my.list.rnase.norm)
print(ctrl_norm_mean)
# Change names of the columns: from "fraction1" to "fraction25"
col_fractions <- paste("fraction",1:25,sep="")
colnames(ctrl_norm_mean) <- col_fractions
colnames(rnase_norm_mean) <- col_fractions
# Normalization to 100 for each protein (= the sum of the amount of protein from fraction1 to fraction25 is 100)
ctrl_norm_mean <- ctrl_norm_mean*100/rowSums(ctrl_norm_mean)
rnase_norm_mean <- rnase_norm_mean*100/rowSums(rnase_norm_mean)
replace_na_nan <- function(x) rapply(x, function(y) ifelse(is.na(y) | is.nan(y), 0, y), how = "replace")
ctrl_norm_mean <- replace_na_nan(ctrl_norm_mean)
rnase_norm_mean <- replace_na_nan(rnase_norm_mean)
# Change names of the columns: from "fraction1" to "fraction25"
col_fractions <- paste("fraction",1:25,sep="")
colnames(ctrl_norm_mean1) <- col_fractions
colnames(rnase_norm_mean) <- col_fractions
# Normalization to 100 for each protein (= the sum of the amount of protein from fraction1 to fraction25 is 100)
ctrl_norm_mean1 <- ctrl_norm_mean1*100/rowSums(ctrl_norm_mean1)
rnase_norm_mean <- rnase_norm_mean*100/rowSums(rnase_norm_mean)
replace_na_nan <- function(x) rapply(x, function(y) ifelse(is.na(y) | is.nan(y), 0, y), how = "replace")
ctrl_norm_mean1 <- replace_na_nan(ctrl_norm_mean1)
rnase_norm_mean <- replace_na_nan(rnase_norm_mean)
ctrl_norm_mean1[rowSums(rnase_norm_mean1[1:25])==0,] <- 0
# Change names of the columns: from "fraction1" to "fraction25"
col_fractions <- paste("fraction",1:25,sep="")
colnames(ctrl_norm_mean1) <- col_fractions
colnames(rnase_norm_mean1) <- col_fractions
# Change names of the columns: from "fraction1" to "fraction25"
col_fractions <- paste("fraction",1:25,sep="")
colnames(ctrl_norm_mean) <- col_fractions
colnames(rnase_norm_mean) <- col_fractions
# Change names of the columns: from "fraction1" to "fraction25"
col_fractions <- paste("fraction",1:25,sep="")
colnames(ctrl_norm_mean) <- col_fractions
colnames(rnase_norm_mean) <- col_fractions
# Normalization to 100 for each protein (= the sum of the amount of protein from fraction1 to fraction25 is 100)
ctrl_norm_mean <- ctrl_norm_mean*100/rowSums(ctrl_norm_mean)
rnase_norm_mean <- rnase_norm_mean*100/rowSums(rnase_norm_mean)
replace_na_nan <- function(x) rapply(x, function(y) ifelse(is.na(y) | is.nan(y), 0, y), how = "replace")
ctrl_norm_mean <- replace_na_nan(ctrl_norm_mean)
rnase_norm_mean <- replace_na_nan(rnase_norm_mean)
ctrl_norm_mean[rowSums(rnase_norm_mean[1:25])==0,] <- 0
rnase_norm_mean[rowSums(ctrl_norm_mean[1:25])==0,] <- 0
View(ctrl_norm_mean)
# If one of the curve is 0 over all the fractions of one condition, the other condition will be set to 0 to take it out of the analysis
ctrl_norm_mean[rowSums(rnase_norm_mean[1:25])==0,] <- 0
rnase_norm_mean[rowSums(ctrl_norm_mean[1:25])==0,] <- 0
View()
# Change names of the columns: from "fraction1" to "fraction25"
col_fractions <- paste("fraction",1:25,sep="")
colnames(ctrl_nor_mean) <- col_fractions
# Average value for normalization of CTRL and RNASE samples to 100
my.list.ctrl.norm <- list(table.ctrl1.SW, table.ctrl2.SW, table.ctrl3.SW)
my.list.rnase.norm <- list(table.rnase1.SW, table.rnase2.SW, table.rnase3.SW)
ctrl_nor_mean <- Reduce("+", my.list.ctrl.norm)/length(my.list.ctrl.norm)
rnase_nor_mean <- Reduce("+", my.list.rnase.norm)/length(my.list.rnase.norm)
print(ctrl_norm_mean)
# Change names of the columns: from "fraction1" to "fraction25"
col_fractions <- paste("fraction",1:25,sep="")
colnames(ctrl_nor_mean) <- col_fractions
colnames(rnase_nor_mean) <- col_fractions
# Normalization to 100 for each protein (= the sum of the amount of protein from fraction1 to fraction25 is 100)
ctrl_nor_mean <- ctrl_nor_mean*100/rowSums(ctrl_nor_mean)
rnase_nor_mean <- rnase_nor_mean*100/rowSums(rnase_nor_mean)
# Replace the NaN and NA values by 0 if any
ctrl_nor_mean <- rapply(ctrl_nor_mean, f=function(x) ifelse(is.nan(x),0,x), how="replace")
rnase_nor_mean <- rapply(rnase_nor_mean, f=function(x) ifelse(is.nan(x),0,x), how="replace")
ctrl_nor_mean <- rapply(ctrl_nor_mean, f=function(x) ifelse(is.na(x),0,x), how="replace")
rnase_nor_mean <- rapply(rnase_nor_mean, f=function(x) ifelse(is.na(x),0,x), how="replace")
# If one of the curve is 0 over all the fractions of one condition, the other condition will be set to 0 to take it out of the analysis
ctrl_nor_mean[rowSums(rnase_nor_mean[1:25])==0,] <- 0
rnase_nor_mean[rowSums(ctrl_nor_mean[1:25])==0,] <- 0
View()
# If one of the curve is 0 over all the fractions of one condition, the other condition will be set to 0 to take it out of the analysis
ctrl_nor_mean[rowSums(rnase_nor_mean[1:25])==0,] <- 0
rnase_nor_mean[rowSums(ctrl_nor_mean[1:25])==0,] <- 0
View(ctrl_nor_mean)
ctrl_norm_mean[rowSums(rnase_norm_mean[1:25])==0,] <- 0
rnase_norm_mean[rowSums(ctrl_norm_mean[1:25])==0,] <- 0
View(ctrl_norm_mean)
# Average value for normalization of CTRL and RNASE samples to 100
my.list.ctrl.norm <- list(table.ctrl1.SW, table.ctrl2.SW, table.ctrl3.SW)
my.list.rnase.norm <- list(table.rnase1.SW, table.rnase2.SW, table.rnase3.SW)
ctrl_norm_mean <- Reduce("+", my.list.ctrl.norm)/length(my.list.ctrl.norm)
rnase_norm_mean <- Reduce("+", my.list.rnase.norm)/length(my.list.rnase.norm)
# Average value for normalization of CTRL and RNASE samples to 100
my.list.ctrl.norm <- list(table.ctrl1.SW, table.ctrl2.SW, table.ctrl3.SW)
my.list.rnase.norm <- list(table.rnase1.SW, table.rnase2.SW, table.rnase3.SW)
ctrl_nor_mean <- Reduce("+", my.list.ctrl.norm)/length(my.list.ctrl.norm)
rnase_nor_mean <- Reduce("+", my.list.rnase.norm)/length(my.list.rnase.norm)
#### Normaliztion over the amount to sum = 100 (%) ####
table.ctrl1.SW.norm <- table.ctrl1.SW * 100 / rowSums(table.ctrl1.SW)
table.ctrl2.SW.norm <- table.ctrl2.SW * 100 / rowSums(table.ctrl2.SW)
table.ctrl3.SW.norm <- table.ctrl3.SW * 100 / rowSums(table.ctrl3.SW)
table.rnase1.SW.norm <- table.rnase1.SW * 100 / rowSums(table.rnase1.SW)
table.rnase2.SW.norm <- table.rnase2.SW * 100 / rowSums(table.rnase2.SW)
table.rnase3.SW.norm <- table.rnase3.SW * 100 / rowSums(table.rnase3.SW)
# Funktion zur Zeilennormalisierung (auf 100 %)
normalize_table <- function(tbl) {
tbl * 100 / rowSums(tbl)
}
tables.ctrl <- list(
ctrl1 = table.ctrl1.SW,
ctrl2 = table.ctrl2.SW,
ctrl3 = table.ctrl3.SW)
tables.rnase <- list(
rnase1 = table.rnase1.SW,
rnase2 = table.rnase2.SW,
rnase3 = table.rnase3.SW)
norm_tables.ctrl <- lapply(tables.ctrl, normalize_table)
norm_tables.rnase <- lapply(tables.rnase, normalize_table)
norm_tables.rnase$rnase1
#### Apply a sliding window/moving average of 3 points to the data ####
smooth_table <- function(tbl) {
data.frame(tbl[1], (tbl[1:23] + tbl[2:24] + tbl[3:25]) / 3, tbl[25])
}
table.ctrl1.SW <- smooth_table(table.ctrl1)
table.ctrl2.SW <- smooth_table(table.ctrl2)
table.ctrl3.SW <- smooth_table(table.ctrl3)
table.rnase1.SW <- smooth_table(table.rnase1)
table.rnase2.SW <- smooth_table(table.rnase2)
table.rnase3.SW <- smooth_table(table.rnase3)
# Get the proper rownames for the tables
colnames(table.ctrl1.SW) <- colnames(table.ctrl1)
colnames(table.ctrl2.SW) <- colnames(table.ctrl2)
colnames(table.ctrl3.SW) <- colnames(table.ctrl3)
colnames(table.rnase1.SW) <- colnames(table.rnase1)
colnames(table.rnase2.SW) <- colnames(table.rnase2)
colnames(table.rnase3.SW) <- colnames(table.rnase3)
View(table.ctrl1.SW)
#### Normaliztion over the amount to sum = 100 (%) ####
# Funktion zur Zeilennormalisierung (auf 100 %)
normalize_table <- function(tbl) {
tbl * 100 / rowSums(tbl)
}
tables.ctrl <- list(
ctrl1 = table.ctrl1.SW,
ctrl2 = table.ctrl2.SW,
ctrl3 = table.ctrl3.SW)
tables.rnase <- list(
rnase1 = table.rnase1.SW,
rnase2 = table.rnase2.SW,
rnase3 = table.rnase3.SW)
norm_tables.ctrl <- lapply(tables.ctrl, normalize_table)
norm_tables.rnase <- lapply(tables.rnase, normalize_table)
norm_tables.rnase$rnase1
# Replace NA, NaN with 0 if any
# Funktion zum Ersetzen von NA und NaN durch 0
clean_table <- function(tbl) {
tbl <- rapply(tbl, function(x) ifelse(is.na(x), 0, x), how = "replace")
tbl <- rapply(tbl, function(x) ifelse(is.nan(x), 0, x), how = "replace")
return(tbl)
}
# Liste der Tabellen
tables.norm.ctrl <- list(
ctrl1 = table.ctrl1.SW.norm,
ctrl2 = table.ctrl2.SW.norm,
ctrl3 = table.ctrl3.SW.norm)
tables.norm.rnase <- list(
rnase1 = table.rnase1.SW.norm,
rnase2 = table.rnase2.SW.norm,
rnase3 = table.rnase3.SW.norm)
# Bereinigen
tables.norm.ctrl <- lapply(tables.norm.ctrl, clean_table)
tables.norm.rnase <- lapply(tables.norm.rnase, clean_table)
View(tables.norm.ctrl$ctrl1)
# Average value for normalization of CTRL and RNASE samples to 100
my.list.ctrl.norm <- list(table.ctrl1.SW, table.ctrl2.SW, table.ctrl3.SW)
my.list.rnase.norm <- list(table.rnase1.SW, table.rnase2.SW, table.rnase3.SW)
ctrl_norm_mean <- Reduce("+", my.list.ctrl.norm)/length(my.list.ctrl.norm)
rnase_norm_mean <- Reduce("+", my.list.rnase.norm)/length(my.list.rnase.norm)
# Change names of the columns: from "fraction1" to "fraction25"
col_fractions <- paste("fraction",1:25,sep="")
colnames(ctrl_norm_mean) <- col_fractions
colnames(rnase_norm_mean) <- col_fractions
# Normalization to 100 for each protein (= the sum of the amount of protein from fraction1 to fraction25 is 100)
ctrl_norm_mean <- ctrl_norm_mean*100/rowSums(ctrl_norm_mean)
rnase_norm_mean <- rnase_norm_mean*100/rowSums(rnase_norm_mean)
# Replace the NaN and NA values by 0 if any
replace_na_nan <- function(x) rapply(x, function(y) ifelse(is.na(y) | is.nan(y), 0, y), how = "replace")
ctrl_norm_mean <- replace_na_nan(ctrl_norm_mean)
rnase_norm_mean <- replace_na_nan(rnase_norm_mean)
# If one of the curve is 0 over all the fractions of one condition, the other condition will be set to 0 to take it out of the analysis
ctrl_norm_mean[rowSums(rnase_norm_mean[1:25])==0,] <- 0
rnase_norm_mean[rowSums(ctrl_norm_mean[1:25])==0,] <- 0
View(ctrl_nor_mean)
# If one of the curve is 0 over all the fractions of one condition, the other condition will be set to 0 to take it out of the analysis
ctrl_norm_mean[rowSums(rnase_norm_mean[1:25])==0,] <- 0
rnase_norm_mean[rowSums(ctrl_norm_mean[1:25])==0,] <- 0
View(ctrl_norm_mean)
# If one of the curve is 0 over all the fractions of one condition, the other condition will be set to 0 to take it out of the analysis
ctrl_norm_mean[rowSums(rnase_norm_mean[1:25])==0,] <- 0
rnase_norm_mean[rowSums(ctrl_norm_mean[1:25])==0,] <- 0
View(ctrl_norm_mean)
