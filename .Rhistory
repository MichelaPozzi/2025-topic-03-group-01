# Remove rows with NAs
pca_ctrl_clean <- pca_ctrl_numeric[complete.cases(pca_ctrl_numeric), ]
pca_rnase_clean <- pca_rnase_numeric[complete.cases(pca_rnase_numeric), ]
pca_result_ctrl <- prcomp(pca_ctrl_clean, center = TRUE, scale. = TRUE, )
pca_result_rnase <- prcomp(pca_rnase_clean, center = TRUE, scale. = TRUE)
# Keep only numerical columns
pca_ctrl_numeric_not_selected <- ctrl_not_selected[,sapply(ctrl_not_selected, is.numeric)][, 1:25]
pca_rnase_numeric_not_selected <- rnase_not_selected[,sapply(rnase_not_selected, is.numeric)][, 1:25]
# Remove rows with NAs
pca_ctrl_clean_not_selected <- pca_ctrl_numeric_not_selected[complete.cases(pca_ctrl_numeric_not_selected), ]
pca_rnase_clean_not_selected <- pca_rnase_numeric_not_selected[complete.cases(pca_rnase_numeric_not_selected), ]
pca_result_ctrl_not_selected <- prcomp(pca_ctrl_clean_not_selected, center = TRUE, scale. = TRUE, )
pca_result_rnase_not_selected <- prcomp(pca_rnase_clean_not_selected, center = TRUE, scale. = TRUE)
# Check which PCs have the most variance
summary(pca_result_ctrl)
summary(pca_result_rnase)
summary(pca_result_ctrl_not_selected)
summary(pca_result_rnase_not_selected)
#plot PC1 with PC2
plot(pca_result_ctrl$x[,1:2], col = "midnightblue", pch = 16,
xlab = "PC1", ylab = "PC2", main = "PCA: PC1 vs PC2 CTRL (SHIFT)")
plot(pca_result_rnase$x[,1:2], col = "midnightblue", pch = 16,
xlab = "PC1", ylab = "PC2", main = "PCA: PC1 vs PC2 RNASE (SHIFT)")
#plot PC1 with PC3
plot(pca_result_ctrl$x[,c(1, 3)], col = "midnightblue", pch = 16,
xlab = "PC1", ylab = "PC3", main = "PCA: PC1 vs PC3 CTRL (SHIFT)")
plot(pca_result_rnase$x[,c(1, 3)], col = "midnightblue", pch = 16,
xlab = "PC1", ylab = "PC3", main = "PCA: PC1 vs PC3 RNASE (SHIFT)")
#plot PC2 with PC3
plot(pca_result_ctrl$x[,2:3], col = "midnightblue", pch = 16,
xlab = "PC2", ylab = "PC3", main = "PCA: PC2 vs PC3 CTRL (SHIFT)")
plot(pca_result_rnase$x[,2:3], col = "midnightblue", pch = 16,
xlab = "PC2", ylab = "PC3", main = "PCA: PC2 vs PC3 RNASE (SHIFT)")
# Simple 2D PCA-Plot
plot(pca_result_ctrl_not_selected$x[,1:2], col = "midnightblue", pch = 16,
xlab = "PC1", ylab = "PC2", main = "PCA: PC1 vs PC2 CTRL (NO SHIFT)")
plot(pca_result_rnase_not_selected$x[,1:2], col = "midnightblue", pch = 16,
xlab = "PC1", ylab = "PC2", main = "PCA: PC1 vs PC2 RNASE (NO SHIFT)")
#plot PC1 with PC3
plot(pca_result_ctrl_not_selected$x[,c(1, 3)], col = "midnightblue", pch = 16,
xlab = "PC1", ylab = "PC3", main = "PCA: PC1 vs PC3 CTRL (NO SHIFT)")
plot(pca_result_rnase_not_selected$x[,c(1, 3)], col = "midnightblue", pch = 16,
xlab = "PC1", ylab = "PC3", main = "PCA: PC1 vs PC3 RNASE (NO SHIFT)")
#plot PC2 with PC3
plot(pca_result_ctrl_not_selected$x[,2:3], col = "midnightblue", pch = 16,
xlab = "PC2", ylab = "PC3", main = "PCA: PC2 vs PC3 CTRL (NO SHIFT)")
plot(pca_result_rnase_not_selected$x[,2:3], col = "midnightblue", pch = 16,
xlab = "PC2", ylab = "PC3", main = "PCA: PC2 vs PC3 RNASE (NO SHIFT)")
#Recognize centers for k-means clustering -> 3 centers
plot(pca_result_ctrl, type = "l", main = "Elbow-Plot CTRL (SHIFT)")
plot(pca_result_rnase, type = "l", main = "Elbow-Plot RNASE (SHIFT)")
#Recognize centers for k-means clustering -> 2 centers
plot(pca_result_ctrl_not_selected, type = "l", main = "Elbow-Plot CTRL (NO SHIFT)")
plot(pca_result_rnase_not_selected, type = "l", main = "Elbow-Plot RNASE (NO SHIFT)")
pca_ctrl_pc1_pc2 <- as.data.frame(pca_result_ctrl$x[, 1:2])
pca_ctrl_pc1_pc3 <- as.data.frame(pca_result_ctrl$x[, c(1,3)])
pca_ctrl_pc2_pc3 <- as.data.frame(pca_result_ctrl$x[, 2:3])
pca_rnase_pc1_pc2 <- as.data.frame(pca_result_rnase$x[, 1:2])
pca_rnase_pc1_pc3 <- as.data.frame(pca_result_rnase$x[, c(1,3)])
pca_rnase_pc2_pc3 <- as.data.frame(pca_result_rnase$x[, 2:3])
pca_ctrl_pc1_pc2_not_selected <- as.data.frame(pca_result_ctrl_not_selected$x[, 1:2])
pca_ctrl_pc1_pc3_not_selected <- as.data.frame(pca_result_ctrl_not_selected$x[, c(1,3)])
pca_ctrl_pc2_pc3_not_selected <- as.data.frame(pca_result_ctrl_not_selected$x[, 2:3])
pca_rnase_pc1_pc2_not_selected <- as.data.frame(pca_result_rnase_not_selected$x[, 1:2])
pca_rnase_pc1_pc3_not_selected <- as.data.frame(pca_result_rnase_not_selected$x[, c(1,3)])
pca_rnase_pc2_pc3_not_selected <- as.data.frame(pca_result_rnase_not_selected$x[, 2:3])
library(factoextra)
fviz_nbclust(pca_ctrl_pc1_pc2, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_ctrl_pc1_pc3, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_ctrl_pc2_pc3, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC2/PC3") +
theme_minimal()
fviz_nbclust(pca_rnase_pc1_pc2, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_rnase_pc1_pc3, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC1/PC3") +
theme_minimal()
fviz_nbclust(pca_rnase_pc2_pc3, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC2/PC3") +
theme_minimal()
fviz_nbclust(pca_ctrl_pc1_pc2_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_ctrl_pc1_pc3_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_ctrl_pc2_pc3_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC2/PC3") +
theme_minimal()
fviz_nbclust(pca_rnase_pc1_pc2_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_rnase_pc1_pc3_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC1/PC3") +
theme_minimal()
fviz_nbclust(pca_rnase_pc2_pc3_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC2/PC3") +
theme_minimal()
#kmeans is executed with 3 centers --> see elbow-Plot and silhouette plot
km_result_ctrl_pc1_pc2<- kmeans(pca_ctrl_pc1_pc2, centers = 3)
km_result_ctrl_pc1_pc3<- kmeans(pca_ctrl_pc1_pc3, centers = 3)
km_result_ctrl_pc2_pc3<- kmeans(pca_ctrl_pc2_pc3, centers = 3)
km_result_rnase_pc1_pc2<- kmeans(pca_rnase_pc1_pc2, centers = 3)
km_result_rnase_pc1_pc3<- kmeans(pca_rnase_pc1_pc3, centers = 3)
km_result_rnase_pc2_pc3<- kmeans(pca_rnase_pc2_pc3, centers = 3)
#kmeans is executed with 2 centers
km_result_ctrl_pc1_pc2_not_selected<- kmeans(pca_ctrl_pc1_pc2_not_selected, centers = 3)
km_result_ctrl_pc1_pc3_not_selected<- kmeans(pca_ctrl_pc1_pc3_not_selected, centers = 3)
km_result_ctrl_pc2_pc3_not_selected<- kmeans(pca_ctrl_pc2_pc3_not_selected, centers = 3)
km_result_rnase_pc1_pc2_not_selected<- kmeans(pca_rnase_pc1_pc2_not_selected, centers = 3)
km_result_rnase_pc1_pc3_not_selected<- kmeans(pca_rnase_pc1_pc3_not_selected, centers = 3)
km_result_rnase_pc2_pc3_not_selected<- kmeans(pca_rnase_pc2_pc3_not_selected, centers = 3)
library(factoextra)
# pca_df contains the data, e.g. PC1 and PC2
fviz_cluster(km_result_ctrl_pc1_pc2, data = pca_ctrl_pc1_pc2,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 CTRL (SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc2, data = pca_rnase_pc1_pc2,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("firebrick3", "violetred4", "midnightblue"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 RNASE (SHIFT)")
fviz_cluster(km_result_ctrl_pc1_pc3, data = pca_ctrl_pc1_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 CTRL (SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc3, data = pca_rnase_pc1_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("violetred4", "midnightblue", "firebrick3"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 RNASE (SHIFT)")
fviz_cluster(km_result_ctrl_pc2_pc3, data = pca_ctrl_pc2_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC2 vs PC3 CTRL (SHIFT)")
fviz_cluster(km_result_rnase_pc2_pc3, data = pca_rnase_pc2_pc3,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC2 vs PC3 RNASE (SHIFT)")
# pca_df contains the data, e.g. PC1 and PC2
fviz_cluster(km_result_ctrl_pc1_pc2_not_selected, data = pca_ctrl_pc1_pc2_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 CTRL (NO SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc2_not_selected, data = pca_rnase_pc1_pc2_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 RNASE (NO SHIFT)")
fviz_cluster(km_result_ctrl_pc1_pc3_not_selected, data = pca_ctrl_pc1_pc3_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 CTRL (NO SHIFT)")
fviz_cluster(km_result_rnase_pc1_pc3_not_selected, data = pca_rnase_pc1_pc3_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("firebrick3", "midnightblue", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC3 RNASE (NO SHIFT)")
fviz_cluster(km_result_ctrl_pc2_pc3_not_selected, data = pca_ctrl_pc2_pc3_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC2 vs PC3 CTRL (NO SHIFT)")
fviz_cluster(km_result_rnase_pc2_pc3_not_selected, data = pca_rnase_pc2_pc3_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC2 vs PC3 RNASE (SHIFT)")
# JPEG-Datei öffnen
jpeg("k-Means Cluster PC1 vs PC2 RNASE (NO SHIFT).jpeg", width = 800, height = 600)
fviz_cluster(km_result_rnase_pc1_pc2_not_selected, data = pca_rnase_pc1_pc2_not_selected,
geom = "point", ellipse.type = "norm", stand = FALSE,
palette = c("midnightblue", "firebrick3", "violetred4"), ggtheme = theme_minimal(),
main = "k-Means Cluster: PC1 vs PC2 RNASE (NO SHIFT)")
# Grafikgerät schließen
dev.off()
#For ctrl selected vs rnase selected
#Rename relevant variables to avoid PC name redundance later on
ctrl_1 <- pca_ctrl_pc1_pc2$PC1
ctrl_2 <- pca_ctrl_pc1_pc2$PC2
ctrl_3 <- pca_ctrl_pc1_pc3$PC3
rnase_1 <- pca_rnase_pc1_pc2$PC1
rnase_2 <- pca_rnase_pc1_pc2$PC2
rnase_3 <- pca_rnase_pc1_pc3$PC3
#Generates plot with PCA datapoints and draws a trendline through it
plot(ctrl_1,rnase_1,pch=20,col='blue', xlab='Ctrl selected PC1',ylab='Rnase selected PC1', main = "Ctrl selected PC1 vs Rnase selected PC1");abline(0,1,col='red')
plot(ctrl_1,rnase_2,pch=20,col='blue', xlab='Ctrl selected PC1',ylab='Rnase selected PC2', main = "Ctrl selected PC1 vs Rnase selected PC2");abline(0,1,col='red')
plot(ctrl_1,rnase_3,pch=20,col='blue', xlab='Ctrl selected PC1',ylab='Rnase selected PC3', main = "Ctrl selected PC1 vs Rnase selected PC3");abline(0,1,col='red')
plot(ctrl_2,rnase_1,pch=20,col='blue', xlab='Ctrl selected PC2',ylab='Rnase selected PC1', main = "Ctrl selected PC2 vs Rnase selected PC1");abline(0,1,col='red')
plot(ctrl_2,rnase_2,pch=20,col='blue', xlab='Ctrl selected PC2',ylab='Rnase selected PC2', main = "Ctrl selected PC2 vs Rnase selected PC2");abline(0,1,col='red')
plot(ctrl_2,rnase_3,pch=20,col='blue', xlab='Ctrl selected PC2',ylab='Rnase selected PC3', main = "Ctrl selected PC2 vs Rnase selected PC3");abline(0,1,col='red')
plot(ctrl_3,rnase_1,pch=20,col='blue', xlab='Ctrl selected PC3',ylab='Rnase selected PC1', main = "Ctrl selected PC3 vs Rnase selected PC1");abline(0,1,col='red')
plot(ctrl_3,rnase_2,pch=20,col='blue', xlab='Ctrl selected PC3',ylab='Rnase selected PC2', main = "Ctrl selected PC3 vs Rnase selected PC2");abline(0,1,col='red')
plot(ctrl_3,rnase_3,pch=20,col='blue', xlab='Ctrl selected PC3',ylab='Rnase selected PC3', main = "Ctrl selected PC3 vs Rnase selected PC3");abline(0,1,col='red')
#Defines a target variable, so what should be predicted by the regression analysis
target_selected <- ctrl_selected$global_maximum
#Builds matrix for regression analysis from target variable with two PCA components
df_regression_selected_11 <- cbind(target = target_selected ,
ctrl_1, rnase_1)
df_regression_selected_12 <- cbind(target = target_selected ,
ctrl_1, rnase_2)
df_regression_selected_13 <- cbind(target = target_selected ,
ctrl_1, rnase_3)
df_regression_selected_21 <- cbind(target = target_selected ,
ctrl_2, rnase_1)
df_regression_selected_22 <- cbind(target =target_selected,
ctrl_2, rnase_2)
df_regression_selected_23 <- cbind(target = target_selected ,
ctrl_2, rnase_3)
df_regression_selected_31 <- cbind(target = target_selected ,
ctrl_3, rnase_1)
df_regression_selected_32 <- cbind(target =target_selected ,
ctrl_3, rnase_2)
df_regression_selected_33 <- cbind(target = target_selected ,
ctrl_3, rnase_3)
#Make matrix a data frame
df_regression_selected_11 <- as.data.frame(df_regression_selected_11)
df_regression_selected_12 <- as.data.frame(df_regression_selected_12)
df_regression_selected_13 <- as.data.frame(df_regression_selected_13)
df_regression_selected_21 <- as.data.frame(df_regression_selected_21)
df_regression_selected_22 <- as.data.frame(df_regression_selected_22)
df_regression_selected_23 <- as.data.frame(df_regression_selected_23)
df_regression_selected_31 <- as.data.frame(df_regression_selected_31)
df_regression_selected_32 <- as.data.frame(df_regression_selected_32)
df_regression_selected_33 <- as.data.frame(df_regression_selected_33)
#Multiple linear regression analysis
model_selected_pc1_1<- lm(target ~ ctrl_1 + rnase_1, data = df_regression_selected_11)
model_selected_pc1_2<- lm(target ~ctrl_1 + rnase_2, data = df_regression_selected_12)
model_selected_pc1_3<- lm(target ~ ctrl_1 + rnase_3, data = df_regression_selected_13)
model_selected_pc2_1<- lm(target ~ ctrl_2 + rnase_1, data = df_regression_selected_21)
model_selected_pc2_2<- lm(target ~ ctrl_2 + rnase_2, data = df_regression_selected_22)
model_selected_pc2_3<- lm(target ~ ctrl_2 + rnase_3, data = df_regression_selected_23)
model_selected_pc3_1<- lm(target ~ ctrl_3 + rnase_1, data = df_regression_selected_31)
model_selected_pc3_2<- lm(target ~ ctrl_3 + rnase_2, data = df_regression_selected_32)
model_selected_pc3_3<- lm(target ~ ctrl_3 + rnase_3, data = df_regression_selected_33)
#Show results/summary
summary(model_selected_pc1_1)
summary(model_selected_pc1_2)
summary(model_selected_pc1_3)
summary(model_selected_pc2_1)
summary(model_selected_pc2_2)
summary(model_selected_pc2_3)
summary(model_selected_pc3_1)
summary(model_selected_pc3_2)
summary(model_selected_pc3_3)
#For ctrl not-selected vs rnase not-selected
#Rename relevant variables to avoid PC name redundance later on
ctrl_ns_1 <- pca_ctrl_pc1_pc2_not_selected$PC1
ctrl_ns_2 <- pca_ctrl_pc1_pc2_not_selected$PC2
ctrl_ns_3 <- pca_ctrl_pc1_pc3_not_selected$PC3
rnase_ns_1 <- pca_rnase_pc1_pc2_not_selected$PC1
rnase_ns_2 <- pca_rnase_pc1_pc2_not_selected$PC2
rnase_ns_3 <- pca_rnase_pc1_pc3_not_selected$PC3
#Generates plot with PCA datapoints and draws a trendline through it
plot(ctrl_ns_1,rnase_ns_1,pch=20,col='blue', xlab='Ctrl not-selected PC1',ylab='Rnase not-selected PC1', main = "Ctrl not-selected PC1 vs Rnase not-selected PC1");abline(0,1,col='red')
plot(ctrl_ns_1,rnase_ns_2,pch=20,col='blue', xlab='Ctrl not-selected PC1',ylab='Rnase not-selected PC2', main = "Ctrl not-selected PC1 vs Rnase not-selected PC2");abline(0,1,col='red')
plot(ctrl_ns_1,rnase_ns_3,pch=20,col='blue', xlab='Ctrl not-selected PC1',ylab='Rnase not-selected PC3', main = "Ctrl not-selected PC1 vs Rnase not-selected PC3");abline(0,1,col='red')
plot(ctrl_ns_2,rnase_ns_1,pch=20,col='blue', xlab='Ctrl not-selected PC2',ylab='Rnase not-selected PC1', main = "Ctrl not-selected PC2 vs Rnase not-selected PC1");abline(0,1,col='red')
plot(ctrl_ns_2,rnase_ns_2,pch=20,col='blue', xlab='Ctrl not-selected PC2',ylab='Rnase not-selected PC2', main = "Ctrl not-selected PC2 vs Rnase not-selected PC2");abline(0,1,col='red')
plot(ctrl_ns_2,rnase_ns_3,pch=20,col='blue', xlab='Ctrl not-selected PC2',ylab='Rnase not-selected PC3', main = "Ctrl not-selected PC2 vs Rnase not-selected PC3");abline(0,1,col='red')
plot(ctrl_ns_3,rnase_ns_1,pch=20,col='blue', xlab='Ctrl not-selected PC3',ylab='Rnase not-selected PC1', main = "Ctrl not-selected PC3 vs Rnase not-selected PC1");abline(0,1,col='red')
plot(ctrl_ns_3,rnase_ns_2,pch=20,col='blue', xlab='Ctrl not-selected PC3',ylab='Rnase not-selected PC2', main = "Ctrl not-selected PC3 vs Rnase not-selected PC2");abline(0,1,col='red')
plot(ctrl_ns_3,rnase_ns_3,pch=20,col='blue', xlab='Ctrl not-selected PC3',ylab='Rnase not-selected PC3', main = "Ctrl not-selected PC3 vs Rnase not-selected PC3");abline(0,1,col='red')
#Defines a target variable, so what should be predicted by the regression analysis
target_not_selected <- ctrl_selected$global_maximum
#Builds matrix for regression analysis from target variable with two PCA components
df_regression_not_selected_11 <- cbind(target = target_not_selected ,
ctrl_ns_1, rnase_ns_1)
df_regression_not_selected_12 <- cbind(target = target_not_selected ,
ctrl_ns_1, rnase_ns_2)
df_regression_not_selected_13 <- cbind(target = target_not_selected ,
ctrl_ns_1, rnase_ns_3)
df_regression_not_selected_21 <- cbind(target = target_not_selected ,
ctrl_ns_2, rnase_ns_1)
df_regression_not_selected_22 <- cbind(target =target_not_selected,
ctrl_ns_2, rnase_ns_2)
df_regression_not_selected_23 <- cbind(target = target_not_selected ,
ctrl_ns_2, rnase_ns_3)
df_regression_not_selected_31 <- cbind(target = target_not_selected ,
ctrl_ns_3, rnase_ns_1)
df_regression_not_selected_32 <- cbind(target =target_not_selected ,
ctrl_ns_3, rnase_ns_2)
df_regression_not_selected_33 <- cbind(target = target_not_selected ,
ctrl_ns_3, rnase_ns_3)
#Make matrix a data frame
df_regression_not_selected_11 <- as.data.frame(df_regression_not_selected_11)
df_regression_not_selected_12 <- as.data.frame(df_regression_not_selected_12)
df_regression_not_selected_13 <- as.data.frame(df_regression_not_selected_13)
df_regression_not_selected_21 <- as.data.frame(df_regression_not_selected_21)
df_regression_not_selected_22 <- as.data.frame(df_regression_not_selected_22)
df_regression_not_selected_23 <- as.data.frame(df_regression_not_selected_23)
df_regression_not_selected_31 <- as.data.frame(df_regression_not_selected_31)
df_regression_not_selected_32 <- as.data.frame(df_regression_not_selected_32)
df_regression_not_selected_33 <- as.data.frame(df_regression_not_selected_33)
#Multiple linear regression analysis
model_not_selected_pc1_1<- lm(target ~ ctrl_ns_1 + rnase_ns_1, data = df_regression_not_selected_11)
model_not_selected_pc1_2<- lm(target ~ctrl_ns_1 + rnase_ns_2, data = df_regression_not_selected_12)
model_not_selected_pc1_3<- lm(target ~ ctrl_ns_1 + rnase_ns_3, data = df_regression_not_selected_13)
model_not_selected_pc2_1<- lm(target ~ ctrl_ns_2 + rnase_ns_1, data = df_regression_not_selected_21)
model_not_selected_pc2_2<- lm(target ~ ctrl_ns_2 + rnase_ns_2, data = df_regression_not_selected_22)
model_not_selected_pc2_3<- lm(target ~ ctrl_ns_2 + rnase_ns_3, data = df_regression_not_selected_23)
model_not_selected_pc3_1<- lm(target ~ ctrl_ns_3 + rnase_ns_1, data = df_regression_not_selected_31)
model_not_selected_pc3_2<- lm(target ~ ctrl_ns_3 + rnase_ns_2, data = df_regression_not_selected_32)
model_not_selected_pc3_3<- lm(target ~ ctrl_ns_3 + rnase_ns_3, data = df_regression_not_selected_33)
#Show results/summary
summary(model_not_selected_pc1_1)
summary(model_not_selected_pc1_2)
summary(model_not_selected_pc1_3)
summary(model_not_selected_pc2_1)
summary(model_not_selected_pc2_2)
summary(model_not_selected_pc2_3)
summary(model_not_selected_pc3_1)
summary(model_not_selected_pc3_2)
summary(model_not_selected_pc3_3)
rbp_pos <- read.delim("Daten/RBP2GO Table RBPs.txt", skip = 6, sep = "\t", stringsAsFactors = FALSE)
rbp_neg <- read.delim("Daten/RBP2GO Table Non-RBPs.txt", skip = 6, sep = "\t", stringsAsFactors = FALSE)
# Neue Spalte in deinem DataFrame mit "unbekannt" als Startwert
ctrl_norm_mean$RBP2GO_status <- "unkown"
ctrl_norm_mean$RBP2GO_status[
toupper(rownames(ctrl_norm_mean)) %in% toupper(rbp_pos$Entry_Name)
] <- "RBP"
ctrl_norm_mean$RBP2GO_status[
toupper(rownames(ctrl_norm_mean)) %in% toupper(rbp_neg$Entry_Name)
] <- "Non-RBP"
library(ggplot2)
df_plot <- as.data.frame(table(ctrl_norm_mean$RBP2GO_status))
colnames(df_plot) <- c("Status", "Anzahl")
ggplot(df_plot, aes(x = "", y = Anzahl, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
labs(title = "Klassifikation nach RBP2GO") +
scale_fill_manual(values = c("firebrick", "midnightblue", "darkseagreen3"))
z = rownames(ctrl_selected) %in% rbp_pos$Entry_Name
length(z)
sum(z)
y = rownames(ctrl_not_selected) %in% rbp_pos$Entry_Name
length(y)
sum(y)
# Status-Spalte für ctrl_selected erzeugen, ohne sie direkt in ctrl_selected zu speichern
status_selected <- rep("unknown", nrow(ctrl_selected))
# Groß-/Kleinschreibung angleichen und matchen
prot_names_selected <- toupper(rownames(ctrl_selected))
rbp_pos_names <- toupper(rbp_pos$Entry_Name)
rbp_neg_names <- toupper(rbp_neg$Entry_Name)
status_selected[prot_names_selected %in% rbp_pos_names] <- "selected RBPs"
status_selected[prot_names_selected %in% rbp_neg_names] <- "selected Non-RBPs"
# Zusammenfassung für das Tortendiagramm
library(ggplot2)
df_plot <- as.data.frame(table(status_selected))
colnames(df_plot) <- c("Status", "Amount")
ggplot(df_plot, aes(x = "", y = Amount, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
labs(title = "Classification of the selected proteins") +
scale_fill_manual(values = c("selected RBPs" = "midnightblue",
"selected Non-RBPs" = "firebrick",
"unknown" = "darkseagreen3"))
print(df_plot$Status)
#Status-Vektor für ctrl_not_selected erzeugen, ohne Spalte einzufügen
status_not_selected <- rep("unknown", nrow(ctrl_not_selected))
# Groß-/Kleinschreibung angleichen und matchen
prot_names_not_selected <- toupper(rownames(ctrl_not_selected))
rbp_pos_names <- toupper(rbp_pos$Entry_Name)
rbp_neg_names <- toupper(rbp_neg$Entry_Name)
status_not_selected[prot_names_not_selected %in% rbp_pos_names] <- "selected RBPs"
status_not_selected[prot_names_not_selected %in% rbp_neg_names] <- "selected Non-RBPs"
# Zusammenfassung für das Tortendiagramm
library(ggplot2)
df_plot_not_selected <- as.data.frame(table(status_not_selected))
colnames(df_plot_not_selected) <- c("Status", "Amount")
ggplot(df_plot_not_selected, aes(x = "", y = Amount, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
labs(title = "Classification of the NOT selected proteins") +
scale_fill_manual(values = c("selected RBPs" = "midnightblue",
"selected Non-RBPs" = "firebrick",
"unknown" = "darkseagreen3"))
header_plotting(cor_all_proteins$correlations, ctrl_norm_mean, rnase_norm_mean, n =100, cor_threshold = 0.99, direction = "lt")
# Function to plot a defined amount of protein curves (ctrl & rnase), based on a selected threshold and condition (= direction)
header_plotting <- function(cor_vector,
ctrl_data,
rnase_data,
n = 5,
cor_threshold = 0.6,
direction = "abs_lt") {
# selecting the indices based on the direction
selected <- switch(direction,
lt      = which(cor_vector < cor_threshold),
gt      = which(cor_vector > cor_threshold),
abs_lt  = which(abs(cor_vector) < cor_threshold),
abs_gt  = which(abs(cor_vector) > cor_threshold),
stop("wrong value for direction used")
)
# Just use n plots
selected_indices = head(selected, n)
# Plotting
for (i in selected_indices) {
cs = as.numeric(ctrl_data[i, 1:25])
rs = as.numeric(rnase_data[i, 1:25])
corr_value = cor_vector[i]
plot(
cs,
type = "l",
main = paste("Protein at index", i, "/ Correlation", round(corr_value, 3)),
xlab = "Fractions",
ylab = "Values",
col = "midnightblue",
lwd = 2,
ylim = range(c(cs, rs), na.rm = TRUE)
)
lines(
rs,
type = "l",
col = "firebrick",
lwd = 2
)
}
}
library(factoextra)
fviz_nbclust(pca_ctrl_pc1_pc2, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_ctrl_pc1_pc3, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_ctrl_pc2_pc3, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC2/PC3") +
theme_minimal()
fviz_nbclust(pca_rnase_pc1_pc2, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_rnase_pc1_pc3, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC1/PC3") +
theme_minimal()
fviz_nbclust(pca_rnase_pc2_pc3, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC2/PC3") +
theme_minimal()
fviz_nbclust(pca_ctrl_pc1_pc2_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_ctrl_pc1_pc3_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_ctrl_pc2_pc3_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode CTRL PC2/PC3") +
theme_minimal()
fviz_nbclust(pca_rnase_pc1_pc2_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC1/PC2") +
theme_minimal()
fviz_nbclust(pca_rnase_pc1_pc3_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC1/PC3") +
theme_minimal()
fviz_nbclust(pca_rnase_pc2_pc3_not_selected, kmeans, method = "silhouette") +
labs(title = "Silhouette-Methode RNASE PC2/PC3") +
theme_minimal()
# Classification of not selected proteins
# Collect the protein names in each RBP2GO table and the names of the not selected proteins as a vector, uppercase for comparison
prot_names_not_selected <- toupper(rownames(ctrl_not_selected))
rbp_pos_names <- toupper(rbp_pos$Entry_Name)
rbp_neg_names <- toupper(rbp_neg$Entry_Name)
# Create a status vector for each protein in ctrl_selected, default "unknown"
status_not_selected <- rep("unknown", nrow(ctrl_not_selected))
# Label proteins found in rbp_pos as "selected RBPs"
# Label proteins found in rbp_neg as "selected Non-RBPs"
status_not_selected[prot_names_not_selected %in% rbp_pos_names] <- "selected RBPs"
status_not_selected[prot_names_not_selected %in% rbp_neg_names] <- "selected Non-RBPs"
# Create a data frame of the counts per category
library(ggplot2)
df_plot_not_selected <- as.data.frame(table(status_not_selected))
colnames(df_plot_not_selected) <- c("Status", "Amount")
ggplot(df_plot_not_selected, aes(x = "", y = Amount, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
labs(title = "Classification of the NOT selected proteins") +
scale_fill_manual(values = c("selected RBPs" = "midnightblue",
"selected Non-RBPs" = "firebrick",
"unknown" = "darkseagreen3"))
# Create a logical vector: TRUE if the protein in ctrl_selected is a known RBP
z = rownames(ctrl_selected) %in% rbp_pos$Entry_Name
length(z)
sum(z) # counts TRUE -> previously identified RBPs in ctrl_norm_mean
# Do the same for ctrl_not_selected
y = rownames(ctrl_not_selected) %in% rbp_pos$Entry_Name
length(y)
sum(y) # counts TRUE -> previously identified Non-RBPs in ctrl_norm_mean
# Classification of selected proteins
# Collect the protein names in each RBP2GO table and the names of the selected proteins as a vector, uppercase for comparison
prot_names_selected <- toupper(rownames(ctrl_selected))
rbp_pos_names <- toupper(rbp_pos$Entry_Name)
rbp_neg_names <- toupper(rbp_neg$Entry_Name)
# Create a status vector for each protein in ctrl_selected, default "unknown"
status_selected <- rep("unknown", nrow(ctrl_selected))
# Label proteins found in rbp_pos as "selected RBPs"
status_selected[prot_names_selected %in% rbp_pos_names] <- "selected RBPs"
# Label proteins found in rbp_neg as "selected Non-RBPs"
status_selected[prot_names_selected %in% rbp_neg_names] <- "selected Non-RBPs"
# Create a data frame of the counts per category
library(ggplot2)
df_plot <- as.data.frame(table(status_selected))
colnames(df_plot) <- c("Status", "Amount")
ggplot(df_plot, aes(x = "", y = Amount, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
labs(title = "Classification of the selected proteins") +
scale_fill_manual(values = c("selected RBPs" = "midnightblue",
"selected Non-RBPs" = "firebrick",
"unknown" = "darkseagreen3"))
