concatenate("chr",seq(1:22))
paste("chr",seq(1:22), sep="")
c(paste("chr",seq(1:22), sep=""),"chrX","chrY","chrMT")
which
q()
setwd("~/Desktop/Statistical_Analysis")
source('~/Desktop/Statistical_Analysis/MS_Statistical_Analysis.R')
curves_all("HNRPU_HUMAN")
curves_plot("HNRPU_HUMAN")
curves_all("HNRPU_HUMAN")
curves_plot("CTCF_HUMAN")
# define a function to plot the mean curves (CTRL and RNASE) (with single peaks for proteins with pb_fit)
# usage: curves_plot (pos) where "pos" is the Entry name (UniProt) of the protein - and only Entry name!
# Example: curves_plot("CTCF_HUMAN")
#********************************************************************************************************
curves_plot <- function(pos) {
# check if protein (pos) is listed in the table
if (pos %in% rownames(table)) {
# single peak fit for all proteins with pb_fit = TRUE
if ((table_ctrl_mean[pos, "pb_fit"] == "TRUE") && (table_rnase_mean[pos, "pb_fit"] == "FALSE")) {
fit_c_ctrl <- as.numeric(unlist(table_ctrl_mean[pos,"fit_c_corr"]))
fit_mean_ctrl <- as.numeric(unlist(table_ctrl_mean[pos,"fit_mean_corr"]))
fit_sigma_ctrl <- as.numeric(unlist(table_ctrl_mean[pos,"fit_sigma_corr"]))
n <- length(fit_c_ctrl)
Fractions <- round(seq(1,25,0.5),digits=1)
dfpb_ctrl <- as.data.frame(Fractions)
plot_ctrl <- ggplot()
for (i in 1:n) {
dfpb_ctrl$Amount <- ( fit_c_ctrl[i] * exp(-(Fractions-fit_mean_ctrl[i])**2/(2 * fit_sigma_ctrl[i]**2)) )
plot_ctrl <- plot_ctrl + geom_line(data=dfpb_ctrl, aes(x=Fractions, y=Amount), color="darkgreen", size=1)
}
dffit_rnase <- gauss_fit_fun_rnase(pos)
colnames(dffit_rnase) <- c("Fractions","Amount")
} else {
if ((table_ctrl_mean[pos, "pb_fit"] == "FALSE") && (table_rnase_mean[pos, "pb_fit"] == "TRUE")) {
fit_c_rnase <- as.numeric(unlist(table_rnase_mean[pos,"fit_c_corr"]))
fit_mean_rnase <- as.numeric(unlist(table_rnase_mean[pos,"fit_mean_corr"]))
fit_sigma_rnase <- as.numeric(unlist(table_rnase_mean[pos,"fit_sigma_corr"]))
n <- length(fit_c_rnase)
Fractions <- round(seq(1,25,0.5),digits=1)
dfpb_rnase <- as.data.frame(Fractions)
plot_rnase <- ggplot()
for (i in 1:n) {
dfpb_rnase$Amount <- ( fit_c_rnase[i] * exp(-(Fractions-fit_mean_rnase[i])**2/(2 * fit_sigma_rnase[i]**2)) )
plot_rnase <- plot_rnase + geom_line(data=dfpb_rnase, aes(x=Fractions, y=Amount), color="darkred", size=1)
}
dffit_ctrl <- gauss_fit_fun_ctrl(pos)
colnames(dffit_ctrl) <- c("Fractions","Amount")
} else {
if ((table_ctrl_mean[pos, "pb_fit"] == "TRUE") && (table_rnase_mean[pos, "pb_fit"] == "TRUE")) {
fit_c_ctrl <- as.numeric(unlist(table_ctrl_mean[pos,"fit_c_corr"]))
fit_mean_ctrl <- as.numeric(unlist(table_ctrl_mean[pos,"fit_mean_corr"]))
fit_sigma_ctrl <- as.numeric(unlist(table_ctrl_mean[pos,"fit_sigma_corr"]))
n <- length(fit_c_ctrl)
Fractions <- round(seq(1,25,0.5),digits=1)
dfpb_ctrl <- as.data.frame(Fractions)
plot_CR <- ggplot()
for (i in 1:n) {
dfpb_ctrl$Amount <- ( fit_c_ctrl[i] * exp(-(Fractions-fit_mean_ctrl[i])**2/(2 * fit_sigma_ctrl[i]**2)) )
plot_CR <- plot_CR + geom_line(data=dfpb_ctrl, aes(x=Fractions, y=Amount), color="darkgreen", size=1)
}
fit_c_rnase <- as.numeric(unlist(table_rnase_mean[pos,"fit_c_corr"]))
fit_mean_rnase <- as.numeric(unlist(table_rnase_mean[pos,"fit_mean_corr"]))
fit_sigma_rnase <- as.numeric(unlist(table_rnase_mean[pos,"fit_sigma_corr"]))
n <- length(fit_c_rnase)
Fractions <- round(seq(1,25,0.5),digits=1)
dfpb_rnase <- as.data.frame(Fractions)
for (i in 1:n) {
dfpb_rnase$Amount <- ( fit_c_rnase[i] * exp(-(Fractions-fit_mean_rnase[i])**2/(2 * fit_sigma_rnase[i]**2)) )
plot_CR <- plot_CR + geom_line(data=dfpb_rnase, aes(x=Fractions, y=Amount), color="darkred", size=1)
}
} else {
dffit_ctrl <- gauss_fit_fun_ctrl(pos)
colnames(dffit_ctrl) <- c("Fractions","Amount")
dffit_rnase <- gauss_fit_fun_rnase(pos)
colnames(dffit_rnase) <- c("Fractions","Amount")
}
}
}
# raw data - Amounts
x <- c(1:25)
ctrl <- as.numeric(ctrl_norm_mean[pos,1:25])
title <- pos
ctrl <- as.numeric(ctrl)
df_ctrl <- data.frame(x, ctrl)
colnames(df_ctrl) <- c("Fractions","Amount")
rnase <- as.numeric(rnase_norm_mean[pos,1:25])
df_rnase <- data.frame(x, rnase)
colnames(df_rnase) <- c("Fractions","Amount")
# standard deviation of mean values
df_sd_ctrl <- df_ctrl
df_sd_ctrl$upper <- ctrl + as.numeric(ctrl_norm_sd[pos,1:25])
df_sd_ctrl$lower <- ctrl - as.numeric(ctrl_norm_sd[pos,1:25])
df_sd_rnase <- df_rnase
df_sd_rnase$upper <- rnase + as.numeric(rnase_norm_sd[pos,1:25])
df_sd_rnase$lower <- rnase - as.numeric(rnase_norm_sd[pos,1:25])
# scatterPlot - depending on the "fitted", "fit_res", "pb_fit" values
#***************************************************************************************************
if ((table_ctrl_mean[pos, "fitted"] == "FALSE") || (table_rnase_mean[pos, "fitted"] == "FALSE") ) {
scatterPlot <- ggplot() +
# curve CTRL
geom_line(data=df_ctrl, aes(x=Fractions, y=Amount, color="green"), size=.5) +
geom_point(data=df_ctrl, mapping=aes(x=Fractions, y=Amount), color="green", shape=1, size=1) +
# shadow CTRL
geom_area(data=df_ctrl, aes(x=Fractions, y=Amount), fill="green", alpha=.1, show.legend=F) +
# shadded errors
geom_ribbon(data=df_sd_ctrl,aes(x=Fractions,ymin=lower,ymax=upper),alpha=0.3) +
# curve RNASE
geom_line(data=df_rnase, aes(x=Fractions, y=Amount, color="red"), size=.5) +
geom_point(data=df_rnase, mapping=aes(x=Fractions, y=Amount), color="red", shape=2, size=1) +
# shadded errors
geom_ribbon(data=df_sd_rnase,aes(x=Fractions,ymin=lower,ymax=upper),alpha=0.3) +
# shadow RNASE
geom_area(data=df_rnase, aes(x=Fractions, y=Amount), fill="red", alpha=.1, show.legend=F) +
# fit CTRL
geom_line(data=dffit_ctrl, aes(x=Fractions, y=Amount), color="darkgreen", size=1) +
# fit RNASE
geom_line(data=dffit_rnase, aes(x=Fractions, y=Amount), color="darkred", size=1) +
# New axis label
ylab("normalized protein amount") +
# title
title_pos +
# Legend
scale_color_manual(values = c("green","red"), labels=c("ctrl","RNases")) +
theme(legend.position=c(0,1), legend.justification=c(0,1), legend.title=element_blank(), axis.title.x=element_blank(), plot.title = element_text(size = rel(1.5), colour = "darkred"), legend.background = element_rect(colour = "black"),legend.key = element_rect(fill = "white")) +
# panel options
theme(panel.background = element_rect(fill = "white", color = "darkred", size = 3), panel.grid.major = element_line(colour = "lightgrey"), panel.grid.minor = element_line(colour = "lightgrey")) +
# x-axis scale and ticks
scale_x_discrete(name ="Fractions", limits=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"))
} else {
#***************************************************************************************************
if ((table_ctrl_mean[pos, "pb_fit"] == "TRUE") && (table_rnase_mean[pos, "pb_fit"] == "FALSE")) {
scatterPlot <- plot_ctrl +
# curve CTRL
geom_line(data=df_ctrl, aes(x=Fractions, y=Amount, color="green"), size=.5) +
geom_point(data=df_ctrl, mapping=aes(x=Fractions, y=Amount), color="green", shape=1, size=1) +
# shadow CTRL
geom_area(data=df_ctrl, aes(x=Fractions, y=Amount), fill="green", alpha=.1, show.legend=F) +
# shadded errors
geom_ribbon(data=df_sd_ctrl,aes(x=Fractions,ymin=lower,ymax=upper),alpha=0.3) +
# curve RNASE
geom_line(data=df_rnase, aes(x=Fractions, y=Amount, color="red"), size=.5) +
geom_point(data=df_rnase, mapping=aes(x=Fractions, y=Amount), color="red", shape=2, size=1) +
# shadded errors
geom_ribbon(data=df_sd_rnase,aes(x=Fractions,ymin=lower,ymax=upper),alpha=0.3) +
# shadow RNASE
geom_area(data=df_rnase, aes(x=Fractions, y=Amount), fill="red", alpha=.1, show.legend=F) +
# fit CTRL
#plot_ctrl +
# fit RNASE
geom_line(data=dffit_rnase, aes(x=Fractions, y=Amount), color="darkred", size=1) +
# New axis label
ylab("normalized protein amount") +
# title
labs(title = title) +
# Legend
scale_color_manual(values = c("green","red"), labels=c("ctrl","RNases")) +
theme(legend.position=c(0,1), legend.justification=c(0,1), legend.title=element_blank(), axis.title.x=element_blank(), plot.title = element_text(size = rel(1.5), colour = "darkred"), legend.background = element_rect(colour = "black"),legend.key = element_rect(fill = "white")) +
# panel options
theme(panel.background = element_rect(fill = "white", color = "darkred", size = 3), panel.grid.major = element_line(colour = "lightgrey"), panel.grid.minor = element_line(colour = "lightgrey")) +
# x-axis scale and ticks
scale_x_discrete(name ="Fractions", limits=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"))
} else {
#***************************************************************************************************
if ((table_ctrl_mean[pos, "pb_fit"] == "FALSE") && (table_rnase_mean[pos, "pb_fit"] == "TRUE")) {
scatterPlot <- plot_rnase +
# curve CTRL
geom_line(data=df_ctrl, aes(x=Fractions, y=Amount, color="green"), size=.5) +
geom_point(data=df_ctrl, mapping=aes(x=Fractions, y=Amount), color="green", shape=1, size=1) +
# shadow CTRL
geom_area(data=df_ctrl, aes(x=Fractions, y=Amount), fill="green", alpha=.1, show.legend=F) +
# shadded errors
geom_ribbon(data=df_sd_ctrl,aes(x=Fractions,ymin=lower,ymax=upper),alpha=0.3) +
# curve RNASE
geom_line(data=df_rnase, aes(x=Fractions, y=Amount, color="red"), size=.5) +
geom_point(data=df_rnase, mapping=aes(x=Fractions, y=Amount), color="red", shape=2, size=1) +
# shadded errors
geom_ribbon(data=df_sd_rnase,aes(x=Fractions,ymin=lower,ymax=upper),alpha=0.3) +
# shadow RNASE
geom_area(data=df_rnase, aes(x=Fractions, y=Amount), fill="red", alpha=.1, show.legend=F) +
# fit CTRL
geom_line(data=dffit_ctrl, aes(x=Fractions, y=Amount), color="darkgreen", size=1) +
# fit RNASE
# plot_rnase +
# New axis label
ylab("normalized protein amount") +
# title
labs(title = title) +
# Legend
scale_color_manual(values = c("green","red"), labels=c("ctrl","RNases")) +
theme(legend.position=c(0,1), legend.justification=c(0,1), legend.title=element_blank(), axis.title.x=element_blank(), plot.title = element_text(size = rel(1.5), colour = "darkred"), legend.background = element_rect(colour = "black"),legend.key = element_rect(fill = "white")) +
# panel options
theme(panel.background = element_rect(fill = "white", color = "darkred", size = 3), panel.grid.major = element_line(colour = "lightgrey"), panel.grid.minor = element_line(colour = "lightgrey")) +
# x-axis scale and ticks
scale_x_discrete(name ="Fractions", limits=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"))
} else {
#***************************************************************************************************
if ((table_ctrl_mean[pos, "pb_fit"] == "TRUE") && (table_rnase_mean[pos, "pb_fit"] == "TRUE")) {
scatterPlot <- plot_CR +
# curve CTRL
geom_line(data=df_ctrl, aes(x=Fractions, y=Amount, color="green"), size=.5) +
geom_point(data=df_ctrl, mapping=aes(x=Fractions, y=Amount), color="green", shape=1, size=1) +
# shadow CTRL
geom_area(data=df_ctrl, aes(x=Fractions, y=Amount), fill="green", alpha=.1, show.legend=F) +
# shadded errors
geom_ribbon(data=df_sd_ctrl,aes(x=Fractions,ymin=lower,ymax=upper),alpha=0.3) +
# curve RNASE
geom_line(data=df_rnase, aes(x=Fractions, y=Amount, color="red"), size=.5) +
geom_point(data=df_rnase, mapping=aes(x=Fractions, y=Amount), color="red", shape=2, size=1) +
# shadded errors
geom_ribbon(data=df_sd_rnase,aes(x=Fractions,ymin=lower,ymax=upper),alpha=0.3) +
# shadow RNASE
geom_area(data=df_rnase, aes(x=Fractions, y=Amount), fill="red", alpha=.1, show.legend=F) +
# fit CTRL
# plot_CR +
# fit RNASE
# plot_CR +
# New axis label
ylab("normalized protein amount") +
# title
labs(title = title) +
# Legend
scale_color_manual(values = c("green","red"), labels=c("ctrl","RNases")) +
theme(legend.position=c(0,1), legend.justification=c(0,1), legend.title=element_blank(), axis.title.x=element_blank(), plot.title = element_text(size = rel(1.5), colour = "darkred"), legend.background = element_rect(colour = "black"),legend.key = element_rect(fill = "white")) +
# panel options
theme(panel.background = element_rect(fill = "white", color = "darkred", size = 3), panel.grid.major = element_line(colour = "lightgrey"), panel.grid.minor = element_line(colour = "lightgrey")) +
# x-axis scale and ticks
scale_x_discrete(name ="Fractions", limits=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"))
} else {
#***************************************************************************************************
# if everything is OK ;-)
scatterPlot <- ggplot() +
# curve CTRL
geom_line(data=df_ctrl, aes(x=Fractions, y=Amount, color="green"), size=.5) +
geom_point(data=df_ctrl, mapping=aes(x=Fractions, y=Amount), color="green", shape=1, size=1) +
# shadow CTRL
geom_area(data=df_ctrl, aes(x=Fractions, y=Amount), fill="green", alpha=.1, show.legend=F) +
# shadded errors
geom_ribbon(data=df_sd_ctrl,aes(x=Fractions,ymin=lower,ymax=upper),alpha=0.3) +
# curve RNASE
geom_line(data=df_rnase, aes(x=Fractions, y=Amount, color="red"), size=.5) +
geom_point(data=df_rnase, mapping=aes(x=Fractions, y=Amount), color="red", shape=2, size=1) +
# shadded errors
geom_ribbon(data=df_sd_rnase,aes(x=Fractions,ymin=lower,ymax=upper),alpha=0.3) +
# shadow RNASE
geom_area(data=df_rnase, aes(x=Fractions, y=Amount), fill="red", alpha=.1, show.legend=F) +
# fit CTRL
geom_line(data=dffit_ctrl, aes(x=Fractions, y=Amount), color="darkgreen", size=1) +
# fit RNASE
geom_line(data=dffit_rnase, aes(x=Fractions, y=Amount), color="darkred", size=1) +
# New axis label
ylab("normalized protein amount") +
# title
labs(title = title) +
# Legend
scale_color_manual(values = c("#09b957","#f42730"), labels=c("Control","RNase")) +
theme(legend.position=c(0.02,0.98),
legend.direction="horizontal",
legend.title.align = '0',
legend.justification=c(0,1),
legend.title=element_blank(),
axis.title.x=element_blank(),
plot.title = element_text(size = rel(1.5),
colour = "black",
hjust = 0.5, face = "bold"),
legend.background = element_rect(colour = "black"),
legend.key = element_rect(fill = "white")) +
# panel options
theme(panel.background = element_rect(fill = "white"), panel.grid.major = element_line(colour = "lightgrey"), panel.grid.minor = element_line(colour = "lightgrey"), axis.title.y = element_text(color="black", face="bold"), plot.margin = margin(t=1, r=0, b=1, l=0, "cm"))  +
# x-axis scale and ticks
scale_x_discrete(name ="Fractions", limits=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"))
}
}
}
}
# plot a raster with ggplot
dataf1 <- data.frame(ctrl_norm_mean[pos,1:25],rnase_norm_mean[pos,1:25])
r1 <- raster(xmn=0, xmx = 25, ymn = 0, ymx = 1, nrows = 1, ncols = 25)
r2 <- raster(xmn=0, xmx = 25, ymn = 0, ymx = 1, nrows = 1, ncols = 25)
r1[] <- as.numeric(dataf1[1,1:25])
r2[] <- as.numeric(dataf1[1,26:50])
r.spdf1 <- as(r1, "SpatialPixelsDataFrame")
r1.df <- as.data.frame(r.spdf1)
colnames(r1.df) <- c("Amount","Fraction","ctrl")
r.spdf2 <- as(r2, "SpatialPixelsDataFrame")
r2.df <- as.data.frame(r.spdf2)
colnames(r2.df) <- c("Amount","Fractions","RNases")
# now plot the whole
plot1 <- ggplot(r1.df, aes(x=Fraction+0.5, y=ctrl)) + geom_tile(aes(fill = Amount)) + coord_equal(2) + theme(legend.position="none") + scale_fill_gradient(low="white", high="green") + theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.title.x=element_blank()) + scale_x_continuous(breaks=c(seq(1,25,by=1)))
plot2 <- ggplot(r2.df, aes(x=Fractions+0.5, y=RNases)) + geom_tile(aes(fill = Amount)) + coord_equal(2) + theme(legend.position="none") + scale_fill_gradient(low="white", high="red") + theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.title.x=element_blank()) + scale_x_continuous(breaks=c(seq(1,25,by=1)))
# combine all graphics in one panel
grid.arrange(scatterPlot, plot1, plot2, ncol=1, nrow=3, heights=c(1.5,.5,.5), bottom = "Fractions")
# end from "if (pos %in% rownames(table))"
# if the protein is not listed in the data
} else {
scatterPlot <- ggplot() + geom_text(aes(x=5, y=5, label=paste(pos, "not listed")), color="darkred", size=10) +
theme(legend.position="none", axis.title.x=element_blank(), axis.title.y=element_blank(),axis.text.x=element_blank(),axis.text.y=element_blank())
scatterPlot
}
# end of the function "curves_plot()" - curves_plot("CTCF_HUMAN")
}
curves_plot("CTCF_HUMAN")
q()
